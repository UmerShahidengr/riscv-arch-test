
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_30720:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a33ce and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a33ce; op2val:0x0;
op3val:0x3ffc000; valaddr_reg:x3; val_offset:92160*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92160*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30721:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a33ce and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a33ce; op2val:0x0;
op3val:0x3ffe000; valaddr_reg:x3; val_offset:92163*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92163*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30722:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a33ce and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a33ce; op2val:0x0;
op3val:0x3fff000; valaddr_reg:x3; val_offset:92166*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92166*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30723:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a33ce and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a33ce; op2val:0x0;
op3val:0x3fff800; valaddr_reg:x3; val_offset:92169*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92169*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30724:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a33ce and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a33ce; op2val:0x0;
op3val:0x3fffc00; valaddr_reg:x3; val_offset:92172*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92172*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30725:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a33ce and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a33ce; op2val:0x0;
op3val:0x3fffe00; valaddr_reg:x3; val_offset:92175*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92175*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30726:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a33ce and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a33ce; op2val:0x0;
op3val:0x3ffff00; valaddr_reg:x3; val_offset:92178*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92178*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a33ce and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a33ce; op2val:0x0;
op3val:0x3ffff80; valaddr_reg:x3; val_offset:92181*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92181*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30728:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a33ce and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a33ce; op2val:0x0;
op3val:0x3ffffc0; valaddr_reg:x3; val_offset:92184*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92184*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a33ce and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a33ce; op2val:0x0;
op3val:0x3ffffe0; valaddr_reg:x3; val_offset:92187*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92187*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30730:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a33ce and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a33ce; op2val:0x0;
op3val:0x3fffff0; valaddr_reg:x3; val_offset:92190*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92190*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30731:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a33ce and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a33ce; op2val:0x0;
op3val:0x3fffff8; valaddr_reg:x3; val_offset:92193*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92193*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30732:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a33ce and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a33ce; op2val:0x0;
op3val:0x3fffffc; valaddr_reg:x3; val_offset:92196*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92196*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30733:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a33ce and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a33ce; op2val:0x0;
op3val:0x3fffffe; valaddr_reg:x3; val_offset:92199*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92199*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30734:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a33ce and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a33ce; op2val:0x0;
op3val:0x3ffffff; valaddr_reg:x3; val_offset:92202*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92202*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30735:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x3f800001; valaddr_reg:x3; val_offset:92205*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92205*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30736:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x3f800003; valaddr_reg:x3; val_offset:92208*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92208*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30737:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x3f800007; valaddr_reg:x3; val_offset:92211*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92211*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30738:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x3f999999; valaddr_reg:x3; val_offset:92214*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92214*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30739:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:92217*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92217*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30740:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:92220*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92220*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30741:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:92223*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92223*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30742:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:92226*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92226*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30743:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:92229*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92229*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30744:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:92232*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92232*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30745:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:92235*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92235*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30746:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:92238*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92238*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30747:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:92241*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92241*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30748:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:92244*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92244*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30749:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:92247*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92247*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30750:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:92250*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92250*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30751:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x43000000; valaddr_reg:x3; val_offset:92253*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92253*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30752:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x43000001; valaddr_reg:x3; val_offset:92256*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92256*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30753:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x43000003; valaddr_reg:x3; val_offset:92259*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92259*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30754:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x43000007; valaddr_reg:x3; val_offset:92262*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92262*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30755:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x4300000f; valaddr_reg:x3; val_offset:92265*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92265*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30756:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x4300001f; valaddr_reg:x3; val_offset:92268*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92268*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30757:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x4300003f; valaddr_reg:x3; val_offset:92271*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92271*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30758:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x4300007f; valaddr_reg:x3; val_offset:92274*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92274*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30759:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x430000ff; valaddr_reg:x3; val_offset:92277*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92277*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30760:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x430001ff; valaddr_reg:x3; val_offset:92280*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92280*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30761:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x430003ff; valaddr_reg:x3; val_offset:92283*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92283*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30762:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x430007ff; valaddr_reg:x3; val_offset:92286*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92286*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30763:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x43000fff; valaddr_reg:x3; val_offset:92289*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92289*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30764:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x43001fff; valaddr_reg:x3; val_offset:92292*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92292*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30765:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x43003fff; valaddr_reg:x3; val_offset:92295*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92295*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30766:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x43007fff; valaddr_reg:x3; val_offset:92298*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92298*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30767:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x4300ffff; valaddr_reg:x3; val_offset:92301*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92301*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30768:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x4301ffff; valaddr_reg:x3; val_offset:92304*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92304*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30769:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x4303ffff; valaddr_reg:x3; val_offset:92307*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92307*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30770:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x4307ffff; valaddr_reg:x3; val_offset:92310*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92310*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30771:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x430fffff; valaddr_reg:x3; val_offset:92313*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92313*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30772:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x431fffff; valaddr_reg:x3; val_offset:92316*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92316*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30773:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x433fffff; valaddr_reg:x3; val_offset:92319*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92319*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30774:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x43400000; valaddr_reg:x3; val_offset:92322*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92322*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30775:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x43600000; valaddr_reg:x3; val_offset:92325*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92325*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30776:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x43700000; valaddr_reg:x3; val_offset:92328*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92328*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30777:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x43780000; valaddr_reg:x3; val_offset:92331*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92331*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30778:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x437c0000; valaddr_reg:x3; val_offset:92334*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92334*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30779:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x437e0000; valaddr_reg:x3; val_offset:92337*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92337*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30780:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x437f0000; valaddr_reg:x3; val_offset:92340*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92340*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30781:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x437f8000; valaddr_reg:x3; val_offset:92343*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92343*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30782:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x437fc000; valaddr_reg:x3; val_offset:92346*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92346*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30783:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x437fe000; valaddr_reg:x3; val_offset:92349*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92349*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30784:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x437ff000; valaddr_reg:x3; val_offset:92352*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92352*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30785:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x437ff800; valaddr_reg:x3; val_offset:92355*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92355*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30786:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x437ffc00; valaddr_reg:x3; val_offset:92358*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92358*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30787:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x437ffe00; valaddr_reg:x3; val_offset:92361*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92361*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30788:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x437fff00; valaddr_reg:x3; val_offset:92364*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92364*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30789:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x437fff80; valaddr_reg:x3; val_offset:92367*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92367*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30790:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x437fffc0; valaddr_reg:x3; val_offset:92370*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92370*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30791:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x437fffe0; valaddr_reg:x3; val_offset:92373*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92373*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30792:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x437ffff0; valaddr_reg:x3; val_offset:92376*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92376*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x437ffff8; valaddr_reg:x3; val_offset:92379*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92379*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30794:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x437ffffc; valaddr_reg:x3; val_offset:92382*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92382*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x437ffffe; valaddr_reg:x3; val_offset:92385*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92385*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30796:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a54c0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3514a8 and fs3 == 0 and fe3 == 0x86 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a54c0; op2val:0x3514a8;
op3val:0x437fffff; valaddr_reg:x3; val_offset:92388*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92388*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:92391*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92391*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30798:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:92394*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92394*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:92397*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92397*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30800:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:92400*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92400*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30801:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:92403*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92403*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30802:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:92406*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92406*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30803:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:92409*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92409*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30804:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:92412*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92412*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:92415*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92415*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30806:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:92418*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92418*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30807:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:92421*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92421*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30808:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:92424*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92424*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30809:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:92427*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92427*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30810:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:92430*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92430*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:92433*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92433*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30812:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:92436*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92436*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf000000; valaddr_reg:x3; val_offset:92439*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92439*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf000001; valaddr_reg:x3; val_offset:92442*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92442*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf000003; valaddr_reg:x3; val_offset:92445*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92445*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf000007; valaddr_reg:x3; val_offset:92448*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92448*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf00000f; valaddr_reg:x3; val_offset:92451*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92451*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30818:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf00001f; valaddr_reg:x3; val_offset:92454*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92454*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf00003f; valaddr_reg:x3; val_offset:92457*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92457*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30820:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf00007f; valaddr_reg:x3; val_offset:92460*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92460*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf0000ff; valaddr_reg:x3; val_offset:92463*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92463*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf0001ff; valaddr_reg:x3; val_offset:92466*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92466*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf0003ff; valaddr_reg:x3; val_offset:92469*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92469*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf0007ff; valaddr_reg:x3; val_offset:92472*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92472*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf000fff; valaddr_reg:x3; val_offset:92475*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92475*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30826:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf001fff; valaddr_reg:x3; val_offset:92478*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92478*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf003fff; valaddr_reg:x3; val_offset:92481*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92481*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30828:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf007fff; valaddr_reg:x3; val_offset:92484*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92484*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf00ffff; valaddr_reg:x3; val_offset:92487*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92487*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30830:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf01ffff; valaddr_reg:x3; val_offset:92490*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92490*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf03ffff; valaddr_reg:x3; val_offset:92493*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92493*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30832:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf07ffff; valaddr_reg:x3; val_offset:92496*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92496*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf0fffff; valaddr_reg:x3; val_offset:92499*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92499*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30834:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf1fffff; valaddr_reg:x3; val_offset:92502*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92502*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf3fffff; valaddr_reg:x3; val_offset:92505*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92505*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30836:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf400000; valaddr_reg:x3; val_offset:92508*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92508*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf600000; valaddr_reg:x3; val_offset:92511*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92511*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf700000; valaddr_reg:x3; val_offset:92514*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92514*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf780000; valaddr_reg:x3; val_offset:92517*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92517*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf7c0000; valaddr_reg:x3; val_offset:92520*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92520*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf7e0000; valaddr_reg:x3; val_offset:92523*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92523*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf7f0000; valaddr_reg:x3; val_offset:92526*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92526*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf7f8000; valaddr_reg:x3; val_offset:92529*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92529*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf7fc000; valaddr_reg:x3; val_offset:92532*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92532*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf7fe000; valaddr_reg:x3; val_offset:92535*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92535*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf7ff000; valaddr_reg:x3; val_offset:92538*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92538*0 + 3*240*FLEN/8, x4, x1, x2)

inst_30847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf7ff800; valaddr_reg:x3; val_offset:92541*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92541*0 + 3*240*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132423630,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67092480,32,FLEN)
NAN_BOXED(2132423630,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67100672,32,FLEN)
NAN_BOXED(2132423630,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67104768,32,FLEN)
NAN_BOXED(2132423630,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67106816,32,FLEN)
NAN_BOXED(2132423630,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67107840,32,FLEN)
NAN_BOXED(2132423630,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108352,32,FLEN)
NAN_BOXED(2132423630,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108608,32,FLEN)
NAN_BOXED(2132423630,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108736,32,FLEN)
NAN_BOXED(2132423630,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108800,32,FLEN)
NAN_BOXED(2132423630,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108832,32,FLEN)
NAN_BOXED(2132423630,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108848,32,FLEN)
NAN_BOXED(2132423630,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108856,32,FLEN)
NAN_BOXED(2132423630,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108860,32,FLEN)
NAN_BOXED(2132423630,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108862,32,FLEN)
NAN_BOXED(2132423630,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108863,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1124073472,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1124073473,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1124073475,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1124073479,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1124073487,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1124073503,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1124073535,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1124073599,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1124073727,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1124073983,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1124074495,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1124075519,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1124077567,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1124081663,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1124089855,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1124106239,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1124139007,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1124204543,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1124335615,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1124597759,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1125122047,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1126170623,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1128267775,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1128267776,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1130364928,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1131413504,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1131937792,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1132199936,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1132331008,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1132396544,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1132429312,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1132445696,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1132453888,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1132457984,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1132460032,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1132461056,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1132461568,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1132461824,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1132461952,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1132462016,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1132462048,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1132462064,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1132462072,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1132462076,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1132462078,32,FLEN)
NAN_BOXED(2132432064,32,FLEN)
NAN_BOXED(3478696,32,FLEN)
NAN_BOXED(1132462079,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658240,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658241,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658243,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658247,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658255,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658271,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658303,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658367,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658495,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658751,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251659263,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251660287,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251662335,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251666431,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251674623,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251691007,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251723775,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251789311,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251920383,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(252182527,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(252706815,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(253755391,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(255852543,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(255852544,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(257949696,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(258998272,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(259522560,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(259784704,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(259915776,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(259981312,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260014080,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260030464,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260038656,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260042752,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260044800,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
