
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_30848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf7ffc00; valaddr_reg:x3; val_offset:92544*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92544*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf7ffe00; valaddr_reg:x3; val_offset:92547*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92547*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf7fff00; valaddr_reg:x3; val_offset:92550*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92550*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf7fff80; valaddr_reg:x3; val_offset:92553*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92553*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf7fffc0; valaddr_reg:x3; val_offset:92556*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92556*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf7fffe0; valaddr_reg:x3; val_offset:92559*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92559*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf7ffff0; valaddr_reg:x3; val_offset:92562*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92562*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf7ffff8; valaddr_reg:x3; val_offset:92565*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92565*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30856:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf7ffffc; valaddr_reg:x3; val_offset:92568*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92568*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf7ffffe; valaddr_reg:x3; val_offset:92571*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92571*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30858:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a62f6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a62f6; op2val:0x0;
op3val:0xf7fffff; valaddr_reg:x3; val_offset:92574*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92574*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb000000; valaddr_reg:x3; val_offset:92577*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92577*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30860:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb000001; valaddr_reg:x3; val_offset:92580*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92580*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb000003; valaddr_reg:x3; val_offset:92583*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92583*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30862:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb000007; valaddr_reg:x3; val_offset:92586*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92586*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb00000f; valaddr_reg:x3; val_offset:92589*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92589*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30864:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb00001f; valaddr_reg:x3; val_offset:92592*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92592*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb00003f; valaddr_reg:x3; val_offset:92595*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92595*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb00007f; valaddr_reg:x3; val_offset:92598*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92598*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb0000ff; valaddr_reg:x3; val_offset:92601*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92601*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb0001ff; valaddr_reg:x3; val_offset:92604*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92604*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb0003ff; valaddr_reg:x3; val_offset:92607*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92607*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb0007ff; valaddr_reg:x3; val_offset:92610*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92610*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb000fff; valaddr_reg:x3; val_offset:92613*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92613*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb001fff; valaddr_reg:x3; val_offset:92616*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92616*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb003fff; valaddr_reg:x3; val_offset:92619*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92619*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb007fff; valaddr_reg:x3; val_offset:92622*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92622*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb00ffff; valaddr_reg:x3; val_offset:92625*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92625*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb01ffff; valaddr_reg:x3; val_offset:92628*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92628*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb03ffff; valaddr_reg:x3; val_offset:92631*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92631*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb07ffff; valaddr_reg:x3; val_offset:92634*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92634*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb0fffff; valaddr_reg:x3; val_offset:92637*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92637*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb1fffff; valaddr_reg:x3; val_offset:92640*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92640*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb3fffff; valaddr_reg:x3; val_offset:92643*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92643*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb400000; valaddr_reg:x3; val_offset:92646*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92646*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb600000; valaddr_reg:x3; val_offset:92649*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92649*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb700000; valaddr_reg:x3; val_offset:92652*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92652*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb780000; valaddr_reg:x3; val_offset:92655*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92655*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb7c0000; valaddr_reg:x3; val_offset:92658*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92658*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb7e0000; valaddr_reg:x3; val_offset:92661*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92661*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb7f0000; valaddr_reg:x3; val_offset:92664*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92664*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb7f8000; valaddr_reg:x3; val_offset:92667*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92667*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb7fc000; valaddr_reg:x3; val_offset:92670*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92670*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb7fe000; valaddr_reg:x3; val_offset:92673*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92673*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb7ff000; valaddr_reg:x3; val_offset:92676*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92676*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb7ff800; valaddr_reg:x3; val_offset:92679*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92679*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb7ffc00; valaddr_reg:x3; val_offset:92682*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92682*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb7ffe00; valaddr_reg:x3; val_offset:92685*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92685*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb7fff00; valaddr_reg:x3; val_offset:92688*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92688*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb7fff80; valaddr_reg:x3; val_offset:92691*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92691*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb7fffc0; valaddr_reg:x3; val_offset:92694*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92694*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb7fffe0; valaddr_reg:x3; val_offset:92697*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92697*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb7ffff0; valaddr_reg:x3; val_offset:92700*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92700*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb7ffff8; valaddr_reg:x3; val_offset:92703*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92703*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb7ffffc; valaddr_reg:x3; val_offset:92706*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92706*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb7ffffe; valaddr_reg:x3; val_offset:92709*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92709*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x76 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbb7fffff; valaddr_reg:x3; val_offset:92712*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92712*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbf800001; valaddr_reg:x3; val_offset:92715*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92715*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbf800003; valaddr_reg:x3; val_offset:92718*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92718*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbf800007; valaddr_reg:x3; val_offset:92721*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92721*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbf999999; valaddr_reg:x3; val_offset:92724*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92724*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:92727*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92727*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:92730*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92730*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:92733*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92733*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:92736*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92736*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:92739*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92739*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:92742*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92742*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:92745*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92745*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:92748*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92748*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:92751*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92751*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:92754*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92754*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:92757*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92757*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ac304 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34eed6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ac304; op2val:0x8034eed6;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:92760*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92760*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe1000000; valaddr_reg:x3; val_offset:92763*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92763*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe1000001; valaddr_reg:x3; val_offset:92766*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92766*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe1000003; valaddr_reg:x3; val_offset:92769*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92769*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe1000007; valaddr_reg:x3; val_offset:92772*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92772*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe100000f; valaddr_reg:x3; val_offset:92775*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92775*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe100001f; valaddr_reg:x3; val_offset:92778*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92778*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe100003f; valaddr_reg:x3; val_offset:92781*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92781*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe100007f; valaddr_reg:x3; val_offset:92784*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92784*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe10000ff; valaddr_reg:x3; val_offset:92787*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92787*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe10001ff; valaddr_reg:x3; val_offset:92790*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92790*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe10003ff; valaddr_reg:x3; val_offset:92793*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92793*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe10007ff; valaddr_reg:x3; val_offset:92796*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92796*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe1000fff; valaddr_reg:x3; val_offset:92799*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92799*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe1001fff; valaddr_reg:x3; val_offset:92802*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92802*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe1003fff; valaddr_reg:x3; val_offset:92805*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92805*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe1007fff; valaddr_reg:x3; val_offset:92808*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92808*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe100ffff; valaddr_reg:x3; val_offset:92811*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92811*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe101ffff; valaddr_reg:x3; val_offset:92814*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92814*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe103ffff; valaddr_reg:x3; val_offset:92817*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92817*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe107ffff; valaddr_reg:x3; val_offset:92820*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92820*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe10fffff; valaddr_reg:x3; val_offset:92823*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92823*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe11fffff; valaddr_reg:x3; val_offset:92826*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92826*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe13fffff; valaddr_reg:x3; val_offset:92829*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92829*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30944:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe1400000; valaddr_reg:x3; val_offset:92832*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92832*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30945:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe1600000; valaddr_reg:x3; val_offset:92835*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92835*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30946:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe1700000; valaddr_reg:x3; val_offset:92838*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92838*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30947:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe1780000; valaddr_reg:x3; val_offset:92841*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92841*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30948:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe17c0000; valaddr_reg:x3; val_offset:92844*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92844*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30949:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe17e0000; valaddr_reg:x3; val_offset:92847*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92847*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30950:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe17f0000; valaddr_reg:x3; val_offset:92850*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92850*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe17f8000; valaddr_reg:x3; val_offset:92853*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92853*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30952:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe17fc000; valaddr_reg:x3; val_offset:92856*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92856*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe17fe000; valaddr_reg:x3; val_offset:92859*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92859*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30954:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe17ff000; valaddr_reg:x3; val_offset:92862*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92862*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe17ff800; valaddr_reg:x3; val_offset:92865*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92865*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30956:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe17ffc00; valaddr_reg:x3; val_offset:92868*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92868*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe17ffe00; valaddr_reg:x3; val_offset:92871*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92871*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30958:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe17fff00; valaddr_reg:x3; val_offset:92874*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92874*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe17fff80; valaddr_reg:x3; val_offset:92877*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92877*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30960:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe17fffc0; valaddr_reg:x3; val_offset:92880*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92880*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe17fffe0; valaddr_reg:x3; val_offset:92883*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92883*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe17ffff0; valaddr_reg:x3; val_offset:92886*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92886*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe17ffff8; valaddr_reg:x3; val_offset:92889*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92889*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe17ffffc; valaddr_reg:x3; val_offset:92892*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92892*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe17ffffe; valaddr_reg:x3; val_offset:92895*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92895*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xc2 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xe17fffff; valaddr_reg:x3; val_offset:92898*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92898*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xff000001; valaddr_reg:x3; val_offset:92901*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92901*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30968:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xff000003; valaddr_reg:x3; val_offset:92904*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92904*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xff000007; valaddr_reg:x3; val_offset:92907*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92907*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30970:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xff199999; valaddr_reg:x3; val_offset:92910*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92910*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xff249249; valaddr_reg:x3; val_offset:92913*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92913*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xff333333; valaddr_reg:x3; val_offset:92916*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92916*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:92919*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92919*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:92922*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92922*0 + 3*241*FLEN/8, x4, x1, x2)

inst_30975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xff444444; valaddr_reg:x3; val_offset:92925*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92925*0 + 3*241*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260045824,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046336,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046592,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046720,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046784,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046816,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046832,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046840,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046844,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046846,32,FLEN)
NAN_BOXED(2132435702,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046847,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3137339392,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3137339393,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3137339395,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3137339399,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3137339407,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3137339423,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3137339455,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3137339519,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3137339647,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3137339903,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3137340415,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3137341439,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3137343487,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3137347583,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3137355775,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3137372159,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3137404927,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3137470463,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3137601535,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3137863679,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3138387967,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3139436543,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3141533695,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3141533696,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3143630848,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3144679424,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3145203712,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3145465856,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3145596928,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3145662464,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3145695232,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3145711616,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3145719808,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3145723904,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3145725952,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3145726976,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3145727488,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3145727744,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3145727872,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3145727936,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3145727968,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3145727984,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3145727992,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3145727996,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3145727998,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3145727999,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2132460292,32,FLEN)
NAN_BOXED(2150952662,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3774873600,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3774873601,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3774873603,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3774873607,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3774873615,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3774873631,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3774873663,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3774873727,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3774873855,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3774874111,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3774874623,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3774875647,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3774877695,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3774881791,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3774889983,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3774906367,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3774939135,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3775004671,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3775135743,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3775397887,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3775922175,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3776970751,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3779067903,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3779067904,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3781165056,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3782213632,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3782737920,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3783000064,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3783131136,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3783196672,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3783229440,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3783245824,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3783254016,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3783258112,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3783260160,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3783261184,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3783261696,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3783261952,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3783262080,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3783262144,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3783262176,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3783262192,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3783262200,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3783262204,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3783262206,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(3783262207,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
