
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_30976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:92928*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92928*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:92931*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92931*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xff666666; valaddr_reg:x3; val_offset:92934*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92934*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:92937*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92937*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:92940*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92940*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:92943*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92943*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae1f2 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x539111 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae1f2; op2val:0xbfd39111;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:92946*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92946*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x3f800001; valaddr_reg:x3; val_offset:92949*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92949*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x3f800003; valaddr_reg:x3; val_offset:92952*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92952*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x3f800007; valaddr_reg:x3; val_offset:92955*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92955*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x3f999999; valaddr_reg:x3; val_offset:92958*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92958*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:92961*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92961*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:92964*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92964*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:92967*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92967*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:92970*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92970*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:92973*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92973*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:92976*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92976*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:92979*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92979*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:92982*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92982*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30995:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:92985*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92985*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:92988*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92988*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:92991*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92991*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:92994*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92994*0 + 3*242*FLEN/8, x4, x1, x2)

inst_30999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d000000; valaddr_reg:x3; val_offset:92997*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 92997*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31000:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d000001; valaddr_reg:x3; val_offset:93000*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93000*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31001:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d000003; valaddr_reg:x3; val_offset:93003*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93003*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31002:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d000007; valaddr_reg:x3; val_offset:93006*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93006*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31003:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d00000f; valaddr_reg:x3; val_offset:93009*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93009*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31004:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d00001f; valaddr_reg:x3; val_offset:93012*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93012*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31005:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d00003f; valaddr_reg:x3; val_offset:93015*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93015*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31006:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d00007f; valaddr_reg:x3; val_offset:93018*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93018*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31007:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d0000ff; valaddr_reg:x3; val_offset:93021*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93021*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31008:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d0001ff; valaddr_reg:x3; val_offset:93024*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93024*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31009:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d0003ff; valaddr_reg:x3; val_offset:93027*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93027*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31010:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d0007ff; valaddr_reg:x3; val_offset:93030*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93030*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31011:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d000fff; valaddr_reg:x3; val_offset:93033*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93033*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31012:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d001fff; valaddr_reg:x3; val_offset:93036*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93036*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31013:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d003fff; valaddr_reg:x3; val_offset:93039*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93039*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31014:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d007fff; valaddr_reg:x3; val_offset:93042*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93042*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31015:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d00ffff; valaddr_reg:x3; val_offset:93045*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93045*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31016:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d01ffff; valaddr_reg:x3; val_offset:93048*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93048*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31017:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d03ffff; valaddr_reg:x3; val_offset:93051*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93051*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31018:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d07ffff; valaddr_reg:x3; val_offset:93054*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93054*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31019:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d0fffff; valaddr_reg:x3; val_offset:93057*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93057*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31020:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d1fffff; valaddr_reg:x3; val_offset:93060*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93060*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31021:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d3fffff; valaddr_reg:x3; val_offset:93063*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93063*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31022:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d400000; valaddr_reg:x3; val_offset:93066*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93066*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31023:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d600000; valaddr_reg:x3; val_offset:93069*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93069*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31024:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d700000; valaddr_reg:x3; val_offset:93072*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93072*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31025:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d780000; valaddr_reg:x3; val_offset:93075*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93075*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31026:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d7c0000; valaddr_reg:x3; val_offset:93078*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93078*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31027:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d7e0000; valaddr_reg:x3; val_offset:93081*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93081*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31028:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d7f0000; valaddr_reg:x3; val_offset:93084*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93084*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31029:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d7f8000; valaddr_reg:x3; val_offset:93087*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93087*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31030:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d7fc000; valaddr_reg:x3; val_offset:93090*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93090*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31031:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d7fe000; valaddr_reg:x3; val_offset:93093*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93093*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31032:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d7ff000; valaddr_reg:x3; val_offset:93096*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93096*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31033:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d7ff800; valaddr_reg:x3; val_offset:93099*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93099*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31034:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d7ffc00; valaddr_reg:x3; val_offset:93102*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93102*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31035:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d7ffe00; valaddr_reg:x3; val_offset:93105*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93105*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31036:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d7fff00; valaddr_reg:x3; val_offset:93108*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93108*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31037:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d7fff80; valaddr_reg:x3; val_offset:93111*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93111*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31038:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d7fffc0; valaddr_reg:x3; val_offset:93114*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93114*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31039:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d7fffe0; valaddr_reg:x3; val_offset:93117*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93117*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31040:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d7ffff0; valaddr_reg:x3; val_offset:93120*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93120*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31041:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d7ffff8; valaddr_reg:x3; val_offset:93123*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93123*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31042:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d7ffffc; valaddr_reg:x3; val_offset:93126*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93126*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31043:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d7ffffe; valaddr_reg:x3; val_offset:93129*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93129*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31044:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ae6b6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34e2a4 and fs3 == 0 and fe3 == 0x9a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ae6b6; op2val:0x34e2a4;
op3val:0x4d7fffff; valaddr_reg:x3; val_offset:93132*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93132*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31045:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x3f800001; valaddr_reg:x3; val_offset:93135*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93135*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31046:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x3f800003; valaddr_reg:x3; val_offset:93138*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93138*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31047:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x3f800007; valaddr_reg:x3; val_offset:93141*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93141*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31048:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x3f999999; valaddr_reg:x3; val_offset:93144*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93144*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31049:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:93147*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93147*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31050:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:93150*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93150*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31051:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:93153*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93153*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31052:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:93156*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93156*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31053:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:93159*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93159*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31054:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:93162*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93162*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31055:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:93165*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93165*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31056:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:93168*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93168*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31057:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:93171*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93171*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31058:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:93174*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93174*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31059:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:93177*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93177*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31060:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:93180*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93180*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31061:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f000000; valaddr_reg:x3; val_offset:93183*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93183*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31062:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f000001; valaddr_reg:x3; val_offset:93186*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93186*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31063:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f000003; valaddr_reg:x3; val_offset:93189*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93189*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31064:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f000007; valaddr_reg:x3; val_offset:93192*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93192*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31065:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f00000f; valaddr_reg:x3; val_offset:93195*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93195*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31066:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f00001f; valaddr_reg:x3; val_offset:93198*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93198*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31067:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f00003f; valaddr_reg:x3; val_offset:93201*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93201*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31068:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f00007f; valaddr_reg:x3; val_offset:93204*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93204*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31069:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f0000ff; valaddr_reg:x3; val_offset:93207*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93207*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31070:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f0001ff; valaddr_reg:x3; val_offset:93210*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93210*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31071:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f0003ff; valaddr_reg:x3; val_offset:93213*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93213*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31072:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f0007ff; valaddr_reg:x3; val_offset:93216*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93216*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31073:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f000fff; valaddr_reg:x3; val_offset:93219*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93219*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31074:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f001fff; valaddr_reg:x3; val_offset:93222*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93222*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31075:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f003fff; valaddr_reg:x3; val_offset:93225*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93225*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31076:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f007fff; valaddr_reg:x3; val_offset:93228*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93228*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31077:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f00ffff; valaddr_reg:x3; val_offset:93231*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93231*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31078:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f01ffff; valaddr_reg:x3; val_offset:93234*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93234*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31079:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f03ffff; valaddr_reg:x3; val_offset:93237*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93237*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31080:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f07ffff; valaddr_reg:x3; val_offset:93240*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93240*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31081:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f0fffff; valaddr_reg:x3; val_offset:93243*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93243*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31082:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f1fffff; valaddr_reg:x3; val_offset:93246*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93246*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31083:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f3fffff; valaddr_reg:x3; val_offset:93249*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93249*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31084:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f400000; valaddr_reg:x3; val_offset:93252*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93252*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31085:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f600000; valaddr_reg:x3; val_offset:93255*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93255*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31086:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f700000; valaddr_reg:x3; val_offset:93258*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93258*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31087:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f780000; valaddr_reg:x3; val_offset:93261*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93261*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31088:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f7c0000; valaddr_reg:x3; val_offset:93264*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93264*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31089:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f7e0000; valaddr_reg:x3; val_offset:93267*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93267*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31090:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f7f0000; valaddr_reg:x3; val_offset:93270*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93270*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31091:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f7f8000; valaddr_reg:x3; val_offset:93273*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93273*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31092:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f7fc000; valaddr_reg:x3; val_offset:93276*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93276*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31093:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f7fe000; valaddr_reg:x3; val_offset:93279*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93279*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31094:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f7ff000; valaddr_reg:x3; val_offset:93282*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93282*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31095:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f7ff800; valaddr_reg:x3; val_offset:93285*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93285*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31096:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f7ffc00; valaddr_reg:x3; val_offset:93288*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93288*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31097:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f7ffe00; valaddr_reg:x3; val_offset:93291*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93291*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31098:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f7fff00; valaddr_reg:x3; val_offset:93294*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93294*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31099:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f7fff80; valaddr_reg:x3; val_offset:93297*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93297*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f7fffc0; valaddr_reg:x3; val_offset:93300*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93300*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f7fffe0; valaddr_reg:x3; val_offset:93303*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93303*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f7ffff0; valaddr_reg:x3; val_offset:93306*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93306*0 + 3*242*FLEN/8, x4, x1, x2)

inst_31103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f7ffff8; valaddr_reg:x3; val_offset:93309*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93309*0 + 3*242*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2132468210,32,FLEN)
NAN_BOXED(3218313489,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1291845632,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1291845633,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1291845635,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1291845639,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1291845647,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1291845663,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1291845695,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1291845759,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1291845887,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1291846143,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1291846655,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1291847679,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1291849727,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1291853823,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1291862015,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1291878399,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1291911167,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1291976703,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1292107775,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1292369919,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1292894207,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1293942783,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1296039935,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1296039936,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1298137088,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1299185664,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1299709952,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1299972096,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1300103168,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1300168704,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1300201472,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1300217856,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1300226048,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1300230144,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1300232192,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1300233216,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1300233728,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1300233984,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1300234112,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1300234176,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1300234208,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1300234224,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1300234232,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1300234236,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1300234238,32,FLEN)
NAN_BOXED(2132469430,32,FLEN)
NAN_BOXED(3465892,32,FLEN)
NAN_BOXED(1300234239,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1325400064,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1325400065,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1325400067,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1325400071,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1325400079,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1325400095,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1325400127,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1325400191,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1325400319,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1325400575,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1325401087,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1325402111,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1325404159,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1325408255,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1325416447,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1325432831,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1325465599,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1325531135,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1325662207,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1325924351,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1326448639,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1327497215,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1329594367,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1329594368,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1331691520,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1332740096,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1333264384,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1333526528,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1333657600,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1333723136,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1333755904,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1333772288,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1333780480,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1333784576,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1333786624,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1333787648,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1333788160,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1333788416,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1333788544,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1333788608,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1333788640,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1333788656,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1333788664,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
