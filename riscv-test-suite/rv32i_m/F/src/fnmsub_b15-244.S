
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_31104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f7ffffc; valaddr_reg:x3; val_offset:93312*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93312*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f7ffffe; valaddr_reg:x3; val_offset:93315*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93315*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1afcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x34db1b and fs3 == 0 and fe3 == 0x9e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1afcca; op2val:0x34db1b;
op3val:0x4f7fffff; valaddr_reg:x3; val_offset:93318*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93318*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5e800000; valaddr_reg:x3; val_offset:93321*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93321*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5e800001; valaddr_reg:x3; val_offset:93324*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93324*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5e800003; valaddr_reg:x3; val_offset:93327*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93327*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5e800007; valaddr_reg:x3; val_offset:93330*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93330*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5e80000f; valaddr_reg:x3; val_offset:93333*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93333*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5e80001f; valaddr_reg:x3; val_offset:93336*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93336*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5e80003f; valaddr_reg:x3; val_offset:93339*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93339*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5e80007f; valaddr_reg:x3; val_offset:93342*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93342*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5e8000ff; valaddr_reg:x3; val_offset:93345*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93345*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5e8001ff; valaddr_reg:x3; val_offset:93348*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93348*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5e8003ff; valaddr_reg:x3; val_offset:93351*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93351*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5e8007ff; valaddr_reg:x3; val_offset:93354*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93354*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5e800fff; valaddr_reg:x3; val_offset:93357*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93357*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5e801fff; valaddr_reg:x3; val_offset:93360*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93360*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5e803fff; valaddr_reg:x3; val_offset:93363*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93363*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5e807fff; valaddr_reg:x3; val_offset:93366*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93366*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5e80ffff; valaddr_reg:x3; val_offset:93369*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93369*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5e81ffff; valaddr_reg:x3; val_offset:93372*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93372*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5e83ffff; valaddr_reg:x3; val_offset:93375*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93375*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5e87ffff; valaddr_reg:x3; val_offset:93378*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93378*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5e8fffff; valaddr_reg:x3; val_offset:93381*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93381*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5e9fffff; valaddr_reg:x3; val_offset:93384*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93384*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5ebfffff; valaddr_reg:x3; val_offset:93387*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93387*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5ec00000; valaddr_reg:x3; val_offset:93390*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93390*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5ee00000; valaddr_reg:x3; val_offset:93393*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93393*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5ef00000; valaddr_reg:x3; val_offset:93396*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93396*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5ef80000; valaddr_reg:x3; val_offset:93399*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93399*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5efc0000; valaddr_reg:x3; val_offset:93402*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93402*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5efe0000; valaddr_reg:x3; val_offset:93405*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93405*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5eff0000; valaddr_reg:x3; val_offset:93408*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93408*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5eff8000; valaddr_reg:x3; val_offset:93411*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93411*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5effc000; valaddr_reg:x3; val_offset:93414*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93414*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5effe000; valaddr_reg:x3; val_offset:93417*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93417*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5efff000; valaddr_reg:x3; val_offset:93420*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93420*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5efff800; valaddr_reg:x3; val_offset:93423*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93423*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5efffc00; valaddr_reg:x3; val_offset:93426*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93426*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5efffe00; valaddr_reg:x3; val_offset:93429*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93429*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5effff00; valaddr_reg:x3; val_offset:93432*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93432*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5effff80; valaddr_reg:x3; val_offset:93435*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93435*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5effffc0; valaddr_reg:x3; val_offset:93438*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93438*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5effffe0; valaddr_reg:x3; val_offset:93441*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93441*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5efffff0; valaddr_reg:x3; val_offset:93444*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93444*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5efffff8; valaddr_reg:x3; val_offset:93447*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93447*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5efffffc; valaddr_reg:x3; val_offset:93450*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93450*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5efffffe; valaddr_reg:x3; val_offset:93453*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93453*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xbd and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x5effffff; valaddr_reg:x3; val_offset:93456*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93456*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x7f000001; valaddr_reg:x3; val_offset:93459*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93459*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x7f000003; valaddr_reg:x3; val_offset:93462*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93462*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x7f000007; valaddr_reg:x3; val_offset:93465*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93465*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x7f199999; valaddr_reg:x3; val_offset:93468*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93468*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x7f249249; valaddr_reg:x3; val_offset:93471*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93471*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x7f333333; valaddr_reg:x3; val_offset:93474*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93474*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:93477*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93477*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:93480*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93480*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x7f444444; valaddr_reg:x3; val_offset:93483*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93483*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:93486*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93486*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:93489*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93489*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x7f666666; valaddr_reg:x3; val_offset:93492*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93492*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:93495*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93495*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31166:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:93498*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93498*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:93501*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93501*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b5ba0 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x52eb5e and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b5ba0; op2val:0x3fd2eb5e;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:93504*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93504*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xac800000; valaddr_reg:x3; val_offset:93507*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93507*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xac800001; valaddr_reg:x3; val_offset:93510*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93510*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xac800003; valaddr_reg:x3; val_offset:93513*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93513*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xac800007; valaddr_reg:x3; val_offset:93516*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93516*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xac80000f; valaddr_reg:x3; val_offset:93519*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93519*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xac80001f; valaddr_reg:x3; val_offset:93522*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93522*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xac80003f; valaddr_reg:x3; val_offset:93525*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93525*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xac80007f; valaddr_reg:x3; val_offset:93528*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93528*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xac8000ff; valaddr_reg:x3; val_offset:93531*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93531*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xac8001ff; valaddr_reg:x3; val_offset:93534*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93534*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xac8003ff; valaddr_reg:x3; val_offset:93537*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93537*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xac8007ff; valaddr_reg:x3; val_offset:93540*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93540*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xac800fff; valaddr_reg:x3; val_offset:93543*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93543*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xac801fff; valaddr_reg:x3; val_offset:93546*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93546*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xac803fff; valaddr_reg:x3; val_offset:93549*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93549*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31184:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xac807fff; valaddr_reg:x3; val_offset:93552*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93552*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31185:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xac80ffff; valaddr_reg:x3; val_offset:93555*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93555*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31186:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xac81ffff; valaddr_reg:x3; val_offset:93558*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93558*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31187:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xac83ffff; valaddr_reg:x3; val_offset:93561*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93561*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xac87ffff; valaddr_reg:x3; val_offset:93564*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93564*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xac8fffff; valaddr_reg:x3; val_offset:93567*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93567*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xac9fffff; valaddr_reg:x3; val_offset:93570*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93570*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xacbfffff; valaddr_reg:x3; val_offset:93573*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93573*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31192:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xacc00000; valaddr_reg:x3; val_offset:93576*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93576*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31193:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xace00000; valaddr_reg:x3; val_offset:93579*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93579*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31194:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xacf00000; valaddr_reg:x3; val_offset:93582*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93582*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31195:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xacf80000; valaddr_reg:x3; val_offset:93585*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93585*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31196:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xacfc0000; valaddr_reg:x3; val_offset:93588*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93588*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xacfe0000; valaddr_reg:x3; val_offset:93591*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93591*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xacff0000; valaddr_reg:x3; val_offset:93594*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93594*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31199:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xacff8000; valaddr_reg:x3; val_offset:93597*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93597*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31200:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xacffc000; valaddr_reg:x3; val_offset:93600*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93600*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31201:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xacffe000; valaddr_reg:x3; val_offset:93603*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93603*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31202:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xacfff000; valaddr_reg:x3; val_offset:93606*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93606*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31203:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xacfff800; valaddr_reg:x3; val_offset:93609*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93609*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31204:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xacfffc00; valaddr_reg:x3; val_offset:93612*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93612*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31205:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xacfffe00; valaddr_reg:x3; val_offset:93615*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93615*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31206:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xacffff00; valaddr_reg:x3; val_offset:93618*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93618*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31207:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xacffff80; valaddr_reg:x3; val_offset:93621*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93621*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31208:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xacffffc0; valaddr_reg:x3; val_offset:93624*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93624*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31209:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xacffffe0; valaddr_reg:x3; val_offset:93627*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93627*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31210:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xacfffff0; valaddr_reg:x3; val_offset:93630*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93630*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31211:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xacfffff8; valaddr_reg:x3; val_offset:93633*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93633*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31212:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xacfffffc; valaddr_reg:x3; val_offset:93636*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93636*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31213:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xacfffffe; valaddr_reg:x3; val_offset:93639*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93639*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31214:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x59 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xacffffff; valaddr_reg:x3; val_offset:93642*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93642*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31215:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xbf800001; valaddr_reg:x3; val_offset:93645*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93645*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31216:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xbf800003; valaddr_reg:x3; val_offset:93648*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93648*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31217:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xbf800007; valaddr_reg:x3; val_offset:93651*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93651*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31218:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xbf999999; valaddr_reg:x3; val_offset:93654*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93654*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31219:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:93657*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93657*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31220:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:93660*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93660*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31221:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:93663*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93663*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31222:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:93666*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93666*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31223:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:93669*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93669*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31224:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:93672*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93672*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31225:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:93675*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93675*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31226:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:93678*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93678*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31227:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:93681*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93681*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31228:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:93684*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93684*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31229:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:93687*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93687*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8e8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x34a994 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8e8c; op2val:0x8034a994;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:93690*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93690*0 + 3*243*FLEN/8, x4, x1, x2)

inst_31231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:93693*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93693*0 + 3*243*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1333788668,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1333788670,32,FLEN)
NAN_BOXED(2132475082,32,FLEN)
NAN_BOXED(3463963,32,FLEN)
NAN_BOXED(1333788671,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1585446912,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1585446913,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1585446915,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1585446919,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1585446927,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1585446943,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1585446975,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1585447039,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1585447167,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1585447423,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1585447935,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1585448959,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1585451007,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1585455103,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1585463295,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1585479679,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1585512447,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1585577983,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1585709055,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1585971199,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1586495487,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1587544063,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1589641215,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1589641216,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1591738368,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1592786944,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1593311232,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1593573376,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1593704448,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1593769984,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1593802752,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1593819136,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1593827328,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1593831424,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1593833472,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1593834496,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1593835008,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1593835264,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1593835392,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1593835456,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1593835488,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1593835504,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1593835512,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1593835516,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1593835518,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(1593835519,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2132499360,32,FLEN)
NAN_BOXED(1070787422,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2894069760,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2894069761,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2894069763,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2894069767,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2894069775,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2894069791,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2894069823,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2894069887,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2894070015,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2894070271,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2894070783,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2894071807,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2894073855,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2894077951,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2894086143,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2894102527,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2894135295,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2894200831,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2894331903,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2894594047,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2895118335,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2896166911,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2898264063,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2898264064,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2900361216,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2901409792,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2901934080,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2902196224,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2902327296,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2902392832,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2902425600,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2902441984,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2902450176,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2902454272,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2902456320,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2902457344,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2902457856,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2902458112,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2902458240,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2902458304,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2902458336,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2902458352,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2902458360,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2902458364,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2902458366,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(2902458367,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2132512396,32,FLEN)
NAN_BOXED(2150934932,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
