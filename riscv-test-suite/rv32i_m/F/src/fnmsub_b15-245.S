
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_31232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:93696*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93696*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:93699*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93699*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:93702*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93702*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:93705*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93705*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:93708*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93708*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:93711*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93711*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:93714*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93714*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:93717*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93717*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:93720*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93720*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:93723*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93723*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:93726*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93726*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:93729*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93729*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:93732*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93732*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31245:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:93735*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93735*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:93738*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93738*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xc800000; valaddr_reg:x3; val_offset:93741*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93741*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xc800001; valaddr_reg:x3; val_offset:93744*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93744*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xc800003; valaddr_reg:x3; val_offset:93747*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93747*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xc800007; valaddr_reg:x3; val_offset:93750*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93750*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xc80000f; valaddr_reg:x3; val_offset:93753*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93753*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xc80001f; valaddr_reg:x3; val_offset:93756*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93756*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xc80003f; valaddr_reg:x3; val_offset:93759*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93759*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xc80007f; valaddr_reg:x3; val_offset:93762*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93762*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xc8000ff; valaddr_reg:x3; val_offset:93765*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93765*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31256:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xc8001ff; valaddr_reg:x3; val_offset:93768*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93768*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31257:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xc8003ff; valaddr_reg:x3; val_offset:93771*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93771*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31258:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xc8007ff; valaddr_reg:x3; val_offset:93774*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93774*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31259:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xc800fff; valaddr_reg:x3; val_offset:93777*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93777*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31260:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xc801fff; valaddr_reg:x3; val_offset:93780*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93780*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31261:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xc803fff; valaddr_reg:x3; val_offset:93783*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93783*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31262:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xc807fff; valaddr_reg:x3; val_offset:93786*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93786*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31263:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xc80ffff; valaddr_reg:x3; val_offset:93789*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93789*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31264:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xc81ffff; valaddr_reg:x3; val_offset:93792*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93792*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31265:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xc83ffff; valaddr_reg:x3; val_offset:93795*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93795*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31266:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xc87ffff; valaddr_reg:x3; val_offset:93798*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93798*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31267:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xc8fffff; valaddr_reg:x3; val_offset:93801*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93801*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31268:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xc9fffff; valaddr_reg:x3; val_offset:93804*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93804*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31269:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xcbfffff; valaddr_reg:x3; val_offset:93807*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93807*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31270:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xcc00000; valaddr_reg:x3; val_offset:93810*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93810*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31271:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xce00000; valaddr_reg:x3; val_offset:93813*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93813*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31272:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xcf00000; valaddr_reg:x3; val_offset:93816*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93816*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31273:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xcf80000; valaddr_reg:x3; val_offset:93819*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93819*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31274:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xcfc0000; valaddr_reg:x3; val_offset:93822*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93822*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31275:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xcfe0000; valaddr_reg:x3; val_offset:93825*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93825*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31276:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xcff0000; valaddr_reg:x3; val_offset:93828*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93828*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31277:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xcff8000; valaddr_reg:x3; val_offset:93831*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93831*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31278:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xcffc000; valaddr_reg:x3; val_offset:93834*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93834*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31279:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xcffe000; valaddr_reg:x3; val_offset:93837*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93837*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31280:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xcfff000; valaddr_reg:x3; val_offset:93840*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93840*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31281:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xcfff800; valaddr_reg:x3; val_offset:93843*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93843*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31282:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xcfffc00; valaddr_reg:x3; val_offset:93846*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93846*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31283:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xcfffe00; valaddr_reg:x3; val_offset:93849*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93849*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31284:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xcffff00; valaddr_reg:x3; val_offset:93852*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93852*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31285:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xcffff80; valaddr_reg:x3; val_offset:93855*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93855*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31286:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xcffffc0; valaddr_reg:x3; val_offset:93858*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93858*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31287:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xcffffe0; valaddr_reg:x3; val_offset:93861*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93861*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31288:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xcfffff0; valaddr_reg:x3; val_offset:93864*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93864*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31289:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xcfffff8; valaddr_reg:x3; val_offset:93867*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93867*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31290:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xcfffffc; valaddr_reg:x3; val_offset:93870*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93870*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31291:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xcfffffe; valaddr_reg:x3; val_offset:93873*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93873*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31292:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bd4c8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x19 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bd4c8; op2val:0x0;
op3val:0xcffffff; valaddr_reg:x3; val_offset:93876*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93876*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31293:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76800000; valaddr_reg:x3; val_offset:93879*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93879*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31294:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76800001; valaddr_reg:x3; val_offset:93882*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93882*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31295:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76800003; valaddr_reg:x3; val_offset:93885*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93885*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31296:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76800007; valaddr_reg:x3; val_offset:93888*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93888*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31297:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x7680000f; valaddr_reg:x3; val_offset:93891*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93891*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31298:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x7680001f; valaddr_reg:x3; val_offset:93894*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93894*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31299:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x7680003f; valaddr_reg:x3; val_offset:93897*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93897*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31300:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x7680007f; valaddr_reg:x3; val_offset:93900*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93900*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31301:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x768000ff; valaddr_reg:x3; val_offset:93903*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93903*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31302:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x768001ff; valaddr_reg:x3; val_offset:93906*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93906*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31303:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x768003ff; valaddr_reg:x3; val_offset:93909*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93909*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31304:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x768007ff; valaddr_reg:x3; val_offset:93912*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93912*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31305:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76800fff; valaddr_reg:x3; val_offset:93915*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93915*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31306:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76801fff; valaddr_reg:x3; val_offset:93918*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93918*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31307:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76803fff; valaddr_reg:x3; val_offset:93921*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93921*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31308:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76807fff; valaddr_reg:x3; val_offset:93924*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93924*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31309:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x7680ffff; valaddr_reg:x3; val_offset:93927*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93927*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31310:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x7681ffff; valaddr_reg:x3; val_offset:93930*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93930*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31311:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x7683ffff; valaddr_reg:x3; val_offset:93933*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93933*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31312:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x7687ffff; valaddr_reg:x3; val_offset:93936*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93936*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31313:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x768fffff; valaddr_reg:x3; val_offset:93939*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93939*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31314:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x769fffff; valaddr_reg:x3; val_offset:93942*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93942*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31315:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76bfffff; valaddr_reg:x3; val_offset:93945*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93945*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31316:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76c00000; valaddr_reg:x3; val_offset:93948*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93948*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31317:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76e00000; valaddr_reg:x3; val_offset:93951*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93951*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31318:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76f00000; valaddr_reg:x3; val_offset:93954*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93954*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31319:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76f80000; valaddr_reg:x3; val_offset:93957*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93957*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31320:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76fc0000; valaddr_reg:x3; val_offset:93960*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93960*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31321:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76fe0000; valaddr_reg:x3; val_offset:93963*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93963*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31322:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76ff0000; valaddr_reg:x3; val_offset:93966*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93966*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31323:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76ff8000; valaddr_reg:x3; val_offset:93969*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93969*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31324:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76ffc000; valaddr_reg:x3; val_offset:93972*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93972*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31325:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76ffe000; valaddr_reg:x3; val_offset:93975*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93975*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31326:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76fff000; valaddr_reg:x3; val_offset:93978*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93978*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31327:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76fff800; valaddr_reg:x3; val_offset:93981*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93981*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31328:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76fffc00; valaddr_reg:x3; val_offset:93984*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93984*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31329:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76fffe00; valaddr_reg:x3; val_offset:93987*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93987*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31330:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76ffff00; valaddr_reg:x3; val_offset:93990*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93990*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31331:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76ffff80; valaddr_reg:x3; val_offset:93993*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93993*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31332:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76ffffc0; valaddr_reg:x3; val_offset:93996*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93996*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31333:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76ffffe0; valaddr_reg:x3; val_offset:93999*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 93999*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31334:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76fffff0; valaddr_reg:x3; val_offset:94002*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94002*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31335:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76fffff8; valaddr_reg:x3; val_offset:94005*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94005*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31336:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76fffffc; valaddr_reg:x3; val_offset:94008*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94008*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31337:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76fffffe; valaddr_reg:x3; val_offset:94011*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94011*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31338:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xed and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x76ffffff; valaddr_reg:x3; val_offset:94014*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94014*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31339:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x7f000001; valaddr_reg:x3; val_offset:94017*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94017*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31340:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x7f000003; valaddr_reg:x3; val_offset:94020*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94020*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31341:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x7f000007; valaddr_reg:x3; val_offset:94023*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94023*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31342:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x7f199999; valaddr_reg:x3; val_offset:94026*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94026*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31343:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x7f249249; valaddr_reg:x3; val_offset:94029*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94029*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31344:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x7f333333; valaddr_reg:x3; val_offset:94032*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94032*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31345:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:94035*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94035*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31346:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:94038*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94038*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31347:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x7f444444; valaddr_reg:x3; val_offset:94041*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94041*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31348:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:94044*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94044*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31349:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:94047*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94047*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31350:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x7f666666; valaddr_reg:x3; val_offset:94050*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94050*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31351:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:94053*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94053*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31352:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:94056*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94056*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31353:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:94059*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94059*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31354:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c0af2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x51fe63 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c0af2; op2val:0x3fd1fe63;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:94062*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94062*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31355:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6c800000; valaddr_reg:x3; val_offset:94065*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94065*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31356:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6c800001; valaddr_reg:x3; val_offset:94068*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94068*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31357:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6c800003; valaddr_reg:x3; val_offset:94071*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94071*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31358:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6c800007; valaddr_reg:x3; val_offset:94074*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94074*0 + 3*244*FLEN/8, x4, x1, x2)

inst_31359:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6c80000f; valaddr_reg:x3; val_offset:94077*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94077*0 + 3*244*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715200,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715201,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715203,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715207,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715215,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715231,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715263,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715327,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715455,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715711,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209716223,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209717247,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209719295,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209723391,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209731583,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209747967,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209780735,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209846271,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209977343,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(210239487,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(210763775,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(211812351,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(213909503,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(213909504,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(216006656,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217055232,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217579520,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217841664,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(217972736,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218038272,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218071040,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218087424,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218095616,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218099712,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218101760,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218102784,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103296,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103552,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103680,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103744,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103776,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103792,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103800,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103804,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103806,32,FLEN)
NAN_BOXED(2132530376,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(218103807,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1988100096,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1988100097,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1988100099,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1988100103,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1988100111,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1988100127,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1988100159,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1988100223,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1988100351,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1988100607,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1988101119,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1988102143,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1988104191,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1988108287,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1988116479,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1988132863,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1988165631,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1988231167,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1988362239,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1988624383,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1989148671,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1990197247,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1992294399,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1992294400,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1994391552,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1995440128,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1995964416,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1996226560,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1996357632,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1996423168,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1996455936,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1996472320,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1996480512,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1996484608,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1996486656,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1996487680,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1996488192,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1996488448,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1996488576,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1996488640,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1996488672,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1996488688,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1996488696,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1996488700,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1996488702,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(1996488703,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2132544242,32,FLEN)
NAN_BOXED(1070726755,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1820327936,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1820327937,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1820327939,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1820327943,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1820327951,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
