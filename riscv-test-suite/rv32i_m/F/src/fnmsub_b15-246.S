
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_31360:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6c80001f; valaddr_reg:x3; val_offset:94080*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94080*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31361:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6c80003f; valaddr_reg:x3; val_offset:94083*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94083*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31362:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6c80007f; valaddr_reg:x3; val_offset:94086*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94086*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31363:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6c8000ff; valaddr_reg:x3; val_offset:94089*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94089*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31364:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6c8001ff; valaddr_reg:x3; val_offset:94092*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94092*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31365:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6c8003ff; valaddr_reg:x3; val_offset:94095*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94095*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31366:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6c8007ff; valaddr_reg:x3; val_offset:94098*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94098*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31367:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6c800fff; valaddr_reg:x3; val_offset:94101*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94101*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31368:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6c801fff; valaddr_reg:x3; val_offset:94104*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94104*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31369:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6c803fff; valaddr_reg:x3; val_offset:94107*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94107*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31370:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6c807fff; valaddr_reg:x3; val_offset:94110*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94110*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31371:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6c80ffff; valaddr_reg:x3; val_offset:94113*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94113*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31372:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6c81ffff; valaddr_reg:x3; val_offset:94116*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94116*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31373:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6c83ffff; valaddr_reg:x3; val_offset:94119*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94119*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31374:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6c87ffff; valaddr_reg:x3; val_offset:94122*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94122*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31375:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6c8fffff; valaddr_reg:x3; val_offset:94125*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94125*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31376:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6c9fffff; valaddr_reg:x3; val_offset:94128*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94128*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31377:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6cbfffff; valaddr_reg:x3; val_offset:94131*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94131*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31378:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6cc00000; valaddr_reg:x3; val_offset:94134*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94134*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31379:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6ce00000; valaddr_reg:x3; val_offset:94137*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94137*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31380:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6cf00000; valaddr_reg:x3; val_offset:94140*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94140*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31381:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6cf80000; valaddr_reg:x3; val_offset:94143*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94143*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31382:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6cfc0000; valaddr_reg:x3; val_offset:94146*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94146*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31383:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6cfe0000; valaddr_reg:x3; val_offset:94149*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94149*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31384:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6cff0000; valaddr_reg:x3; val_offset:94152*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94152*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31385:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6cff8000; valaddr_reg:x3; val_offset:94155*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94155*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31386:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6cffc000; valaddr_reg:x3; val_offset:94158*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94158*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31387:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6cffe000; valaddr_reg:x3; val_offset:94161*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94161*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31388:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6cfff000; valaddr_reg:x3; val_offset:94164*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94164*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31389:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6cfff800; valaddr_reg:x3; val_offset:94167*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94167*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31390:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6cfffc00; valaddr_reg:x3; val_offset:94170*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94170*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31391:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6cfffe00; valaddr_reg:x3; val_offset:94173*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94173*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31392:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6cffff00; valaddr_reg:x3; val_offset:94176*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94176*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31393:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6cffff80; valaddr_reg:x3; val_offset:94179*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94179*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31394:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6cffffc0; valaddr_reg:x3; val_offset:94182*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94182*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31395:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6cffffe0; valaddr_reg:x3; val_offset:94185*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94185*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31396:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6cfffff0; valaddr_reg:x3; val_offset:94188*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94188*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31397:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6cfffff8; valaddr_reg:x3; val_offset:94191*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94191*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31398:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6cfffffc; valaddr_reg:x3; val_offset:94194*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94194*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31399:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6cfffffe; valaddr_reg:x3; val_offset:94197*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94197*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31400:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xd9 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x6cffffff; valaddr_reg:x3; val_offset:94200*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94200*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31401:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x7f000001; valaddr_reg:x3; val_offset:94203*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94203*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31402:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x7f000003; valaddr_reg:x3; val_offset:94206*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94206*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31403:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x7f000007; valaddr_reg:x3; val_offset:94209*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94209*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31404:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x7f199999; valaddr_reg:x3; val_offset:94212*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94212*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31405:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x7f249249; valaddr_reg:x3; val_offset:94215*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94215*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31406:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x7f333333; valaddr_reg:x3; val_offset:94218*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94218*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31407:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:94221*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94221*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31408:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:94224*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94224*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31409:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x7f444444; valaddr_reg:x3; val_offset:94227*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94227*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31410:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:94230*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94230*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31411:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:94233*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94233*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31412:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x7f666666; valaddr_reg:x3; val_offset:94236*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94236*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31413:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:94239*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94239*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31414:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:94242*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94242*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31415:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:94245*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94245*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31416:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c62df and fs2 == 0 and fe2 == 0x7f and fm2 == 0x518853 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c62df; op2val:0x3fd18853;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:94248*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94248*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31417:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb9000000; valaddr_reg:x3; val_offset:94251*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94251*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31418:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb9000001; valaddr_reg:x3; val_offset:94254*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94254*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31419:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb9000003; valaddr_reg:x3; val_offset:94257*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94257*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31420:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb9000007; valaddr_reg:x3; val_offset:94260*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94260*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31421:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb900000f; valaddr_reg:x3; val_offset:94263*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94263*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31422:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb900001f; valaddr_reg:x3; val_offset:94266*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94266*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31423:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb900003f; valaddr_reg:x3; val_offset:94269*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94269*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31424:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb900007f; valaddr_reg:x3; val_offset:94272*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94272*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31425:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb90000ff; valaddr_reg:x3; val_offset:94275*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94275*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31426:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb90001ff; valaddr_reg:x3; val_offset:94278*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94278*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31427:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb90003ff; valaddr_reg:x3; val_offset:94281*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94281*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31428:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb90007ff; valaddr_reg:x3; val_offset:94284*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94284*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31429:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb9000fff; valaddr_reg:x3; val_offset:94287*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94287*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31430:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb9001fff; valaddr_reg:x3; val_offset:94290*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94290*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31431:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb9003fff; valaddr_reg:x3; val_offset:94293*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94293*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31432:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb9007fff; valaddr_reg:x3; val_offset:94296*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94296*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31433:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb900ffff; valaddr_reg:x3; val_offset:94299*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94299*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31434:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb901ffff; valaddr_reg:x3; val_offset:94302*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94302*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31435:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb903ffff; valaddr_reg:x3; val_offset:94305*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94305*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31436:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb907ffff; valaddr_reg:x3; val_offset:94308*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94308*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31437:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb90fffff; valaddr_reg:x3; val_offset:94311*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94311*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31438:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb91fffff; valaddr_reg:x3; val_offset:94314*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94314*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31439:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb93fffff; valaddr_reg:x3; val_offset:94317*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94317*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb9400000; valaddr_reg:x3; val_offset:94320*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94320*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31441:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb9600000; valaddr_reg:x3; val_offset:94323*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94323*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31442:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb9700000; valaddr_reg:x3; val_offset:94326*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94326*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31443:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb9780000; valaddr_reg:x3; val_offset:94329*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94329*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31444:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb97c0000; valaddr_reg:x3; val_offset:94332*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94332*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31445:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb97e0000; valaddr_reg:x3; val_offset:94335*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94335*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31446:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb97f0000; valaddr_reg:x3; val_offset:94338*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94338*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31447:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb97f8000; valaddr_reg:x3; val_offset:94341*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94341*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31448:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb97fc000; valaddr_reg:x3; val_offset:94344*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94344*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31449:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb97fe000; valaddr_reg:x3; val_offset:94347*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94347*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31450:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb97ff000; valaddr_reg:x3; val_offset:94350*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94350*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31451:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb97ff800; valaddr_reg:x3; val_offset:94353*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94353*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31452:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb97ffc00; valaddr_reg:x3; val_offset:94356*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94356*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31453:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb97ffe00; valaddr_reg:x3; val_offset:94359*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94359*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31454:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb97fff00; valaddr_reg:x3; val_offset:94362*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94362*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb97fff80; valaddr_reg:x3; val_offset:94365*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94365*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31456:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb97fffc0; valaddr_reg:x3; val_offset:94368*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94368*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31457:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb97fffe0; valaddr_reg:x3; val_offset:94371*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94371*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31458:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb97ffff0; valaddr_reg:x3; val_offset:94374*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94374*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31459:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb97ffff8; valaddr_reg:x3; val_offset:94377*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94377*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31460:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb97ffffc; valaddr_reg:x3; val_offset:94380*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94380*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31461:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb97ffffe; valaddr_reg:x3; val_offset:94383*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94383*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31462:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x72 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xb97fffff; valaddr_reg:x3; val_offset:94386*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94386*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31463:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xbf800001; valaddr_reg:x3; val_offset:94389*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94389*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31464:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xbf800003; valaddr_reg:x3; val_offset:94392*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94392*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31465:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xbf800007; valaddr_reg:x3; val_offset:94395*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94395*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31466:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xbf999999; valaddr_reg:x3; val_offset:94398*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94398*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31467:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:94401*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94401*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31468:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:94404*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94404*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31469:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:94407*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94407*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31470:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:94410*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94410*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31471:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:94413*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94413*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31472:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:94416*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94416*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31473:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:94419*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94419*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31474:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:94422*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94422*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31475:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:94425*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94425*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31476:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:94428*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94428*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31477:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:94431*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94431*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31478:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cd3e2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x343c55 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cd3e2; op2val:0x80343c55;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:94434*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94434*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31479:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:94437*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94437*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31480:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:94440*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94440*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31481:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:94443*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94443*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31482:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:94446*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94446*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31483:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:94449*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94449*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31484:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:94452*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94452*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31485:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:94455*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94455*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31486:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:94458*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94458*0 + 3*245*FLEN/8, x4, x1, x2)

inst_31487:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:94461*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94461*0 + 3*245*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1820327967,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1820327999,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1820328063,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1820328191,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1820328447,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1820328959,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1820329983,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1820332031,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1820336127,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1820344319,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1820360703,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1820393471,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1820459007,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1820590079,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1820852223,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1821376511,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1822425087,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1824522239,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1824522240,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1826619392,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1827667968,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1828192256,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1828454400,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1828585472,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1828651008,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1828683776,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1828700160,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1828708352,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1828712448,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1828714496,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1828715520,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1828716032,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1828716288,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1828716416,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1828716480,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1828716512,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1828716528,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1828716536,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1828716540,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1828716542,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(1828716543,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2132566751,32,FLEN)
NAN_BOXED(1070696531,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3103784960,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3103784961,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3103784963,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3103784967,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3103784975,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3103784991,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3103785023,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3103785087,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3103785215,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3103785471,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3103785983,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3103787007,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3103789055,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3103793151,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3103801343,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3103817727,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3103850495,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3103916031,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3104047103,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3104309247,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3104833535,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3105882111,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3107979263,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3107979264,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3110076416,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3111124992,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3111649280,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3111911424,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3112042496,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3112108032,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3112140800,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3112157184,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3112165376,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3112169472,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3112171520,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3112172544,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3112173056,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3112173312,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3112173440,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3112173504,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3112173536,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3112173552,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3112173560,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3112173564,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3112173566,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3112173567,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2132595682,32,FLEN)
NAN_BOXED(2150906965,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
