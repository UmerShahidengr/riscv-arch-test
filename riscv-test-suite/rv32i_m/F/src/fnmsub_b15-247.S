
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_31488:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:94464*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94464*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31489:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:94467*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94467*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31490:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:94470*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94470*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31491:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:94473*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94473*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31492:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:94476*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94476*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31493:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:94479*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94479*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31494:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:94482*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94482*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31495:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe000000; valaddr_reg:x3; val_offset:94485*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94485*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31496:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe000001; valaddr_reg:x3; val_offset:94488*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94488*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31497:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe000003; valaddr_reg:x3; val_offset:94491*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94491*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31498:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe000007; valaddr_reg:x3; val_offset:94494*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94494*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31499:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe00000f; valaddr_reg:x3; val_offset:94497*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94497*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31500:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe00001f; valaddr_reg:x3; val_offset:94500*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94500*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31501:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe00003f; valaddr_reg:x3; val_offset:94503*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94503*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31502:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe00007f; valaddr_reg:x3; val_offset:94506*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94506*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31503:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe0000ff; valaddr_reg:x3; val_offset:94509*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94509*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31504:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe0001ff; valaddr_reg:x3; val_offset:94512*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94512*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31505:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe0003ff; valaddr_reg:x3; val_offset:94515*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94515*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31506:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe0007ff; valaddr_reg:x3; val_offset:94518*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94518*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31507:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe000fff; valaddr_reg:x3; val_offset:94521*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94521*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31508:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe001fff; valaddr_reg:x3; val_offset:94524*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94524*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31509:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe003fff; valaddr_reg:x3; val_offset:94527*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94527*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31510:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe007fff; valaddr_reg:x3; val_offset:94530*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94530*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31511:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe00ffff; valaddr_reg:x3; val_offset:94533*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94533*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31512:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe01ffff; valaddr_reg:x3; val_offset:94536*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94536*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31513:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe03ffff; valaddr_reg:x3; val_offset:94539*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94539*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31514:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe07ffff; valaddr_reg:x3; val_offset:94542*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94542*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31515:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe0fffff; valaddr_reg:x3; val_offset:94545*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94545*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31516:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe1fffff; valaddr_reg:x3; val_offset:94548*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94548*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31517:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe3fffff; valaddr_reg:x3; val_offset:94551*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94551*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31518:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe400000; valaddr_reg:x3; val_offset:94554*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94554*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31519:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe600000; valaddr_reg:x3; val_offset:94557*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94557*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31520:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe700000; valaddr_reg:x3; val_offset:94560*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94560*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31521:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe780000; valaddr_reg:x3; val_offset:94563*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94563*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31522:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe7c0000; valaddr_reg:x3; val_offset:94566*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94566*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31523:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe7e0000; valaddr_reg:x3; val_offset:94569*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94569*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31524:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe7f0000; valaddr_reg:x3; val_offset:94572*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94572*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31525:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe7f8000; valaddr_reg:x3; val_offset:94575*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94575*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31526:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe7fc000; valaddr_reg:x3; val_offset:94578*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94578*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31527:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe7fe000; valaddr_reg:x3; val_offset:94581*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94581*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31528:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe7ff000; valaddr_reg:x3; val_offset:94584*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94584*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31529:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe7ff800; valaddr_reg:x3; val_offset:94587*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94587*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31530:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe7ffc00; valaddr_reg:x3; val_offset:94590*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94590*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31531:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe7ffe00; valaddr_reg:x3; val_offset:94593*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94593*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31532:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe7fff00; valaddr_reg:x3; val_offset:94596*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94596*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31533:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe7fff80; valaddr_reg:x3; val_offset:94599*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94599*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31534:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe7fffc0; valaddr_reg:x3; val_offset:94602*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94602*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31535:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe7fffe0; valaddr_reg:x3; val_offset:94605*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94605*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31536:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe7ffff0; valaddr_reg:x3; val_offset:94608*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94608*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31537:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe7ffff8; valaddr_reg:x3; val_offset:94611*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94611*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31538:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe7ffffc; valaddr_reg:x3; val_offset:94614*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94614*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31539:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe7ffffe; valaddr_reg:x3; val_offset:94617*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94617*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31540:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1cee66 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1cee66; op2val:0x0;
op3val:0xe7fffff; valaddr_reg:x3; val_offset:94620*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94620*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31541:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:94623*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94623*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31542:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:94626*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94626*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31543:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:94629*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94629*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31544:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:94632*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94632*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31545:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:94635*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94635*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31546:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:94638*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94638*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31547:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:94641*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94641*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31548:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:94644*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94644*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31549:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:94647*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94647*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31550:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:94650*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94650*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31551:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:94653*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94653*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31552:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:94656*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94656*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31553:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:94659*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94659*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31554:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:94662*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94662*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31555:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:94665*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94665*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31556:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:94668*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94668*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31557:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x83000000; valaddr_reg:x3; val_offset:94671*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94671*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31558:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x83000001; valaddr_reg:x3; val_offset:94674*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94674*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31559:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x83000003; valaddr_reg:x3; val_offset:94677*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94677*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31560:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x83000007; valaddr_reg:x3; val_offset:94680*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94680*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31561:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x8300000f; valaddr_reg:x3; val_offset:94683*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94683*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31562:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x8300001f; valaddr_reg:x3; val_offset:94686*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94686*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31563:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x8300003f; valaddr_reg:x3; val_offset:94689*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94689*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31564:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x8300007f; valaddr_reg:x3; val_offset:94692*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94692*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31565:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x830000ff; valaddr_reg:x3; val_offset:94695*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94695*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31566:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x830001ff; valaddr_reg:x3; val_offset:94698*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94698*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31567:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x830003ff; valaddr_reg:x3; val_offset:94701*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94701*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31568:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x830007ff; valaddr_reg:x3; val_offset:94704*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94704*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31569:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x83000fff; valaddr_reg:x3; val_offset:94707*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94707*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31570:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x83001fff; valaddr_reg:x3; val_offset:94710*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94710*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31571:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x83003fff; valaddr_reg:x3; val_offset:94713*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94713*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31572:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x83007fff; valaddr_reg:x3; val_offset:94716*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94716*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31573:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x8300ffff; valaddr_reg:x3; val_offset:94719*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94719*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31574:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x8301ffff; valaddr_reg:x3; val_offset:94722*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94722*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31575:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x8303ffff; valaddr_reg:x3; val_offset:94725*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94725*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31576:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x8307ffff; valaddr_reg:x3; val_offset:94728*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94728*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31577:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x830fffff; valaddr_reg:x3; val_offset:94731*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94731*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31578:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x831fffff; valaddr_reg:x3; val_offset:94734*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94734*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31579:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x833fffff; valaddr_reg:x3; val_offset:94737*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94737*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31580:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x83400000; valaddr_reg:x3; val_offset:94740*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94740*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31581:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x83600000; valaddr_reg:x3; val_offset:94743*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94743*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31582:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x83700000; valaddr_reg:x3; val_offset:94746*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94746*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31583:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x83780000; valaddr_reg:x3; val_offset:94749*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94749*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31584:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x837c0000; valaddr_reg:x3; val_offset:94752*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94752*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31585:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x837e0000; valaddr_reg:x3; val_offset:94755*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94755*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31586:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x837f0000; valaddr_reg:x3; val_offset:94758*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94758*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31587:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x837f8000; valaddr_reg:x3; val_offset:94761*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94761*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31588:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x837fc000; valaddr_reg:x3; val_offset:94764*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94764*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31589:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x837fe000; valaddr_reg:x3; val_offset:94767*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94767*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31590:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x837ff000; valaddr_reg:x3; val_offset:94770*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94770*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31591:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x837ff800; valaddr_reg:x3; val_offset:94773*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94773*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31592:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x837ffc00; valaddr_reg:x3; val_offset:94776*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94776*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31593:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x837ffe00; valaddr_reg:x3; val_offset:94779*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94779*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31594:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x837fff00; valaddr_reg:x3; val_offset:94782*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94782*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31595:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x837fff80; valaddr_reg:x3; val_offset:94785*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94785*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31596:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x837fffc0; valaddr_reg:x3; val_offset:94788*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94788*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31597:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x837fffe0; valaddr_reg:x3; val_offset:94791*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94791*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31598:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x837ffff0; valaddr_reg:x3; val_offset:94794*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94794*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31599:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x837ffff8; valaddr_reg:x3; val_offset:94797*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94797*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31600:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x837ffffc; valaddr_reg:x3; val_offset:94800*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94800*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31601:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x837ffffe; valaddr_reg:x3; val_offset:94803*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94803*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31602:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1dc006 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1dc006; op2val:0x80000000;
op3val:0x837fffff; valaddr_reg:x3; val_offset:94806*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94806*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31603:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e1c9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33cfbb and fs3 == 1 and fe3 == 0x77 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e1c9c; op2val:0x8033cfbb;
op3val:0xbb800000; valaddr_reg:x3; val_offset:94809*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94809*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31604:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e1c9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33cfbb and fs3 == 1 and fe3 == 0x77 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e1c9c; op2val:0x8033cfbb;
op3val:0xbb800001; valaddr_reg:x3; val_offset:94812*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94812*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31605:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e1c9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33cfbb and fs3 == 1 and fe3 == 0x77 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e1c9c; op2val:0x8033cfbb;
op3val:0xbb800003; valaddr_reg:x3; val_offset:94815*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94815*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31606:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e1c9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33cfbb and fs3 == 1 and fe3 == 0x77 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e1c9c; op2val:0x8033cfbb;
op3val:0xbb800007; valaddr_reg:x3; val_offset:94818*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94818*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31607:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e1c9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33cfbb and fs3 == 1 and fe3 == 0x77 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e1c9c; op2val:0x8033cfbb;
op3val:0xbb80000f; valaddr_reg:x3; val_offset:94821*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94821*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31608:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e1c9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33cfbb and fs3 == 1 and fe3 == 0x77 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e1c9c; op2val:0x8033cfbb;
op3val:0xbb80001f; valaddr_reg:x3; val_offset:94824*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94824*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31609:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e1c9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33cfbb and fs3 == 1 and fe3 == 0x77 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e1c9c; op2val:0x8033cfbb;
op3val:0xbb80003f; valaddr_reg:x3; val_offset:94827*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94827*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31610:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e1c9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33cfbb and fs3 == 1 and fe3 == 0x77 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e1c9c; op2val:0x8033cfbb;
op3val:0xbb80007f; valaddr_reg:x3; val_offset:94830*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94830*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31611:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e1c9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33cfbb and fs3 == 1 and fe3 == 0x77 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e1c9c; op2val:0x8033cfbb;
op3val:0xbb8000ff; valaddr_reg:x3; val_offset:94833*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94833*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31612:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e1c9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33cfbb and fs3 == 1 and fe3 == 0x77 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e1c9c; op2val:0x8033cfbb;
op3val:0xbb8001ff; valaddr_reg:x3; val_offset:94836*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94836*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31613:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e1c9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33cfbb and fs3 == 1 and fe3 == 0x77 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e1c9c; op2val:0x8033cfbb;
op3val:0xbb8003ff; valaddr_reg:x3; val_offset:94839*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94839*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31614:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e1c9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33cfbb and fs3 == 1 and fe3 == 0x77 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e1c9c; op2val:0x8033cfbb;
op3val:0xbb8007ff; valaddr_reg:x3; val_offset:94842*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94842*0 + 3*246*FLEN/8, x4, x1, x2)

inst_31615:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1e1c9c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x33cfbb and fs3 == 1 and fe3 == 0x77 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1e1c9c; op2val:0x8033cfbb;
op3val:0xbb800fff; valaddr_reg:x3; val_offset:94845*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 94845*0 + 3*246*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881024,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881025,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881027,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881031,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881039,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881055,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881087,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881151,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881279,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881535,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234882047,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234883071,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234885119,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234889215,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234897407,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234913791,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234946559,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(235012095,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(235143167,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(235405311,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(235929599,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(236978175,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(239075327,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(239075328,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(241172480,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(242221056,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(242745344,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243007488,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243138560,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243204096,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243236864,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243253248,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243261440,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243265536,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243267584,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243268608,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269120,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269376,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269504,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269568,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269600,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269616,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269624,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269628,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269630,32,FLEN)
NAN_BOXED(2132602470,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(243269631,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815296,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815297,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815299,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815303,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815311,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815327,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815359,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815423,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815551,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815807,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197816319,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197817343,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197819391,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197823487,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197831679,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197848063,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197880831,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197946367,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2198077439,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2198339583,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2198863871,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2199912447,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2202009599,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2202009600,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2204106752,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2205155328,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2205679616,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2205941760,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206072832,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206138368,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206171136,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206187520,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206195712,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206199808,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206201856,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206202880,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203392,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203648,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203776,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203840,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203872,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203888,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203896,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203900,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203902,32,FLEN)
NAN_BOXED(2132656134,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203903,32,FLEN)
NAN_BOXED(2132679836,32,FLEN)
NAN_BOXED(2150879163,32,FLEN)
NAN_BOXED(3145728000,32,FLEN)
NAN_BOXED(2132679836,32,FLEN)
NAN_BOXED(2150879163,32,FLEN)
NAN_BOXED(3145728001,32,FLEN)
NAN_BOXED(2132679836,32,FLEN)
NAN_BOXED(2150879163,32,FLEN)
NAN_BOXED(3145728003,32,FLEN)
NAN_BOXED(2132679836,32,FLEN)
NAN_BOXED(2150879163,32,FLEN)
NAN_BOXED(3145728007,32,FLEN)
NAN_BOXED(2132679836,32,FLEN)
NAN_BOXED(2150879163,32,FLEN)
NAN_BOXED(3145728015,32,FLEN)
NAN_BOXED(2132679836,32,FLEN)
NAN_BOXED(2150879163,32,FLEN)
NAN_BOXED(3145728031,32,FLEN)
NAN_BOXED(2132679836,32,FLEN)
NAN_BOXED(2150879163,32,FLEN)
NAN_BOXED(3145728063,32,FLEN)
NAN_BOXED(2132679836,32,FLEN)
NAN_BOXED(2150879163,32,FLEN)
NAN_BOXED(3145728127,32,FLEN)
NAN_BOXED(2132679836,32,FLEN)
NAN_BOXED(2150879163,32,FLEN)
NAN_BOXED(3145728255,32,FLEN)
NAN_BOXED(2132679836,32,FLEN)
NAN_BOXED(2150879163,32,FLEN)
NAN_BOXED(3145728511,32,FLEN)
NAN_BOXED(2132679836,32,FLEN)
NAN_BOXED(2150879163,32,FLEN)
NAN_BOXED(3145729023,32,FLEN)
NAN_BOXED(2132679836,32,FLEN)
NAN_BOXED(2150879163,32,FLEN)
NAN_BOXED(3145730047,32,FLEN)
NAN_BOXED(2132679836,32,FLEN)
NAN_BOXED(2150879163,32,FLEN)
NAN_BOXED(3145732095,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
