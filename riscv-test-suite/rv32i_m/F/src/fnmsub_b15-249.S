
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_31744:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x89000001; valaddr_reg:x3; val_offset:95232*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95232*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31745:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x89000003; valaddr_reg:x3; val_offset:95235*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95235*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31746:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x89000007; valaddr_reg:x3; val_offset:95238*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95238*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31747:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x8900000f; valaddr_reg:x3; val_offset:95241*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95241*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31748:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x8900001f; valaddr_reg:x3; val_offset:95244*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95244*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31749:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x8900003f; valaddr_reg:x3; val_offset:95247*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95247*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31750:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x8900007f; valaddr_reg:x3; val_offset:95250*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95250*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31751:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x890000ff; valaddr_reg:x3; val_offset:95253*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95253*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31752:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x890001ff; valaddr_reg:x3; val_offset:95256*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95256*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31753:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x890003ff; valaddr_reg:x3; val_offset:95259*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95259*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31754:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x890007ff; valaddr_reg:x3; val_offset:95262*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95262*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31755:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x89000fff; valaddr_reg:x3; val_offset:95265*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95265*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31756:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x89001fff; valaddr_reg:x3; val_offset:95268*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95268*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31757:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x89003fff; valaddr_reg:x3; val_offset:95271*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95271*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31758:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x89007fff; valaddr_reg:x3; val_offset:95274*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95274*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31759:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x8900ffff; valaddr_reg:x3; val_offset:95277*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95277*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31760:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x8901ffff; valaddr_reg:x3; val_offset:95280*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95280*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31761:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x8903ffff; valaddr_reg:x3; val_offset:95283*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95283*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31762:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x8907ffff; valaddr_reg:x3; val_offset:95286*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95286*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31763:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x890fffff; valaddr_reg:x3; val_offset:95289*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95289*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31764:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x891fffff; valaddr_reg:x3; val_offset:95292*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95292*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31765:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x893fffff; valaddr_reg:x3; val_offset:95295*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95295*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31766:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x89400000; valaddr_reg:x3; val_offset:95298*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95298*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31767:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x89600000; valaddr_reg:x3; val_offset:95301*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95301*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31768:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x89700000; valaddr_reg:x3; val_offset:95304*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95304*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31769:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x89780000; valaddr_reg:x3; val_offset:95307*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95307*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31770:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x897c0000; valaddr_reg:x3; val_offset:95310*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95310*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31771:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x897e0000; valaddr_reg:x3; val_offset:95313*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95313*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31772:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x897f0000; valaddr_reg:x3; val_offset:95316*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95316*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31773:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x897f8000; valaddr_reg:x3; val_offset:95319*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95319*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31774:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x897fc000; valaddr_reg:x3; val_offset:95322*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95322*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31775:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x897fe000; valaddr_reg:x3; val_offset:95325*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95325*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31776:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x897ff000; valaddr_reg:x3; val_offset:95328*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95328*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31777:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x897ff800; valaddr_reg:x3; val_offset:95331*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95331*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31778:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x897ffc00; valaddr_reg:x3; val_offset:95334*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95334*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31779:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x897ffe00; valaddr_reg:x3; val_offset:95337*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95337*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31780:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x897fff00; valaddr_reg:x3; val_offset:95340*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95340*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31781:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x897fff80; valaddr_reg:x3; val_offset:95343*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95343*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31782:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x897fffc0; valaddr_reg:x3; val_offset:95346*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95346*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31783:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x897fffe0; valaddr_reg:x3; val_offset:95349*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95349*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31784:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x897ffff0; valaddr_reg:x3; val_offset:95352*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95352*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31785:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x897ffff8; valaddr_reg:x3; val_offset:95355*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95355*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31786:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x897ffffc; valaddr_reg:x3; val_offset:95358*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95358*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31787:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x897ffffe; valaddr_reg:x3; val_offset:95361*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95361*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31788:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1efcc5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1efcc5; op2val:0x80000000;
op3val:0x897fffff; valaddr_reg:x3; val_offset:95364*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95364*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31789:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:95367*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95367*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31790:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:95370*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95370*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31791:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:95373*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95373*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31792:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:95376*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95376*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:95379*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95379*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31794:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:95382*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95382*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:95385*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95385*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31796:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:95388*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95388*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:95391*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95391*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31798:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:95394*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95394*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:95397*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95397*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31800:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:95400*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95400*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31801:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:95403*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95403*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31802:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:95406*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95406*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31803:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:95409*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95409*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31804:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:95412*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95412*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c000000; valaddr_reg:x3; val_offset:95415*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95415*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31806:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c000001; valaddr_reg:x3; val_offset:95418*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95418*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31807:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c000003; valaddr_reg:x3; val_offset:95421*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95421*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31808:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c000007; valaddr_reg:x3; val_offset:95424*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95424*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31809:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c00000f; valaddr_reg:x3; val_offset:95427*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95427*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31810:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c00001f; valaddr_reg:x3; val_offset:95430*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95430*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c00003f; valaddr_reg:x3; val_offset:95433*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95433*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31812:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c00007f; valaddr_reg:x3; val_offset:95436*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95436*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c0000ff; valaddr_reg:x3; val_offset:95439*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95439*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c0001ff; valaddr_reg:x3; val_offset:95442*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95442*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c0003ff; valaddr_reg:x3; val_offset:95445*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95445*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c0007ff; valaddr_reg:x3; val_offset:95448*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95448*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c000fff; valaddr_reg:x3; val_offset:95451*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95451*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31818:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c001fff; valaddr_reg:x3; val_offset:95454*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95454*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c003fff; valaddr_reg:x3; val_offset:95457*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95457*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31820:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c007fff; valaddr_reg:x3; val_offset:95460*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95460*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c00ffff; valaddr_reg:x3; val_offset:95463*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95463*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c01ffff; valaddr_reg:x3; val_offset:95466*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95466*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c03ffff; valaddr_reg:x3; val_offset:95469*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95469*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c07ffff; valaddr_reg:x3; val_offset:95472*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95472*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c0fffff; valaddr_reg:x3; val_offset:95475*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95475*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31826:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c1fffff; valaddr_reg:x3; val_offset:95478*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95478*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c3fffff; valaddr_reg:x3; val_offset:95481*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95481*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31828:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c400000; valaddr_reg:x3; val_offset:95484*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95484*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c600000; valaddr_reg:x3; val_offset:95487*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95487*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31830:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c700000; valaddr_reg:x3; val_offset:95490*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95490*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c780000; valaddr_reg:x3; val_offset:95493*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95493*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31832:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c7c0000; valaddr_reg:x3; val_offset:95496*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95496*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c7e0000; valaddr_reg:x3; val_offset:95499*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95499*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31834:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c7f0000; valaddr_reg:x3; val_offset:95502*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95502*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c7f8000; valaddr_reg:x3; val_offset:95505*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95505*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31836:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c7fc000; valaddr_reg:x3; val_offset:95508*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95508*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c7fe000; valaddr_reg:x3; val_offset:95511*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95511*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c7ff000; valaddr_reg:x3; val_offset:95514*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95514*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c7ff800; valaddr_reg:x3; val_offset:95517*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95517*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c7ffc00; valaddr_reg:x3; val_offset:95520*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95520*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c7ffe00; valaddr_reg:x3; val_offset:95523*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95523*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c7fff00; valaddr_reg:x3; val_offset:95526*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95526*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c7fff80; valaddr_reg:x3; val_offset:95529*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95529*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c7fffc0; valaddr_reg:x3; val_offset:95532*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95532*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c7fffe0; valaddr_reg:x3; val_offset:95535*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95535*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c7ffff0; valaddr_reg:x3; val_offset:95538*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95538*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c7ffff8; valaddr_reg:x3; val_offset:95541*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95541*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c7ffffc; valaddr_reg:x3; val_offset:95544*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95544*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c7ffffe; valaddr_reg:x3; val_offset:95547*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95547*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1fab30 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1fab30; op2val:0x80000000;
op3val:0x8c7fffff; valaddr_reg:x3; val_offset:95550*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95550*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x3f800001; valaddr_reg:x3; val_offset:95553*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95553*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x3f800003; valaddr_reg:x3; val_offset:95556*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95556*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x3f800007; valaddr_reg:x3; val_offset:95559*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95559*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x3f999999; valaddr_reg:x3; val_offset:95562*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95562*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:95565*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95565*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31856:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:95568*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95568*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:95571*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95571*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31858:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:95574*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95574*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:95577*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95577*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31860:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:95580*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95580*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:95583*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95583*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31862:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:95586*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95586*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:95589*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95589*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31864:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:95592*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95592*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:95595*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95595*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:95598*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95598*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x47000000; valaddr_reg:x3; val_offset:95601*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95601*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x47000001; valaddr_reg:x3; val_offset:95604*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95604*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x47000003; valaddr_reg:x3; val_offset:95607*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95607*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x47000007; valaddr_reg:x3; val_offset:95610*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95610*0 + 3*248*FLEN/8, x4, x1, x2)

inst_31871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x4700000f; valaddr_reg:x3; val_offset:95613*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95613*0 + 3*248*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478593,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478595,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478599,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478607,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478623,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478655,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478719,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478847,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298479103,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298479615,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298480639,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298482687,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298486783,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298494975,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298511359,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298544127,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298609663,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298740735,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2299002879,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2299527167,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2300575743,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2302672895,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2302672896,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2304770048,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2305818624,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306342912,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306605056,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306736128,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306801664,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306834432,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306850816,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306859008,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306863104,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306865152,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306866176,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306866688,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306866944,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867072,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867136,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867168,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867184,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867192,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867196,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867198,32,FLEN)
NAN_BOXED(2132737221,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867199,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810240,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810241,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810243,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810247,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810255,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810271,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810303,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810367,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810495,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348810751,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348811263,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348812287,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348814335,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348818431,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348826623,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348843007,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348875775,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2348941311,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2349072383,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2349334527,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2349858815,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2350907391,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2353004543,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2353004544,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2355101696,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2356150272,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2356674560,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2356936704,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357067776,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357133312,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357166080,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357182464,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357190656,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357194752,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357196800,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357197824,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198336,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198592,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198720,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198784,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198816,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198832,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198840,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198844,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198846,32,FLEN)
NAN_BOXED(2132781872,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198847,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1191182336,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1191182337,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1191182339,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1191182343,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1191182351,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
