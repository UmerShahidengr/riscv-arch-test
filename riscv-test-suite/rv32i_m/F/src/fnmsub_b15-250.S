
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_31872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x4700001f; valaddr_reg:x3; val_offset:95616*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95616*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x4700003f; valaddr_reg:x3; val_offset:95619*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95619*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x4700007f; valaddr_reg:x3; val_offset:95622*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95622*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x470000ff; valaddr_reg:x3; val_offset:95625*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95625*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x470001ff; valaddr_reg:x3; val_offset:95628*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95628*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x470003ff; valaddr_reg:x3; val_offset:95631*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95631*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x470007ff; valaddr_reg:x3; val_offset:95634*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95634*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x47000fff; valaddr_reg:x3; val_offset:95637*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95637*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x47001fff; valaddr_reg:x3; val_offset:95640*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95640*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x47003fff; valaddr_reg:x3; val_offset:95643*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95643*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x47007fff; valaddr_reg:x3; val_offset:95646*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95646*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x4700ffff; valaddr_reg:x3; val_offset:95649*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95649*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x4701ffff; valaddr_reg:x3; val_offset:95652*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95652*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x4703ffff; valaddr_reg:x3; val_offset:95655*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95655*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x4707ffff; valaddr_reg:x3; val_offset:95658*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95658*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x470fffff; valaddr_reg:x3; val_offset:95661*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95661*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x471fffff; valaddr_reg:x3; val_offset:95664*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95664*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x473fffff; valaddr_reg:x3; val_offset:95667*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95667*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x47400000; valaddr_reg:x3; val_offset:95670*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95670*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x47600000; valaddr_reg:x3; val_offset:95673*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95673*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x47700000; valaddr_reg:x3; val_offset:95676*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95676*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x47780000; valaddr_reg:x3; val_offset:95679*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95679*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x477c0000; valaddr_reg:x3; val_offset:95682*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95682*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x477e0000; valaddr_reg:x3; val_offset:95685*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95685*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x477f0000; valaddr_reg:x3; val_offset:95688*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95688*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x477f8000; valaddr_reg:x3; val_offset:95691*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95691*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x477fc000; valaddr_reg:x3; val_offset:95694*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95694*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x477fe000; valaddr_reg:x3; val_offset:95697*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95697*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x477ff000; valaddr_reg:x3; val_offset:95700*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95700*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x477ff800; valaddr_reg:x3; val_offset:95703*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95703*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x477ffc00; valaddr_reg:x3; val_offset:95706*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95706*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x477ffe00; valaddr_reg:x3; val_offset:95709*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95709*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x477fff00; valaddr_reg:x3; val_offset:95712*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95712*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x477fff80; valaddr_reg:x3; val_offset:95715*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95715*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x477fffc0; valaddr_reg:x3; val_offset:95718*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95718*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x477fffe0; valaddr_reg:x3; val_offset:95721*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95721*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x477ffff0; valaddr_reg:x3; val_offset:95724*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95724*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x477ffff8; valaddr_reg:x3; val_offset:95727*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95727*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x477ffffc; valaddr_reg:x3; val_offset:95730*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95730*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x477ffffe; valaddr_reg:x3; val_offset:95733*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95733*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x200a1a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x332ff7 and fs3 == 0 and fe3 == 0x8e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f200a1a; op2val:0x332ff7;
op3val:0x477fffff; valaddr_reg:x3; val_offset:95736*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95736*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:95739*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95739*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:95742*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95742*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:95745*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95745*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:95748*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95748*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:95751*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95751*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:95754*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95754*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:95757*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95757*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:95760*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95760*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:95763*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95763*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:95766*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95766*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:95769*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95769*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:95772*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95772*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:95775*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95775*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:95778*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95778*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:95781*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95781*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:95784*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95784*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82800000; valaddr_reg:x3; val_offset:95787*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95787*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82800001; valaddr_reg:x3; val_offset:95790*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95790*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82800003; valaddr_reg:x3; val_offset:95793*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95793*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82800007; valaddr_reg:x3; val_offset:95796*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95796*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x8280000f; valaddr_reg:x3; val_offset:95799*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95799*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x8280001f; valaddr_reg:x3; val_offset:95802*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95802*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x8280003f; valaddr_reg:x3; val_offset:95805*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95805*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x8280007f; valaddr_reg:x3; val_offset:95808*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95808*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x828000ff; valaddr_reg:x3; val_offset:95811*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95811*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x828001ff; valaddr_reg:x3; val_offset:95814*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95814*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x828003ff; valaddr_reg:x3; val_offset:95817*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95817*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x828007ff; valaddr_reg:x3; val_offset:95820*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95820*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82800fff; valaddr_reg:x3; val_offset:95823*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95823*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82801fff; valaddr_reg:x3; val_offset:95826*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95826*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82803fff; valaddr_reg:x3; val_offset:95829*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95829*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31944:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82807fff; valaddr_reg:x3; val_offset:95832*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95832*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31945:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x8280ffff; valaddr_reg:x3; val_offset:95835*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95835*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31946:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x8281ffff; valaddr_reg:x3; val_offset:95838*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95838*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31947:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x8283ffff; valaddr_reg:x3; val_offset:95841*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95841*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31948:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x8287ffff; valaddr_reg:x3; val_offset:95844*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95844*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31949:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x828fffff; valaddr_reg:x3; val_offset:95847*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95847*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31950:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x829fffff; valaddr_reg:x3; val_offset:95850*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95850*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82bfffff; valaddr_reg:x3; val_offset:95853*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95853*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31952:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82c00000; valaddr_reg:x3; val_offset:95856*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95856*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82e00000; valaddr_reg:x3; val_offset:95859*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95859*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31954:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82f00000; valaddr_reg:x3; val_offset:95862*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95862*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82f80000; valaddr_reg:x3; val_offset:95865*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95865*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31956:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82fc0000; valaddr_reg:x3; val_offset:95868*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95868*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82fe0000; valaddr_reg:x3; val_offset:95871*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95871*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31958:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82ff0000; valaddr_reg:x3; val_offset:95874*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95874*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82ff8000; valaddr_reg:x3; val_offset:95877*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95877*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31960:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82ffc000; valaddr_reg:x3; val_offset:95880*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95880*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82ffe000; valaddr_reg:x3; val_offset:95883*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95883*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82fff000; valaddr_reg:x3; val_offset:95886*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95886*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82fff800; valaddr_reg:x3; val_offset:95889*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95889*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82fffc00; valaddr_reg:x3; val_offset:95892*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95892*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82fffe00; valaddr_reg:x3; val_offset:95895*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95895*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82ffff00; valaddr_reg:x3; val_offset:95898*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95898*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82ffff80; valaddr_reg:x3; val_offset:95901*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95901*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31968:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82ffffc0; valaddr_reg:x3; val_offset:95904*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95904*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82ffffe0; valaddr_reg:x3; val_offset:95907*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95907*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31970:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82fffff0; valaddr_reg:x3; val_offset:95910*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95910*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82fffff8; valaddr_reg:x3; val_offset:95913*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95913*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82fffffc; valaddr_reg:x3; val_offset:95916*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95916*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82fffffe; valaddr_reg:x3; val_offset:95919*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95919*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x203ed5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f203ed5; op2val:0x80000000;
op3val:0x82ffffff; valaddr_reg:x3; val_offset:95922*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95922*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x208c03 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f208c03; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:95925*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95925*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x208c03 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f208c03; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:95928*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95928*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x208c03 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f208c03; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:95931*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95931*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x208c03 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f208c03; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:95934*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95934*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x208c03 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f208c03; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:95937*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95937*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x208c03 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f208c03; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:95940*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95940*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x208c03 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f208c03; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:95943*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95943*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x208c03 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f208c03; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:95946*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95946*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x208c03 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f208c03; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:95949*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95949*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x208c03 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f208c03; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:95952*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95952*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x208c03 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f208c03; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:95955*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95955*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x208c03 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f208c03; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:95958*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95958*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x208c03 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f208c03; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:95961*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95961*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x208c03 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f208c03; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:95964*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95964*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x208c03 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f208c03; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:95967*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95967*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x208c03 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f208c03; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:95970*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95970*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x208c03 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f208c03; op2val:0x80000000;
op3val:0x82000000; valaddr_reg:x3; val_offset:95973*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95973*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x208c03 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f208c03; op2val:0x80000000;
op3val:0x82000001; valaddr_reg:x3; val_offset:95976*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95976*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x208c03 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f208c03; op2val:0x80000000;
op3val:0x82000003; valaddr_reg:x3; val_offset:95979*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95979*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x208c03 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f208c03; op2val:0x80000000;
op3val:0x82000007; valaddr_reg:x3; val_offset:95982*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95982*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31995:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x208c03 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f208c03; op2val:0x80000000;
op3val:0x8200000f; valaddr_reg:x3; val_offset:95985*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95985*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x208c03 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f208c03; op2val:0x80000000;
op3val:0x8200001f; valaddr_reg:x3; val_offset:95988*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95988*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x208c03 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f208c03; op2val:0x80000000;
op3val:0x8200003f; valaddr_reg:x3; val_offset:95991*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95991*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x208c03 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f208c03; op2val:0x80000000;
op3val:0x8200007f; valaddr_reg:x3; val_offset:95994*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95994*0 + 3*249*FLEN/8, x4, x1, x2)

inst_31999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x208c03 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x04 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f208c03; op2val:0x80000000;
op3val:0x820000ff; valaddr_reg:x3; val_offset:95997*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 95997*0 + 3*249*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1191182367,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1191182399,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1191182463,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1191182591,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1191182847,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1191183359,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1191184383,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1191186431,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1191190527,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1191198719,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1191215103,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1191247871,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1191313407,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1191444479,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1191706623,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1192230911,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1193279487,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1195376639,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1195376640,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1197473792,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1198522368,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1199046656,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1199308800,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1199439872,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1199505408,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1199538176,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1199554560,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1199562752,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1199566848,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1199568896,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1199569920,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1199570432,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1199570688,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1199570816,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1199570880,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1199570912,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1199570928,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1199570936,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1199570940,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1199570942,32,FLEN)
NAN_BOXED(2132806170,32,FLEN)
NAN_BOXED(3354615,32,FLEN)
NAN_BOXED(1199570943,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426688,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426689,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426691,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426695,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426703,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426719,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426751,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426815,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189426943,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189427199,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189427711,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189428735,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189430783,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189434879,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189443071,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189459455,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189492223,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189557759,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189688831,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2189950975,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2190475263,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2191523839,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2193620991,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2193620992,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2195718144,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2196766720,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197291008,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197553152,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197684224,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197749760,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197782528,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197798912,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197807104,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197811200,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197813248,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197814272,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197814784,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815040,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815168,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815232,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815264,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815280,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815288,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815292,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815294,32,FLEN)
NAN_BOXED(2132819669,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815295,32,FLEN)
NAN_BOXED(2132839427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2132839427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2132839427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2132839427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2132839427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2132839427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2132839427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2132839427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2132839427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2132839427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2132839427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2132839427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2132839427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2132839427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2132839427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2132839427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2132839427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038080,32,FLEN)
NAN_BOXED(2132839427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038081,32,FLEN)
NAN_BOXED(2132839427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038083,32,FLEN)
NAN_BOXED(2132839427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038087,32,FLEN)
NAN_BOXED(2132839427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038095,32,FLEN)
NAN_BOXED(2132839427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038111,32,FLEN)
NAN_BOXED(2132839427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038143,32,FLEN)
NAN_BOXED(2132839427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038207,32,FLEN)
NAN_BOXED(2132839427,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2181038335,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
