
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_32128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4d801fff; valaddr_reg:x3; val_offset:96384*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96384*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4d803fff; valaddr_reg:x3; val_offset:96387*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96387*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4d807fff; valaddr_reg:x3; val_offset:96390*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96390*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4d80ffff; valaddr_reg:x3; val_offset:96393*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96393*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4d81ffff; valaddr_reg:x3; val_offset:96396*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96396*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4d83ffff; valaddr_reg:x3; val_offset:96399*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96399*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4d87ffff; valaddr_reg:x3; val_offset:96402*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96402*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4d8fffff; valaddr_reg:x3; val_offset:96405*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96405*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4d9fffff; valaddr_reg:x3; val_offset:96408*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96408*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4dbfffff; valaddr_reg:x3; val_offset:96411*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96411*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4dc00000; valaddr_reg:x3; val_offset:96414*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96414*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4de00000; valaddr_reg:x3; val_offset:96417*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96417*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4df00000; valaddr_reg:x3; val_offset:96420*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96420*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4df80000; valaddr_reg:x3; val_offset:96423*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96423*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4dfc0000; valaddr_reg:x3; val_offset:96426*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96426*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4dfe0000; valaddr_reg:x3; val_offset:96429*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96429*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4dff0000; valaddr_reg:x3; val_offset:96432*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96432*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4dff8000; valaddr_reg:x3; val_offset:96435*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96435*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4dffc000; valaddr_reg:x3; val_offset:96438*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96438*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4dffe000; valaddr_reg:x3; val_offset:96441*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96441*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4dfff000; valaddr_reg:x3; val_offset:96444*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96444*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4dfff800; valaddr_reg:x3; val_offset:96447*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96447*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4dfffc00; valaddr_reg:x3; val_offset:96450*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96450*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4dfffe00; valaddr_reg:x3; val_offset:96453*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96453*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4dffff00; valaddr_reg:x3; val_offset:96456*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96456*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4dffff80; valaddr_reg:x3; val_offset:96459*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96459*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4dffffc0; valaddr_reg:x3; val_offset:96462*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96462*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4dffffe0; valaddr_reg:x3; val_offset:96465*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96465*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4dfffff0; valaddr_reg:x3; val_offset:96468*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96468*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4dfffff8; valaddr_reg:x3; val_offset:96471*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96471*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4dfffffc; valaddr_reg:x3; val_offset:96474*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96474*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4dfffffe; valaddr_reg:x3; val_offset:96477*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96477*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20fcca and fs2 == 0 and fe2 == 0x00 and fm2 == 0x32e2cd and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20fcca; op2val:0x32e2cd;
op3val:0x4dffffff; valaddr_reg:x3; val_offset:96480*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96480*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x80000000; valaddr_reg:x3; val_offset:96483*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96483*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:96486*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96486*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:96489*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96489*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:96492*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96492*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x8000000f; valaddr_reg:x3; val_offset:96495*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96495*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32166:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x8000001f; valaddr_reg:x3; val_offset:96498*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96498*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x8000003f; valaddr_reg:x3; val_offset:96501*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96501*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x8000007f; valaddr_reg:x3; val_offset:96504*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96504*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x800000ff; valaddr_reg:x3; val_offset:96507*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96507*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x800001ff; valaddr_reg:x3; val_offset:96510*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96510*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x800003ff; valaddr_reg:x3; val_offset:96513*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96513*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x800007ff; valaddr_reg:x3; val_offset:96516*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96516*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x80000fff; valaddr_reg:x3; val_offset:96519*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96519*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x80001fff; valaddr_reg:x3; val_offset:96522*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96522*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x80003fff; valaddr_reg:x3; val_offset:96525*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96525*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x80007fff; valaddr_reg:x3; val_offset:96528*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96528*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x8000ffff; valaddr_reg:x3; val_offset:96531*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96531*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x8001ffff; valaddr_reg:x3; val_offset:96534*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96534*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x8003ffff; valaddr_reg:x3; val_offset:96537*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96537*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x8007ffff; valaddr_reg:x3; val_offset:96540*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96540*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x800fffff; valaddr_reg:x3; val_offset:96543*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96543*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:96546*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96546*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x801fffff; valaddr_reg:x3; val_offset:96549*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96549*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32184:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:96552*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96552*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32185:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:96555*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96555*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32186:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:96558*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96558*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32187:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:96561*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96561*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x803fffff; valaddr_reg:x3; val_offset:96564*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96564*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x80400000; valaddr_reg:x3; val_offset:96567*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96567*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:96570*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96570*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:96573*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96573*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32192:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:96576*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96576*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32193:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x80600000; valaddr_reg:x3; val_offset:96579*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96579*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32194:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:96582*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96582*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32195:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:96585*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96585*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32196:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x80700000; valaddr_reg:x3; val_offset:96588*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96588*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x80780000; valaddr_reg:x3; val_offset:96591*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96591*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x807c0000; valaddr_reg:x3; val_offset:96594*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96594*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32199:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x807e0000; valaddr_reg:x3; val_offset:96597*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96597*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32200:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x807f0000; valaddr_reg:x3; val_offset:96600*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96600*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32201:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x807f8000; valaddr_reg:x3; val_offset:96603*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96603*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32202:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x807fc000; valaddr_reg:x3; val_offset:96606*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96606*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32203:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x807fe000; valaddr_reg:x3; val_offset:96609*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96609*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32204:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x807ff000; valaddr_reg:x3; val_offset:96612*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96612*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32205:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x807ff800; valaddr_reg:x3; val_offset:96615*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96615*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32206:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x807ffc00; valaddr_reg:x3; val_offset:96618*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96618*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32207:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x807ffe00; valaddr_reg:x3; val_offset:96621*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96621*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32208:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x807fff00; valaddr_reg:x3; val_offset:96624*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96624*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32209:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x807fff80; valaddr_reg:x3; val_offset:96627*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96627*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32210:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x807fffc0; valaddr_reg:x3; val_offset:96630*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96630*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32211:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x807fffe0; valaddr_reg:x3; val_offset:96633*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96633*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32212:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x807ffff0; valaddr_reg:x3; val_offset:96636*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96636*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32213:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:96639*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96639*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32214:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:96642*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96642*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32215:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:96645*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96645*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32216:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x219327 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f219327; op2val:0x80000000;
op3val:0x807fffff; valaddr_reg:x3; val_offset:96648*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96648*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32217:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b000000; valaddr_reg:x3; val_offset:96651*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96651*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32218:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b000001; valaddr_reg:x3; val_offset:96654*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96654*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32219:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b000003; valaddr_reg:x3; val_offset:96657*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96657*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32220:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b000007; valaddr_reg:x3; val_offset:96660*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96660*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32221:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b00000f; valaddr_reg:x3; val_offset:96663*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96663*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32222:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b00001f; valaddr_reg:x3; val_offset:96666*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96666*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32223:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b00003f; valaddr_reg:x3; val_offset:96669*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96669*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32224:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b00007f; valaddr_reg:x3; val_offset:96672*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96672*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32225:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b0000ff; valaddr_reg:x3; val_offset:96675*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96675*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32226:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b0001ff; valaddr_reg:x3; val_offset:96678*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96678*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32227:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b0003ff; valaddr_reg:x3; val_offset:96681*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96681*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32228:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b0007ff; valaddr_reg:x3; val_offset:96684*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96684*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32229:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b000fff; valaddr_reg:x3; val_offset:96687*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96687*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b001fff; valaddr_reg:x3; val_offset:96690*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96690*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b003fff; valaddr_reg:x3; val_offset:96693*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96693*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b007fff; valaddr_reg:x3; val_offset:96696*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96696*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b00ffff; valaddr_reg:x3; val_offset:96699*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96699*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b01ffff; valaddr_reg:x3; val_offset:96702*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96702*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b03ffff; valaddr_reg:x3; val_offset:96705*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96705*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b07ffff; valaddr_reg:x3; val_offset:96708*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96708*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b0fffff; valaddr_reg:x3; val_offset:96711*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96711*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b1fffff; valaddr_reg:x3; val_offset:96714*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96714*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b3fffff; valaddr_reg:x3; val_offset:96717*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96717*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b400000; valaddr_reg:x3; val_offset:96720*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96720*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b600000; valaddr_reg:x3; val_offset:96723*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96723*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b700000; valaddr_reg:x3; val_offset:96726*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96726*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b780000; valaddr_reg:x3; val_offset:96729*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96729*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b7c0000; valaddr_reg:x3; val_offset:96732*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96732*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32245:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b7e0000; valaddr_reg:x3; val_offset:96735*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96735*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b7f0000; valaddr_reg:x3; val_offset:96738*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96738*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b7f8000; valaddr_reg:x3; val_offset:96741*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96741*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b7fc000; valaddr_reg:x3; val_offset:96744*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96744*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b7fe000; valaddr_reg:x3; val_offset:96747*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96747*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b7ff000; valaddr_reg:x3; val_offset:96750*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96750*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b7ff800; valaddr_reg:x3; val_offset:96753*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96753*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b7ffc00; valaddr_reg:x3; val_offset:96756*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96756*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b7ffe00; valaddr_reg:x3; val_offset:96759*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96759*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b7fff00; valaddr_reg:x3; val_offset:96762*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96762*0 + 3*251*FLEN/8, x4, x1, x2)

inst_32255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x21b896 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x4a9ed8 and fs3 == 0 and fe3 == 0xd6 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f21b896; op2val:0x3fca9ed8;
op3val:0x6b7fff80; valaddr_reg:x3; val_offset:96765*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96765*0 + 3*251*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1300242431,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1300250623,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1300267007,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1300299775,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1300365311,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1300496383,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1300758527,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1301282815,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1302331391,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1304428543,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1304428544,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1306525696,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1307574272,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1308098560,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1308360704,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1308491776,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1308557312,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1308590080,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1308606464,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1308614656,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1308618752,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1308620800,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1308621824,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1308622336,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1308622592,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1308622720,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1308622784,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1308622816,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1308622832,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1308622840,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1308622844,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1308622846,32,FLEN)
NAN_BOXED(2132868298,32,FLEN)
NAN_BOXED(3334861,32,FLEN)
NAN_BOXED(1308622847,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483663,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483679,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483711,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483775,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483903,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147484159,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147484671,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147485695,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147487743,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147491839,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147500031,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147516415,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147549183,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147614719,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147745791,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2148007935,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2148532223,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149580799,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151677951,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151677952,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153775104,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154823680,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155347968,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155610112,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155741184,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155806720,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155839488,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155855872,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155864064,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155868160,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155870208,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155871232,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155871744,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872000,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872128,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872192,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872224,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872240,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2132906791,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1795162112,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1795162113,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1795162115,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1795162119,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1795162127,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1795162143,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1795162175,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1795162239,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1795162367,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1795162623,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1795163135,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1795164159,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1795166207,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1795170303,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1795178495,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1795194879,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1795227647,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1795293183,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1795424255,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1795686399,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1796210687,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1797259263,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1799356415,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1799356416,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1801453568,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1802502144,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1803026432,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1803288576,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1803419648,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1803485184,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1803517952,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1803534336,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1803542528,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1803546624,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1803548672,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1803549696,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1803550208,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1803550464,32,FLEN)
NAN_BOXED(2132916374,32,FLEN)
NAN_BOXED(1070243544,32,FLEN)
NAN_BOXED(1803550592,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
