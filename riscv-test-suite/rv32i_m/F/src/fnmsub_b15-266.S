
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_33920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:101760*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101760*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:101763*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101763*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:101766*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101766*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:101769*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101769*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x7000000; valaddr_reg:x3; val_offset:101772*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101772*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x7000001; valaddr_reg:x3; val_offset:101775*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101775*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x7000003; valaddr_reg:x3; val_offset:101778*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101778*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x7000007; valaddr_reg:x3; val_offset:101781*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101781*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x700000f; valaddr_reg:x3; val_offset:101784*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101784*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x700001f; valaddr_reg:x3; val_offset:101787*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101787*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x700003f; valaddr_reg:x3; val_offset:101790*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101790*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x700007f; valaddr_reg:x3; val_offset:101793*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101793*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x70000ff; valaddr_reg:x3; val_offset:101796*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101796*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x70001ff; valaddr_reg:x3; val_offset:101799*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101799*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x70003ff; valaddr_reg:x3; val_offset:101802*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101802*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x70007ff; valaddr_reg:x3; val_offset:101805*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101805*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x7000fff; valaddr_reg:x3; val_offset:101808*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101808*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x7001fff; valaddr_reg:x3; val_offset:101811*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101811*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x7003fff; valaddr_reg:x3; val_offset:101814*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101814*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x7007fff; valaddr_reg:x3; val_offset:101817*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101817*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x700ffff; valaddr_reg:x3; val_offset:101820*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101820*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x701ffff; valaddr_reg:x3; val_offset:101823*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101823*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x703ffff; valaddr_reg:x3; val_offset:101826*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101826*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x707ffff; valaddr_reg:x3; val_offset:101829*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101829*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33944:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x70fffff; valaddr_reg:x3; val_offset:101832*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101832*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33945:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x71fffff; valaddr_reg:x3; val_offset:101835*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101835*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33946:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x73fffff; valaddr_reg:x3; val_offset:101838*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101838*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33947:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x7400000; valaddr_reg:x3; val_offset:101841*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101841*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33948:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x7600000; valaddr_reg:x3; val_offset:101844*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101844*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33949:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x7700000; valaddr_reg:x3; val_offset:101847*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101847*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33950:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x7780000; valaddr_reg:x3; val_offset:101850*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101850*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x77c0000; valaddr_reg:x3; val_offset:101853*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101853*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33952:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x77e0000; valaddr_reg:x3; val_offset:101856*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101856*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x77f0000; valaddr_reg:x3; val_offset:101859*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101859*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33954:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x77f8000; valaddr_reg:x3; val_offset:101862*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101862*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x77fc000; valaddr_reg:x3; val_offset:101865*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101865*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33956:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x77fe000; valaddr_reg:x3; val_offset:101868*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101868*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x77ff000; valaddr_reg:x3; val_offset:101871*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101871*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33958:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x77ff800; valaddr_reg:x3; val_offset:101874*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101874*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x77ffc00; valaddr_reg:x3; val_offset:101877*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101877*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33960:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x77ffe00; valaddr_reg:x3; val_offset:101880*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101880*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x77fff00; valaddr_reg:x3; val_offset:101883*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101883*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x77fff80; valaddr_reg:x3; val_offset:101886*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101886*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x77fffc0; valaddr_reg:x3; val_offset:101889*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101889*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x77fffe0; valaddr_reg:x3; val_offset:101892*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101892*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x77ffff0; valaddr_reg:x3; val_offset:101895*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101895*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x77ffff8; valaddr_reg:x3; val_offset:101898*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101898*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x77ffffc; valaddr_reg:x3; val_offset:101901*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101901*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33968:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x77ffffe; valaddr_reg:x3; val_offset:101904*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101904*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x299a74 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f299a74; op2val:0x0;
op3val:0x77fffff; valaddr_reg:x3; val_offset:101907*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101907*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33970:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x3f800001; valaddr_reg:x3; val_offset:101910*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101910*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x3f800003; valaddr_reg:x3; val_offset:101913*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101913*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x3f800007; valaddr_reg:x3; val_offset:101916*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101916*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x3f999999; valaddr_reg:x3; val_offset:101919*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101919*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:101922*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101922*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:101925*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101925*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:101928*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101928*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:101931*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101931*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:101934*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101934*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:101937*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101937*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:101940*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101940*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:101943*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101943*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:101946*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101946*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:101949*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101949*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:101952*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101952*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:101955*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101955*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a000000; valaddr_reg:x3; val_offset:101958*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101958*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a000001; valaddr_reg:x3; val_offset:101961*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101961*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a000003; valaddr_reg:x3; val_offset:101964*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101964*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a000007; valaddr_reg:x3; val_offset:101967*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101967*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a00000f; valaddr_reg:x3; val_offset:101970*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101970*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a00001f; valaddr_reg:x3; val_offset:101973*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101973*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a00003f; valaddr_reg:x3; val_offset:101976*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101976*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a00007f; valaddr_reg:x3; val_offset:101979*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101979*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a0000ff; valaddr_reg:x3; val_offset:101982*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101982*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33995:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a0001ff; valaddr_reg:x3; val_offset:101985*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101985*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a0003ff; valaddr_reg:x3; val_offset:101988*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101988*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a0007ff; valaddr_reg:x3; val_offset:101991*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101991*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a000fff; valaddr_reg:x3; val_offset:101994*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101994*0 + 3*265*FLEN/8, x4, x1, x2)

inst_33999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a001fff; valaddr_reg:x3; val_offset:101997*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 101997*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34000:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a003fff; valaddr_reg:x3; val_offset:102000*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102000*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34001:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a007fff; valaddr_reg:x3; val_offset:102003*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102003*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34002:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a00ffff; valaddr_reg:x3; val_offset:102006*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102006*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34003:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a01ffff; valaddr_reg:x3; val_offset:102009*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102009*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34004:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a03ffff; valaddr_reg:x3; val_offset:102012*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102012*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34005:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a07ffff; valaddr_reg:x3; val_offset:102015*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102015*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34006:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a0fffff; valaddr_reg:x3; val_offset:102018*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102018*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34007:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a1fffff; valaddr_reg:x3; val_offset:102021*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102021*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34008:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a3fffff; valaddr_reg:x3; val_offset:102024*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102024*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34009:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a400000; valaddr_reg:x3; val_offset:102027*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102027*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34010:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a600000; valaddr_reg:x3; val_offset:102030*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102030*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34011:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a700000; valaddr_reg:x3; val_offset:102033*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102033*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34012:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a780000; valaddr_reg:x3; val_offset:102036*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102036*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34013:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a7c0000; valaddr_reg:x3; val_offset:102039*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102039*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34014:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a7e0000; valaddr_reg:x3; val_offset:102042*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102042*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34015:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a7f0000; valaddr_reg:x3; val_offset:102045*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102045*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34016:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a7f8000; valaddr_reg:x3; val_offset:102048*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102048*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34017:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a7fc000; valaddr_reg:x3; val_offset:102051*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102051*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34018:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a7fe000; valaddr_reg:x3; val_offset:102054*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102054*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34019:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a7ff000; valaddr_reg:x3; val_offset:102057*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102057*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34020:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a7ff800; valaddr_reg:x3; val_offset:102060*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102060*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34021:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a7ffc00; valaddr_reg:x3; val_offset:102063*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102063*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34022:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a7ffe00; valaddr_reg:x3; val_offset:102066*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102066*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34023:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a7fff00; valaddr_reg:x3; val_offset:102069*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102069*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34024:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a7fff80; valaddr_reg:x3; val_offset:102072*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102072*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34025:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a7fffc0; valaddr_reg:x3; val_offset:102075*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102075*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34026:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a7fffe0; valaddr_reg:x3; val_offset:102078*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102078*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34027:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a7ffff0; valaddr_reg:x3; val_offset:102081*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102081*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34028:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a7ffff8; valaddr_reg:x3; val_offset:102084*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102084*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34029:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a7ffffc; valaddr_reg:x3; val_offset:102087*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102087*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34030:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a7ffffe; valaddr_reg:x3; val_offset:102090*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102090*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34031:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29e684 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x30376a and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29e684; op2val:0x30376a;
op3val:0x4a7fffff; valaddr_reg:x3; val_offset:102093*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102093*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34032:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a691c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2a691c; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:102096*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102096*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34033:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a691c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2a691c; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:102099*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102099*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34034:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a691c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2a691c; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:102102*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102102*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34035:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a691c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2a691c; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:102105*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102105*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34036:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a691c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2a691c; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:102108*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102108*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34037:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a691c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2a691c; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:102111*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102111*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34038:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a691c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2a691c; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:102114*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102114*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34039:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a691c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2a691c; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:102117*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102117*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34040:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a691c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2a691c; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:102120*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102120*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34041:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a691c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2a691c; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:102123*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102123*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34042:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a691c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2a691c; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:102126*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102126*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34043:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a691c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2a691c; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:102129*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102129*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34044:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a691c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2a691c; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:102132*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102132*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34045:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a691c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2a691c; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:102135*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102135*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34046:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a691c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2a691c; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:102138*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102138*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34047:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2a691c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2a691c; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:102141*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102141*0 + 3*265*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440512,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440513,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440515,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440519,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440527,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440543,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440575,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440639,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440767,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117441023,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117441535,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117442559,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117444607,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117448703,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117456895,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117473279,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117506047,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117571583,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117702655,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117964799,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(118489087,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(119537663,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(121634815,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(121634816,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(123731968,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(124780544,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125304832,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125566976,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125698048,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125763584,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125796352,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125812736,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125820928,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125825024,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125827072,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125828096,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125828608,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125828864,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125828992,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829056,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829088,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829104,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829112,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829116,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829118,32,FLEN)
NAN_BOXED(2133432948,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829119,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1241513984,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1241513985,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1241513987,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1241513991,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1241513999,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1241514015,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1241514047,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1241514111,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1241514239,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1241514495,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1241515007,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1241516031,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1241518079,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1241522175,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1241530367,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1241546751,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1241579519,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1241645055,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1241776127,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1242038271,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1242562559,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1243611135,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1245708287,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1245708288,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1247805440,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1248854016,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1249378304,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1249640448,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1249771520,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1249837056,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1249869824,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1249886208,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1249894400,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1249898496,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1249900544,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1249901568,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1249902080,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1249902336,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1249902464,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1249902528,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1249902560,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1249902576,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1249902584,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1249902588,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1249902590,32,FLEN)
NAN_BOXED(2133452420,32,FLEN)
NAN_BOXED(3159914,32,FLEN)
NAN_BOXED(1249902591,32,FLEN)
NAN_BOXED(2133485852,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2133485852,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2133485852,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2133485852,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2133485852,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2133485852,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2133485852,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2133485852,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2133485852,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2133485852,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2133485852,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2133485852,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2133485852,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2133485852,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2133485852,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2133485852,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
