
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_34304:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x5e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xaf600000; valaddr_reg:x3; val_offset:102912*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102912*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34305:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x5e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xaf700000; valaddr_reg:x3; val_offset:102915*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102915*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34306:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x5e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xaf780000; valaddr_reg:x3; val_offset:102918*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102918*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34307:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xaf7c0000; valaddr_reg:x3; val_offset:102921*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102921*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34308:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xaf7e0000; valaddr_reg:x3; val_offset:102924*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102924*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34309:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xaf7f0000; valaddr_reg:x3; val_offset:102927*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102927*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34310:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xaf7f8000; valaddr_reg:x3; val_offset:102930*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102930*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34311:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xaf7fc000; valaddr_reg:x3; val_offset:102933*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102933*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34312:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xaf7fe000; valaddr_reg:x3; val_offset:102936*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102936*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34313:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xaf7ff000; valaddr_reg:x3; val_offset:102939*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102939*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34314:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xaf7ff800; valaddr_reg:x3; val_offset:102942*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102942*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34315:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xaf7ffc00; valaddr_reg:x3; val_offset:102945*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102945*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34316:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xaf7ffe00; valaddr_reg:x3; val_offset:102948*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102948*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34317:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xaf7fff00; valaddr_reg:x3; val_offset:102951*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102951*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34318:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xaf7fff80; valaddr_reg:x3; val_offset:102954*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102954*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34319:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xaf7fffc0; valaddr_reg:x3; val_offset:102957*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102957*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34320:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xaf7fffe0; valaddr_reg:x3; val_offset:102960*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102960*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34321:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xaf7ffff0; valaddr_reg:x3; val_offset:102963*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102963*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34322:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xaf7ffff8; valaddr_reg:x3; val_offset:102966*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102966*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34323:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xaf7ffffc; valaddr_reg:x3; val_offset:102969*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102969*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34324:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xaf7ffffe; valaddr_reg:x3; val_offset:102972*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102972*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34325:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x5e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xaf7fffff; valaddr_reg:x3; val_offset:102975*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102975*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34326:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xbf800001; valaddr_reg:x3; val_offset:102978*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102978*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34327:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xbf800003; valaddr_reg:x3; val_offset:102981*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102981*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34328:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xbf800007; valaddr_reg:x3; val_offset:102984*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102984*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34329:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xbf999999; valaddr_reg:x3; val_offset:102987*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102987*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34330:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:102990*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102990*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34331:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:102993*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102993*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34332:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:102996*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102996*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34333:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:102999*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102999*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34334:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:103002*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103002*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34335:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:103005*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103005*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34336:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:103008*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103008*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34337:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:103011*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103011*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34338:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:103014*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103014*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34339:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:103017*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103017*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34340:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:103020*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103020*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34341:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c2411 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f96c3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c2411; op2val:0x802f96c3;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:103023*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103023*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34342:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a000000; valaddr_reg:x3; val_offset:103026*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103026*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34343:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a000001; valaddr_reg:x3; val_offset:103029*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103029*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34344:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a000003; valaddr_reg:x3; val_offset:103032*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103032*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34345:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a000007; valaddr_reg:x3; val_offset:103035*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103035*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34346:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a00000f; valaddr_reg:x3; val_offset:103038*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103038*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34347:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a00001f; valaddr_reg:x3; val_offset:103041*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103041*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34348:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a00003f; valaddr_reg:x3; val_offset:103044*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103044*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34349:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a00007f; valaddr_reg:x3; val_offset:103047*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103047*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34350:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a0000ff; valaddr_reg:x3; val_offset:103050*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103050*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34351:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a0001ff; valaddr_reg:x3; val_offset:103053*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103053*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34352:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a0003ff; valaddr_reg:x3; val_offset:103056*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103056*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34353:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a0007ff; valaddr_reg:x3; val_offset:103059*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103059*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34354:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a000fff; valaddr_reg:x3; val_offset:103062*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103062*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34355:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a001fff; valaddr_reg:x3; val_offset:103065*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103065*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34356:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a003fff; valaddr_reg:x3; val_offset:103068*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103068*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34357:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a007fff; valaddr_reg:x3; val_offset:103071*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103071*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34358:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a00ffff; valaddr_reg:x3; val_offset:103074*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103074*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34359:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a01ffff; valaddr_reg:x3; val_offset:103077*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103077*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34360:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a03ffff; valaddr_reg:x3; val_offset:103080*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103080*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34361:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a07ffff; valaddr_reg:x3; val_offset:103083*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103083*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34362:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a0fffff; valaddr_reg:x3; val_offset:103086*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103086*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34363:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a1fffff; valaddr_reg:x3; val_offset:103089*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103089*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34364:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a3fffff; valaddr_reg:x3; val_offset:103092*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103092*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34365:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a400000; valaddr_reg:x3; val_offset:103095*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103095*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34366:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a600000; valaddr_reg:x3; val_offset:103098*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103098*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34367:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a700000; valaddr_reg:x3; val_offset:103101*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103101*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34368:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a780000; valaddr_reg:x3; val_offset:103104*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103104*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34369:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a7c0000; valaddr_reg:x3; val_offset:103107*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103107*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34370:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a7e0000; valaddr_reg:x3; val_offset:103110*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103110*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34371:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a7f0000; valaddr_reg:x3; val_offset:103113*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103113*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34372:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a7f8000; valaddr_reg:x3; val_offset:103116*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103116*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34373:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a7fc000; valaddr_reg:x3; val_offset:103119*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103119*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34374:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a7fe000; valaddr_reg:x3; val_offset:103122*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103122*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34375:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a7ff000; valaddr_reg:x3; val_offset:103125*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103125*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34376:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a7ff800; valaddr_reg:x3; val_offset:103128*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103128*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34377:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a7ffc00; valaddr_reg:x3; val_offset:103131*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103131*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34378:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a7ffe00; valaddr_reg:x3; val_offset:103134*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103134*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34379:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a7fff00; valaddr_reg:x3; val_offset:103137*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103137*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34380:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a7fff80; valaddr_reg:x3; val_offset:103140*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103140*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34381:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a7fffc0; valaddr_reg:x3; val_offset:103143*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103143*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34382:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a7fffe0; valaddr_reg:x3; val_offset:103146*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103146*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34383:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a7ffff0; valaddr_reg:x3; val_offset:103149*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103149*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34384:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a7ffff8; valaddr_reg:x3; val_offset:103152*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103152*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34385:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a7ffffc; valaddr_reg:x3; val_offset:103155*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103155*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34386:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a7ffffe; valaddr_reg:x3; val_offset:103158*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103158*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34387:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x54 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x2a7fffff; valaddr_reg:x3; val_offset:103161*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103161*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34388:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x3f800001; valaddr_reg:x3; val_offset:103164*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103164*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34389:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x3f800003; valaddr_reg:x3; val_offset:103167*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103167*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34390:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x3f800007; valaddr_reg:x3; val_offset:103170*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103170*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34391:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x3f999999; valaddr_reg:x3; val_offset:103173*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103173*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34392:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:103176*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103176*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34393:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:103179*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103179*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34394:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:103182*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103182*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34395:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:103185*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103185*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34396:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:103188*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103188*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34397:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:103191*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103191*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34398:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:103194*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103194*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34399:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:103197*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103197*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34400:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:103200*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103200*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34401:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:103203*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103203*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34402:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:103206*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103206*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34403:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c289c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2f9582 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c289c; op2val:0x2f9582;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:103209*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103209*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34404:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xeb800000; valaddr_reg:x3; val_offset:103212*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103212*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34405:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xeb800001; valaddr_reg:x3; val_offset:103215*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103215*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34406:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xeb800003; valaddr_reg:x3; val_offset:103218*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103218*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34407:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xeb800007; valaddr_reg:x3; val_offset:103221*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103221*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34408:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xeb80000f; valaddr_reg:x3; val_offset:103224*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103224*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34409:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xeb80001f; valaddr_reg:x3; val_offset:103227*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103227*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34410:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xeb80003f; valaddr_reg:x3; val_offset:103230*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103230*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34411:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xeb80007f; valaddr_reg:x3; val_offset:103233*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103233*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34412:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xeb8000ff; valaddr_reg:x3; val_offset:103236*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103236*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34413:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xeb8001ff; valaddr_reg:x3; val_offset:103239*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103239*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34414:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xeb8003ff; valaddr_reg:x3; val_offset:103242*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103242*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34415:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xeb8007ff; valaddr_reg:x3; val_offset:103245*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103245*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34416:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xeb800fff; valaddr_reg:x3; val_offset:103248*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103248*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34417:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xeb801fff; valaddr_reg:x3; val_offset:103251*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103251*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34418:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xeb803fff; valaddr_reg:x3; val_offset:103254*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103254*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34419:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xeb807fff; valaddr_reg:x3; val_offset:103257*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103257*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34420:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xeb80ffff; valaddr_reg:x3; val_offset:103260*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103260*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34421:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xeb81ffff; valaddr_reg:x3; val_offset:103263*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103263*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34422:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xeb83ffff; valaddr_reg:x3; val_offset:103266*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103266*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34423:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xeb87ffff; valaddr_reg:x3; val_offset:103269*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103269*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34424:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xeb8fffff; valaddr_reg:x3; val_offset:103272*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103272*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34425:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xeb9fffff; valaddr_reg:x3; val_offset:103275*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103275*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34426:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xebbfffff; valaddr_reg:x3; val_offset:103278*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103278*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34427:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xebc00000; valaddr_reg:x3; val_offset:103281*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103281*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34428:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xebe00000; valaddr_reg:x3; val_offset:103284*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103284*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34429:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xebf00000; valaddr_reg:x3; val_offset:103287*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103287*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34430:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xebf80000; valaddr_reg:x3; val_offset:103290*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103290*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34431:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xebfc0000; valaddr_reg:x3; val_offset:103293*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103293*0 + 3*268*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(2942304256,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(2943352832,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(2943877120,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(2944139264,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(2944270336,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(2944335872,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(2944368640,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(2944385024,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(2944393216,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(2944397312,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(2944399360,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(2944400384,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(2944400896,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(2944401152,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(2944401280,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(2944401344,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(2944401376,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(2944401392,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(2944401400,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(2944401404,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(2944401406,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(2944401407,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2133599249,32,FLEN)
NAN_BOXED(2150602435,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(704643072,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(704643073,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(704643075,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(704643079,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(704643087,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(704643103,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(704643135,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(704643199,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(704643327,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(704643583,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(704644095,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(704645119,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(704647167,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(704651263,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(704659455,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(704675839,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(704708607,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(704774143,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(704905215,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(705167359,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(705691647,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(706740223,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(708837375,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(708837376,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(710934528,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(711983104,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(712507392,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(712769536,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(712900608,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(712966144,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(712998912,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(713015296,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(713023488,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(713027584,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(713029632,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(713030656,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(713031168,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(713031424,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(713031552,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(713031616,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(713031648,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(713031664,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(713031672,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(713031676,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(713031678,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(713031679,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2133600412,32,FLEN)
NAN_BOXED(3118466,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3951034368,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3951034369,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3951034371,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3951034375,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3951034383,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3951034399,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3951034431,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3951034495,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3951034623,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3951034879,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3951035391,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3951036415,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3951038463,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3951042559,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3951050751,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3951067135,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3951099903,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3951165439,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3951296511,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3951558655,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3952082943,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3953131519,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3955228671,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3955228672,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3957325824,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3958374400,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3958898688,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3959160832,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
