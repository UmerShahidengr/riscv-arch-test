
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_3328:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x084c20 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x706a5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d884c20; op2val:0x41706a5c;
op3val:0x7f000007; valaddr_reg:x3; val_offset:9984*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9984*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3329:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x084c20 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x706a5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d884c20; op2val:0x41706a5c;
op3val:0x7f199999; valaddr_reg:x3; val_offset:9987*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9987*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3330:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x084c20 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x706a5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d884c20; op2val:0x41706a5c;
op3val:0x7f249249; valaddr_reg:x3; val_offset:9990*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9990*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3331:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x084c20 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x706a5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d884c20; op2val:0x41706a5c;
op3val:0x7f333333; valaddr_reg:x3; val_offset:9993*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9993*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3332:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x084c20 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x706a5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d884c20; op2val:0x41706a5c;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:9996*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9996*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3333:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x084c20 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x706a5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d884c20; op2val:0x41706a5c;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:9999*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 9999*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3334:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x084c20 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x706a5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d884c20; op2val:0x41706a5c;
op3val:0x7f444444; valaddr_reg:x3; val_offset:10002*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10002*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3335:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x084c20 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x706a5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d884c20; op2val:0x41706a5c;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:10005*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10005*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3336:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x084c20 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x706a5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d884c20; op2val:0x41706a5c;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:10008*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10008*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3337:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x084c20 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x706a5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d884c20; op2val:0x41706a5c;
op3val:0x7f666666; valaddr_reg:x3; val_offset:10011*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10011*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3338:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x084c20 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x706a5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d884c20; op2val:0x41706a5c;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:10014*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10014*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3339:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x084c20 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x706a5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d884c20; op2val:0x41706a5c;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:10017*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10017*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3340:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x084c20 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x706a5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d884c20; op2val:0x41706a5c;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:10020*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10020*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3341:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x084c20 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x706a5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d884c20; op2val:0x41706a5c;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:10023*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10023*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3342:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfb800000; valaddr_reg:x3; val_offset:10026*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10026*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3343:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfb800001; valaddr_reg:x3; val_offset:10029*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10029*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3344:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfb800003; valaddr_reg:x3; val_offset:10032*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10032*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3345:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfb800007; valaddr_reg:x3; val_offset:10035*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10035*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3346:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfb80000f; valaddr_reg:x3; val_offset:10038*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10038*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3347:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfb80001f; valaddr_reg:x3; val_offset:10041*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10041*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3348:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfb80003f; valaddr_reg:x3; val_offset:10044*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10044*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3349:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfb80007f; valaddr_reg:x3; val_offset:10047*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10047*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3350:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfb8000ff; valaddr_reg:x3; val_offset:10050*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10050*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3351:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfb8001ff; valaddr_reg:x3; val_offset:10053*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10053*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3352:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfb8003ff; valaddr_reg:x3; val_offset:10056*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10056*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3353:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfb8007ff; valaddr_reg:x3; val_offset:10059*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10059*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3354:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfb800fff; valaddr_reg:x3; val_offset:10062*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10062*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3355:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfb801fff; valaddr_reg:x3; val_offset:10065*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10065*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3356:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfb803fff; valaddr_reg:x3; val_offset:10068*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10068*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3357:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfb807fff; valaddr_reg:x3; val_offset:10071*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10071*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3358:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfb80ffff; valaddr_reg:x3; val_offset:10074*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10074*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3359:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfb81ffff; valaddr_reg:x3; val_offset:10077*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10077*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3360:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfb83ffff; valaddr_reg:x3; val_offset:10080*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10080*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3361:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfb87ffff; valaddr_reg:x3; val_offset:10083*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10083*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3362:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfb8fffff; valaddr_reg:x3; val_offset:10086*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10086*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3363:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfb9fffff; valaddr_reg:x3; val_offset:10089*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10089*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3364:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfbbfffff; valaddr_reg:x3; val_offset:10092*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10092*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3365:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfbc00000; valaddr_reg:x3; val_offset:10095*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10095*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3366:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfbe00000; valaddr_reg:x3; val_offset:10098*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10098*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3367:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfbf00000; valaddr_reg:x3; val_offset:10101*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10101*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3368:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfbf80000; valaddr_reg:x3; val_offset:10104*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10104*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3369:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfbfc0000; valaddr_reg:x3; val_offset:10107*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10107*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3370:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfbfe0000; valaddr_reg:x3; val_offset:10110*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10110*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3371:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfbff0000; valaddr_reg:x3; val_offset:10113*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10113*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3372:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfbff8000; valaddr_reg:x3; val_offset:10116*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10116*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3373:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfbffc000; valaddr_reg:x3; val_offset:10119*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10119*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3374:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfbffe000; valaddr_reg:x3; val_offset:10122*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10122*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3375:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfbfff000; valaddr_reg:x3; val_offset:10125*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10125*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3376:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfbfff800; valaddr_reg:x3; val_offset:10128*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10128*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3377:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfbfffc00; valaddr_reg:x3; val_offset:10131*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10131*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3378:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfbfffe00; valaddr_reg:x3; val_offset:10134*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10134*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3379:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfbffff00; valaddr_reg:x3; val_offset:10137*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10137*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3380:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfbffff80; valaddr_reg:x3; val_offset:10140*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10140*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3381:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfbffffc0; valaddr_reg:x3; val_offset:10143*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10143*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3382:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfbffffe0; valaddr_reg:x3; val_offset:10146*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10146*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3383:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfbfffff0; valaddr_reg:x3; val_offset:10149*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10149*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3384:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfbfffff8; valaddr_reg:x3; val_offset:10152*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10152*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3385:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfbfffffc; valaddr_reg:x3; val_offset:10155*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10155*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3386:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfbfffffe; valaddr_reg:x3; val_offset:10158*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10158*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3387:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xfbffffff; valaddr_reg:x3; val_offset:10161*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10161*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3388:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xff000001; valaddr_reg:x3; val_offset:10164*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10164*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3389:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xff000003; valaddr_reg:x3; val_offset:10167*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10167*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3390:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xff000007; valaddr_reg:x3; val_offset:10170*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10170*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3391:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xff199999; valaddr_reg:x3; val_offset:10173*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10173*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3392:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xff249249; valaddr_reg:x3; val_offset:10176*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10176*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3393:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xff333333; valaddr_reg:x3; val_offset:10179*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10179*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3394:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:10182*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10182*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3395:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:10185*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10185*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3396:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xff444444; valaddr_reg:x3; val_offset:10188*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10188*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3397:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:10191*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10191*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3398:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:10194*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10194*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3399:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xff666666; valaddr_reg:x3; val_offset:10197*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10197*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3400:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:10200*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10200*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3401:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:10203*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10203*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3402:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:10206*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10206*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3403:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x10ccce and fs2 == 1 and fe2 == 0x82 and fm2 == 0x624c5b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d90ccce; op2val:0xc1624c5b;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:10209*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10209*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3404:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:10212*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10212*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3405:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:10215*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10215*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3406:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:10218*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10218*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3407:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:10221*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10221*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3408:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:10224*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10224*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3409:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:10227*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10227*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3410:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:10230*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10230*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3411:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:10233*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10233*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3412:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:10236*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10236*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3413:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:10239*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10239*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3414:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:10242*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10242*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3415:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:10245*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10245*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3416:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:10248*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10248*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3417:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:10251*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10251*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3418:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:10254*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10254*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3419:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:10257*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10257*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3420:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf000000; valaddr_reg:x3; val_offset:10260*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10260*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3421:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf000001; valaddr_reg:x3; val_offset:10263*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10263*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3422:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf000003; valaddr_reg:x3; val_offset:10266*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10266*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3423:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf000007; valaddr_reg:x3; val_offset:10269*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10269*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3424:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf00000f; valaddr_reg:x3; val_offset:10272*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10272*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3425:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf00001f; valaddr_reg:x3; val_offset:10275*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10275*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3426:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf00003f; valaddr_reg:x3; val_offset:10278*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10278*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3427:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf00007f; valaddr_reg:x3; val_offset:10281*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10281*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3428:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf0000ff; valaddr_reg:x3; val_offset:10284*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10284*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3429:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf0001ff; valaddr_reg:x3; val_offset:10287*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10287*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3430:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf0003ff; valaddr_reg:x3; val_offset:10290*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10290*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3431:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf0007ff; valaddr_reg:x3; val_offset:10293*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10293*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3432:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf000fff; valaddr_reg:x3; val_offset:10296*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10296*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3433:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf001fff; valaddr_reg:x3; val_offset:10299*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10299*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3434:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf003fff; valaddr_reg:x3; val_offset:10302*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10302*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3435:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf007fff; valaddr_reg:x3; val_offset:10305*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10305*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3436:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf00ffff; valaddr_reg:x3; val_offset:10308*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10308*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3437:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf01ffff; valaddr_reg:x3; val_offset:10311*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10311*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3438:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf03ffff; valaddr_reg:x3; val_offset:10314*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10314*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3439:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf07ffff; valaddr_reg:x3; val_offset:10317*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10317*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3440:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf0fffff; valaddr_reg:x3; val_offset:10320*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10320*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3441:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf1fffff; valaddr_reg:x3; val_offset:10323*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10323*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3442:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf3fffff; valaddr_reg:x3; val_offset:10326*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10326*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3443:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf400000; valaddr_reg:x3; val_offset:10329*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10329*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3444:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf600000; valaddr_reg:x3; val_offset:10332*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10332*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3445:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf700000; valaddr_reg:x3; val_offset:10335*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10335*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3446:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf780000; valaddr_reg:x3; val_offset:10338*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10338*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3447:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf7c0000; valaddr_reg:x3; val_offset:10341*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10341*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3448:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf7e0000; valaddr_reg:x3; val_offset:10344*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10344*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3449:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf7f0000; valaddr_reg:x3; val_offset:10347*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10347*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3450:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf7f8000; valaddr_reg:x3; val_offset:10350*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10350*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3451:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf7fc000; valaddr_reg:x3; val_offset:10353*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10353*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3452:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf7fe000; valaddr_reg:x3; val_offset:10356*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10356*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3453:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf7ff000; valaddr_reg:x3; val_offset:10359*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10359*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3454:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf7ff800; valaddr_reg:x3; val_offset:10362*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10362*0 + 3*26*FLEN/8, x4, x1, x2)

inst_3455:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf7ffc00; valaddr_reg:x3; val_offset:10365*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10365*0 + 3*26*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2106084384,32,FLEN)
NAN_BOXED(1097886300,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2106084384,32,FLEN)
NAN_BOXED(1097886300,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2106084384,32,FLEN)
NAN_BOXED(1097886300,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2106084384,32,FLEN)
NAN_BOXED(1097886300,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2106084384,32,FLEN)
NAN_BOXED(1097886300,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2106084384,32,FLEN)
NAN_BOXED(1097886300,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2106084384,32,FLEN)
NAN_BOXED(1097886300,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2106084384,32,FLEN)
NAN_BOXED(1097886300,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2106084384,32,FLEN)
NAN_BOXED(1097886300,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2106084384,32,FLEN)
NAN_BOXED(1097886300,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2106084384,32,FLEN)
NAN_BOXED(1097886300,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2106084384,32,FLEN)
NAN_BOXED(1097886300,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2106084384,32,FLEN)
NAN_BOXED(1097886300,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2106084384,32,FLEN)
NAN_BOXED(1097886300,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4219469824,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4219469825,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4219469827,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4219469831,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4219469839,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4219469855,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4219469887,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4219469951,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4219470079,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4219470335,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4219470847,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4219471871,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4219473919,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4219478015,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4219486207,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4219502591,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4219535359,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4219600895,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4219731967,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4219994111,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4220518399,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4221566975,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4223664127,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4223664128,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4225761280,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4226809856,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4227334144,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4227596288,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4227727360,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4227792896,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4227825664,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4227842048,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4227850240,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4227854336,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4227856384,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4227857408,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4227857920,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4227858176,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4227858304,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4227858368,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4227858400,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4227858416,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4227858424,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4227858428,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4227858430,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4227858431,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2106641614,32,FLEN)
NAN_BOXED(3244444763,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3204448256,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3204448257,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3204448259,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3204448263,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3204448271,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3204448287,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3204448319,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3204448383,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3204448511,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3204448767,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3204449279,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3204450303,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3204452351,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3204456447,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3204464639,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3204481023,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3204513791,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3204579327,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3204710399,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3204972543,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3205496831,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3206545407,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3208642559,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3208642560,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3210739712,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3211788288,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3212312576,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3212574720,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3212705792,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3212771328,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3212804096,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3212820480,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3212828672,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3212832768,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3212834816,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3212835840,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
