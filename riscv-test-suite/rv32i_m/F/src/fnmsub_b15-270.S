
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_34432:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xebfe0000; valaddr_reg:x3; val_offset:103296*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103296*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34433:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xebff0000; valaddr_reg:x3; val_offset:103299*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103299*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34434:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xebff8000; valaddr_reg:x3; val_offset:103302*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103302*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34435:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xebffc000; valaddr_reg:x3; val_offset:103305*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103305*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34436:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xebffe000; valaddr_reg:x3; val_offset:103308*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103308*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34437:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xebfff000; valaddr_reg:x3; val_offset:103311*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103311*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34438:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xebfff800; valaddr_reg:x3; val_offset:103314*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103314*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34439:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xebfffc00; valaddr_reg:x3; val_offset:103317*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103317*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xebfffe00; valaddr_reg:x3; val_offset:103320*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103320*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34441:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xebffff00; valaddr_reg:x3; val_offset:103323*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103323*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34442:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xebffff80; valaddr_reg:x3; val_offset:103326*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103326*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34443:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xebffffc0; valaddr_reg:x3; val_offset:103329*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103329*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34444:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xebffffe0; valaddr_reg:x3; val_offset:103332*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103332*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34445:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xebfffff0; valaddr_reg:x3; val_offset:103335*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103335*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34446:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xebfffff8; valaddr_reg:x3; val_offset:103338*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103338*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34447:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xebfffffc; valaddr_reg:x3; val_offset:103341*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103341*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34448:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xebfffffe; valaddr_reg:x3; val_offset:103344*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103344*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34449:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xebffffff; valaddr_reg:x3; val_offset:103347*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103347*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34450:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xff000001; valaddr_reg:x3; val_offset:103350*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103350*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34451:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xff000003; valaddr_reg:x3; val_offset:103353*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103353*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34452:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xff000007; valaddr_reg:x3; val_offset:103356*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103356*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34453:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xff199999; valaddr_reg:x3; val_offset:103359*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103359*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34454:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xff249249; valaddr_reg:x3; val_offset:103362*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103362*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xff333333; valaddr_reg:x3; val_offset:103365*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103365*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34456:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:103368*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103368*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34457:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:103371*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103371*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34458:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xff444444; valaddr_reg:x3; val_offset:103374*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103374*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34459:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:103377*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103377*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34460:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:103380*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103380*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34461:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xff666666; valaddr_reg:x3; val_offset:103383*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103383*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34462:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:103386*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103386*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34463:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:103389*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103389*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34464:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:103392*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103392*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34465:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cafdc and fs2 == 1 and fe2 == 0x7f and fm2 == 0x3dc0f5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cafdc; op2val:0xbfbdc0f5;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:103395*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103395*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34466:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaf800000; valaddr_reg:x3; val_offset:103398*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103398*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34467:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaf800001; valaddr_reg:x3; val_offset:103401*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103401*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34468:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaf800003; valaddr_reg:x3; val_offset:103404*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103404*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34469:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaf800007; valaddr_reg:x3; val_offset:103407*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103407*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34470:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaf80000f; valaddr_reg:x3; val_offset:103410*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103410*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34471:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaf80001f; valaddr_reg:x3; val_offset:103413*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103413*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34472:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaf80003f; valaddr_reg:x3; val_offset:103416*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103416*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34473:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaf80007f; valaddr_reg:x3; val_offset:103419*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103419*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34474:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaf8000ff; valaddr_reg:x3; val_offset:103422*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103422*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34475:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaf8001ff; valaddr_reg:x3; val_offset:103425*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103425*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34476:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaf8003ff; valaddr_reg:x3; val_offset:103428*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103428*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34477:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaf8007ff; valaddr_reg:x3; val_offset:103431*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103431*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34478:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaf800fff; valaddr_reg:x3; val_offset:103434*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103434*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34479:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaf801fff; valaddr_reg:x3; val_offset:103437*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103437*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34480:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaf803fff; valaddr_reg:x3; val_offset:103440*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103440*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34481:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaf807fff; valaddr_reg:x3; val_offset:103443*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103443*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34482:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaf80ffff; valaddr_reg:x3; val_offset:103446*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103446*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34483:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaf81ffff; valaddr_reg:x3; val_offset:103449*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103449*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34484:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaf83ffff; valaddr_reg:x3; val_offset:103452*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103452*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34485:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaf87ffff; valaddr_reg:x3; val_offset:103455*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103455*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34486:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaf8fffff; valaddr_reg:x3; val_offset:103458*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103458*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34487:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaf9fffff; valaddr_reg:x3; val_offset:103461*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103461*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34488:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xafbfffff; valaddr_reg:x3; val_offset:103464*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103464*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34489:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xafc00000; valaddr_reg:x3; val_offset:103467*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103467*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34490:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xafe00000; valaddr_reg:x3; val_offset:103470*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103470*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34491:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaff00000; valaddr_reg:x3; val_offset:103473*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103473*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34492:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaff80000; valaddr_reg:x3; val_offset:103476*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103476*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34493:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaffc0000; valaddr_reg:x3; val_offset:103479*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103479*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34494:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaffe0000; valaddr_reg:x3; val_offset:103482*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103482*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34495:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xafff0000; valaddr_reg:x3; val_offset:103485*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103485*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34496:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xafff8000; valaddr_reg:x3; val_offset:103488*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103488*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34497:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xafffc000; valaddr_reg:x3; val_offset:103491*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103491*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34498:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xafffe000; valaddr_reg:x3; val_offset:103494*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103494*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34499:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaffff000; valaddr_reg:x3; val_offset:103497*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103497*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34500:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaffff800; valaddr_reg:x3; val_offset:103500*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103500*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34501:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaffffc00; valaddr_reg:x3; val_offset:103503*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103503*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34502:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaffffe00; valaddr_reg:x3; val_offset:103506*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103506*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34503:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xafffff00; valaddr_reg:x3; val_offset:103509*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103509*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34504:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xafffff80; valaddr_reg:x3; val_offset:103512*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103512*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34505:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xafffffc0; valaddr_reg:x3; val_offset:103515*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103515*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34506:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xafffffe0; valaddr_reg:x3; val_offset:103518*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103518*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34507:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaffffff0; valaddr_reg:x3; val_offset:103521*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103521*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34508:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaffffff8; valaddr_reg:x3; val_offset:103524*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103524*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34509:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaffffffc; valaddr_reg:x3; val_offset:103527*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103527*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34510:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xaffffffe; valaddr_reg:x3; val_offset:103530*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103530*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34511:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xafffffff; valaddr_reg:x3; val_offset:103533*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103533*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34512:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xbf800001; valaddr_reg:x3; val_offset:103536*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103536*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34513:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xbf800003; valaddr_reg:x3; val_offset:103539*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103539*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34514:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xbf800007; valaddr_reg:x3; val_offset:103542*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103542*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34515:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xbf999999; valaddr_reg:x3; val_offset:103545*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103545*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34516:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:103548*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103548*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34517:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:103551*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103551*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34518:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:103554*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103554*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34519:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:103557*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103557*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34520:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:103560*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103560*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34521:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:103563*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103563*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34522:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:103566*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103566*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34523:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:103569*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103569*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34524:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:103572*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103572*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34525:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:103575*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103575*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34526:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:103578*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103578*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34527:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cbcd0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f6cae and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cbcd0; op2val:0x802f6cae;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:103581*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103581*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34528:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:103584*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103584*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34529:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:103587*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103587*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34530:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:103590*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103590*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34531:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:103593*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103593*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34532:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:103596*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103596*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34533:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:103599*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103599*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34534:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:103602*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103602*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34535:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:103605*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103605*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34536:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:103608*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103608*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34537:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:103611*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103611*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34538:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:103614*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103614*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34539:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:103617*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103617*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34540:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:103620*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103620*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34541:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:103623*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103623*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34542:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:103626*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103626*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34543:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:103629*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103629*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34544:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8d800000; valaddr_reg:x3; val_offset:103632*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103632*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34545:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8d800001; valaddr_reg:x3; val_offset:103635*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103635*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34546:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8d800003; valaddr_reg:x3; val_offset:103638*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103638*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34547:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8d800007; valaddr_reg:x3; val_offset:103641*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103641*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34548:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8d80000f; valaddr_reg:x3; val_offset:103644*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103644*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34549:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8d80001f; valaddr_reg:x3; val_offset:103647*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103647*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34550:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8d80003f; valaddr_reg:x3; val_offset:103650*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103650*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34551:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8d80007f; valaddr_reg:x3; val_offset:103653*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103653*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34552:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8d8000ff; valaddr_reg:x3; val_offset:103656*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103656*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34553:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8d8001ff; valaddr_reg:x3; val_offset:103659*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103659*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34554:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8d8003ff; valaddr_reg:x3; val_offset:103662*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103662*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34555:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8d8007ff; valaddr_reg:x3; val_offset:103665*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103665*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34556:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8d800fff; valaddr_reg:x3; val_offset:103668*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103668*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34557:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8d801fff; valaddr_reg:x3; val_offset:103671*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103671*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34558:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8d803fff; valaddr_reg:x3; val_offset:103674*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103674*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34559:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8d807fff; valaddr_reg:x3; val_offset:103677*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103677*0 + 3*269*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3959291904,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3959357440,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3959390208,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3959406592,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3959414784,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3959418880,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3959420928,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3959421952,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3959422464,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3959422720,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3959422848,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3959422912,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3959422944,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3959422960,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3959422968,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3959422972,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3959422974,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(3959422975,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2133635036,32,FLEN)
NAN_BOXED(3216883957,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2944401408,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2944401409,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2944401411,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2944401415,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2944401423,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2944401439,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2944401471,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2944401535,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2944401663,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2944401919,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2944402431,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2944403455,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2944405503,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2944409599,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2944417791,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2944434175,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2944466943,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2944532479,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2944663551,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2944925695,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2945449983,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2946498559,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2948595711,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2948595712,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2950692864,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2951741440,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2952265728,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2952527872,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2952658944,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2952724480,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2952757248,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2952773632,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2952781824,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2952785920,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2952787968,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2952788992,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2952789504,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2952789760,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2952789888,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2952789952,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2952789984,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2952790000,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2952790008,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2952790012,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2952790014,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(2952790015,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2133638352,32,FLEN)
NAN_BOXED(2150591662,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976064,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976065,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976067,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976071,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976079,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976095,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976127,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976191,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976319,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976575,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373977087,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373978111,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373980159,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373984255,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373992447,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374008831,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
