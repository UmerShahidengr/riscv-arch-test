
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_34560:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8d80ffff; valaddr_reg:x3; val_offset:103680*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103680*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34561:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8d81ffff; valaddr_reg:x3; val_offset:103683*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103683*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34562:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8d83ffff; valaddr_reg:x3; val_offset:103686*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103686*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34563:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8d87ffff; valaddr_reg:x3; val_offset:103689*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103689*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34564:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8d8fffff; valaddr_reg:x3; val_offset:103692*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103692*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34565:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8d9fffff; valaddr_reg:x3; val_offset:103695*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103695*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34566:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8dbfffff; valaddr_reg:x3; val_offset:103698*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103698*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34567:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8dc00000; valaddr_reg:x3; val_offset:103701*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103701*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34568:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8de00000; valaddr_reg:x3; val_offset:103704*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103704*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34569:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8df00000; valaddr_reg:x3; val_offset:103707*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103707*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34570:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8df80000; valaddr_reg:x3; val_offset:103710*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103710*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34571:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8dfc0000; valaddr_reg:x3; val_offset:103713*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103713*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34572:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8dfe0000; valaddr_reg:x3; val_offset:103716*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103716*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34573:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8dff0000; valaddr_reg:x3; val_offset:103719*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103719*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34574:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8dff8000; valaddr_reg:x3; val_offset:103722*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103722*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34575:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8dffc000; valaddr_reg:x3; val_offset:103725*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103725*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34576:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8dffe000; valaddr_reg:x3; val_offset:103728*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103728*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34577:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8dfff000; valaddr_reg:x3; val_offset:103731*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103731*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34578:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8dfff800; valaddr_reg:x3; val_offset:103734*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103734*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34579:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8dfffc00; valaddr_reg:x3; val_offset:103737*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103737*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34580:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8dfffe00; valaddr_reg:x3; val_offset:103740*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103740*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34581:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8dffff00; valaddr_reg:x3; val_offset:103743*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103743*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34582:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8dffff80; valaddr_reg:x3; val_offset:103746*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103746*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34583:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8dffffc0; valaddr_reg:x3; val_offset:103749*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103749*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34584:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8dffffe0; valaddr_reg:x3; val_offset:103752*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103752*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34585:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8dfffff0; valaddr_reg:x3; val_offset:103755*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103755*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34586:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8dfffff8; valaddr_reg:x3; val_offset:103758*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103758*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34587:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8dfffffc; valaddr_reg:x3; val_offset:103761*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103761*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34588:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8dfffffe; valaddr_reg:x3; val_offset:103764*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103764*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34589:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2cc100 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2cc100; op2val:0x80000000;
op3val:0x8dffffff; valaddr_reg:x3; val_offset:103767*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103767*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34590:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xad800000; valaddr_reg:x3; val_offset:103770*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103770*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34591:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xad800001; valaddr_reg:x3; val_offset:103773*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103773*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34592:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xad800003; valaddr_reg:x3; val_offset:103776*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103776*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34593:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xad800007; valaddr_reg:x3; val_offset:103779*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103779*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34594:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xad80000f; valaddr_reg:x3; val_offset:103782*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103782*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34595:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xad80001f; valaddr_reg:x3; val_offset:103785*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103785*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34596:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xad80003f; valaddr_reg:x3; val_offset:103788*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103788*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34597:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xad80007f; valaddr_reg:x3; val_offset:103791*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103791*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34598:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xad8000ff; valaddr_reg:x3; val_offset:103794*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103794*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34599:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xad8001ff; valaddr_reg:x3; val_offset:103797*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103797*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34600:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xad8003ff; valaddr_reg:x3; val_offset:103800*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103800*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34601:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xad8007ff; valaddr_reg:x3; val_offset:103803*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103803*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34602:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xad800fff; valaddr_reg:x3; val_offset:103806*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103806*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34603:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xad801fff; valaddr_reg:x3; val_offset:103809*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103809*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34604:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xad803fff; valaddr_reg:x3; val_offset:103812*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103812*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34605:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xad807fff; valaddr_reg:x3; val_offset:103815*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103815*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34606:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xad80ffff; valaddr_reg:x3; val_offset:103818*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103818*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34607:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xad81ffff; valaddr_reg:x3; val_offset:103821*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103821*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34608:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xad83ffff; valaddr_reg:x3; val_offset:103824*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103824*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34609:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xad87ffff; valaddr_reg:x3; val_offset:103827*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103827*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34610:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xad8fffff; valaddr_reg:x3; val_offset:103830*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103830*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34611:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xad9fffff; valaddr_reg:x3; val_offset:103833*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103833*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34612:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xadbfffff; valaddr_reg:x3; val_offset:103836*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103836*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34613:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xadc00000; valaddr_reg:x3; val_offset:103839*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103839*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34614:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xade00000; valaddr_reg:x3; val_offset:103842*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103842*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34615:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xadf00000; valaddr_reg:x3; val_offset:103845*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103845*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34616:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xadf80000; valaddr_reg:x3; val_offset:103848*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103848*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34617:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xadfc0000; valaddr_reg:x3; val_offset:103851*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103851*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34618:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xadfe0000; valaddr_reg:x3; val_offset:103854*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103854*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34619:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xadff0000; valaddr_reg:x3; val_offset:103857*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103857*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34620:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xadff8000; valaddr_reg:x3; val_offset:103860*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103860*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34621:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xadffc000; valaddr_reg:x3; val_offset:103863*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103863*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34622:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xadffe000; valaddr_reg:x3; val_offset:103866*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103866*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34623:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xadfff000; valaddr_reg:x3; val_offset:103869*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103869*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34624:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xadfff800; valaddr_reg:x3; val_offset:103872*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103872*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34625:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xadfffc00; valaddr_reg:x3; val_offset:103875*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103875*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34626:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xadfffe00; valaddr_reg:x3; val_offset:103878*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103878*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34627:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xadffff00; valaddr_reg:x3; val_offset:103881*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103881*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34628:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xadffff80; valaddr_reg:x3; val_offset:103884*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103884*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34629:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xadffffc0; valaddr_reg:x3; val_offset:103887*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103887*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34630:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xadffffe0; valaddr_reg:x3; val_offset:103890*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103890*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34631:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xadfffff0; valaddr_reg:x3; val_offset:103893*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103893*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34632:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xadfffff8; valaddr_reg:x3; val_offset:103896*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103896*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34633:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xadfffffc; valaddr_reg:x3; val_offset:103899*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103899*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34634:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xadfffffe; valaddr_reg:x3; val_offset:103902*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103902*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34635:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x5b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xadffffff; valaddr_reg:x3; val_offset:103905*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103905*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34636:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xbf800001; valaddr_reg:x3; val_offset:103908*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103908*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34637:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xbf800003; valaddr_reg:x3; val_offset:103911*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103911*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34638:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xbf800007; valaddr_reg:x3; val_offset:103914*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103914*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34639:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xbf999999; valaddr_reg:x3; val_offset:103917*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103917*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34640:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:103920*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103920*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34641:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:103923*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103923*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34642:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:103926*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103926*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34643:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:103929*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103929*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34644:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:103932*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103932*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34645:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:103935*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103935*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34646:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:103938*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103938*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34647:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:103941*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103941*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34648:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:103944*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103944*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34649:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:103947*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103947*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34650:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:103950*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103950*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34651:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d7e33 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2f37d2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d7e33; op2val:0x802f37d2;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:103953*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103953*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34652:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:103956*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103956*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34653:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:103959*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103959*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34654:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:103962*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103962*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34655:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:103965*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103965*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34656:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:103968*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103968*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34657:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:103971*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103971*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34658:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:103974*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103974*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34659:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:103977*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103977*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34660:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:103980*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103980*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34661:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:103983*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103983*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34662:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:103986*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103986*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34663:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:103989*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103989*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34664:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:103992*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103992*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34665:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:103995*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103995*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34666:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:103998*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103998*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34667:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:104001*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104001*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34668:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x85800000; valaddr_reg:x3; val_offset:104004*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104004*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34669:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x85800001; valaddr_reg:x3; val_offset:104007*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104007*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34670:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x85800003; valaddr_reg:x3; val_offset:104010*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104010*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34671:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x85800007; valaddr_reg:x3; val_offset:104013*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104013*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34672:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x8580000f; valaddr_reg:x3; val_offset:104016*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104016*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34673:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x8580001f; valaddr_reg:x3; val_offset:104019*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104019*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34674:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x8580003f; valaddr_reg:x3; val_offset:104022*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104022*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34675:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x8580007f; valaddr_reg:x3; val_offset:104025*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104025*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34676:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x858000ff; valaddr_reg:x3; val_offset:104028*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104028*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34677:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x858001ff; valaddr_reg:x3; val_offset:104031*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104031*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34678:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x858003ff; valaddr_reg:x3; val_offset:104034*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104034*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34679:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x858007ff; valaddr_reg:x3; val_offset:104037*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104037*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34680:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x85800fff; valaddr_reg:x3; val_offset:104040*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104040*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34681:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x85801fff; valaddr_reg:x3; val_offset:104043*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104043*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34682:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x85803fff; valaddr_reg:x3; val_offset:104046*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104046*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34683:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x85807fff; valaddr_reg:x3; val_offset:104049*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104049*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34684:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x8580ffff; valaddr_reg:x3; val_offset:104052*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104052*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34685:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x8581ffff; valaddr_reg:x3; val_offset:104055*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104055*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34686:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x8583ffff; valaddr_reg:x3; val_offset:104058*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104058*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34687:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d9b52 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d9b52; op2val:0x80000000;
op3val:0x8587ffff; valaddr_reg:x3; val_offset:104061*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104061*0 + 3*270*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374041599,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374107135,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374238207,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2374500351,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2375024639,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2376073215,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2378170367,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2378170368,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2380267520,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2381316096,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2381840384,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382102528,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382233600,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382299136,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382331904,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382348288,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382356480,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382360576,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382362624,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382363648,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364160,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364416,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364544,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364608,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364640,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364656,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364664,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364668,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364670,32,FLEN)
NAN_BOXED(2133639424,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364671,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2910846976,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2910846977,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2910846979,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2910846983,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2910846991,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2910847007,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2910847039,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2910847103,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2910847231,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2910847487,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2910847999,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2910849023,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2910851071,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2910855167,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2910863359,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2910879743,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2910912511,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2910978047,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2911109119,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2911371263,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2911895551,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2912944127,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2915041279,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2915041280,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2917138432,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2918187008,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2918711296,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2918973440,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2919104512,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2919170048,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2919202816,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2919219200,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2919227392,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2919231488,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2919233536,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2919234560,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2919235072,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2919235328,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2919235456,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2919235520,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2919235552,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2919235568,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2919235576,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2919235580,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2919235582,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(2919235583,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2133687859,32,FLEN)
NAN_BOXED(2150578130,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758336,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758337,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758339,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758343,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758351,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758367,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758399,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758463,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758591,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239758847,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239759359,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239760383,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239762431,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239766527,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239774719,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239791103,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239823871,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2239889407,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2240020479,32,FLEN)
NAN_BOXED(2133695314,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2240282623,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
