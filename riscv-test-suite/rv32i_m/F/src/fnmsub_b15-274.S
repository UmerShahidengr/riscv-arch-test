
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_34944:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb5ae and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3b8e8c and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eb5ae; op2val:0x3fbb8e8c;
op3val:0x62fffffe; valaddr_reg:x3; val_offset:104832*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104832*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34945:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb5ae and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3b8e8c and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eb5ae; op2val:0x3fbb8e8c;
op3val:0x62ffffff; valaddr_reg:x3; val_offset:104835*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104835*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34946:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb5ae and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3b8e8c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eb5ae; op2val:0x3fbb8e8c;
op3val:0x7f000001; valaddr_reg:x3; val_offset:104838*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104838*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34947:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb5ae and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3b8e8c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eb5ae; op2val:0x3fbb8e8c;
op3val:0x7f000003; valaddr_reg:x3; val_offset:104841*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104841*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34948:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb5ae and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3b8e8c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eb5ae; op2val:0x3fbb8e8c;
op3val:0x7f000007; valaddr_reg:x3; val_offset:104844*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104844*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34949:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb5ae and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3b8e8c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eb5ae; op2val:0x3fbb8e8c;
op3val:0x7f199999; valaddr_reg:x3; val_offset:104847*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104847*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34950:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb5ae and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3b8e8c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eb5ae; op2val:0x3fbb8e8c;
op3val:0x7f249249; valaddr_reg:x3; val_offset:104850*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104850*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb5ae and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3b8e8c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eb5ae; op2val:0x3fbb8e8c;
op3val:0x7f333333; valaddr_reg:x3; val_offset:104853*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104853*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34952:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb5ae and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3b8e8c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eb5ae; op2val:0x3fbb8e8c;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:104856*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104856*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb5ae and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3b8e8c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eb5ae; op2val:0x3fbb8e8c;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:104859*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104859*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34954:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb5ae and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3b8e8c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eb5ae; op2val:0x3fbb8e8c;
op3val:0x7f444444; valaddr_reg:x3; val_offset:104862*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104862*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb5ae and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3b8e8c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eb5ae; op2val:0x3fbb8e8c;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:104865*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104865*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34956:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb5ae and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3b8e8c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eb5ae; op2val:0x3fbb8e8c;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:104868*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104868*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb5ae and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3b8e8c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eb5ae; op2val:0x3fbb8e8c;
op3val:0x7f666666; valaddr_reg:x3; val_offset:104871*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104871*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34958:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb5ae and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3b8e8c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eb5ae; op2val:0x3fbb8e8c;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:104874*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104874*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb5ae and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3b8e8c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eb5ae; op2val:0x3fbb8e8c;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:104877*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104877*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34960:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb5ae and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3b8e8c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eb5ae; op2val:0x3fbb8e8c;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:104880*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104880*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb5ae and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3b8e8c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eb5ae; op2val:0x3fbb8e8c;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:104883*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104883*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x0; valaddr_reg:x3; val_offset:104886*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104886*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:104889*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104889*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:104892*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104892*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:104895*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104895*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:104898*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104898*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:104901*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104901*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34968:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:104904*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104904*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x7f; valaddr_reg:x3; val_offset:104907*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104907*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34970:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0xff; valaddr_reg:x3; val_offset:104910*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104910*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x1ff; valaddr_reg:x3; val_offset:104913*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104913*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x3ff; valaddr_reg:x3; val_offset:104916*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104916*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x7ff; valaddr_reg:x3; val_offset:104919*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104919*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0xfff; valaddr_reg:x3; val_offset:104922*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104922*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x1fff; valaddr_reg:x3; val_offset:104925*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104925*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x3fff; valaddr_reg:x3; val_offset:104928*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104928*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x7fff; valaddr_reg:x3; val_offset:104931*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104931*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0xffff; valaddr_reg:x3; val_offset:104934*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104934*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x1ffff; valaddr_reg:x3; val_offset:104937*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104937*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x3ffff; valaddr_reg:x3; val_offset:104940*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104940*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x7ffff; valaddr_reg:x3; val_offset:104943*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104943*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0xfffff; valaddr_reg:x3; val_offset:104946*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104946*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x1fffff; valaddr_reg:x3; val_offset:104949*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104949*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x3fffff; valaddr_reg:x3; val_offset:104952*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104952*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x400000; valaddr_reg:x3; val_offset:104955*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104955*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x600000; valaddr_reg:x3; val_offset:104958*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104958*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x700000; valaddr_reg:x3; val_offset:104961*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104961*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x780000; valaddr_reg:x3; val_offset:104964*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104964*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x7c0000; valaddr_reg:x3; val_offset:104967*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104967*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x7e0000; valaddr_reg:x3; val_offset:104970*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104970*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x7f0000; valaddr_reg:x3; val_offset:104973*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104973*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x7f8000; valaddr_reg:x3; val_offset:104976*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104976*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x7fc000; valaddr_reg:x3; val_offset:104979*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104979*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x7fe000; valaddr_reg:x3; val_offset:104982*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104982*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34995:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x7ff000; valaddr_reg:x3; val_offset:104985*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104985*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x7ff800; valaddr_reg:x3; val_offset:104988*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104988*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x7ffc00; valaddr_reg:x3; val_offset:104991*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104991*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x7ffe00; valaddr_reg:x3; val_offset:104994*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104994*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x7fff00; valaddr_reg:x3; val_offset:104997*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104997*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35000:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x7fff80; valaddr_reg:x3; val_offset:105000*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105000*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35001:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x7fffc0; valaddr_reg:x3; val_offset:105003*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105003*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35002:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x7fffe0; valaddr_reg:x3; val_offset:105006*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105006*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35003:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x7ffff0; valaddr_reg:x3; val_offset:105009*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105009*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35004:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:105012*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105012*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35005:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:105015*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105015*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35006:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:105018*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105018*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35007:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x7fffff; valaddr_reg:x3; val_offset:105021*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105021*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35008:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:105024*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105024*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35009:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:105027*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105027*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35010:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:105030*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105030*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35011:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:105033*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105033*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35012:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:105036*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105036*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35013:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:105039*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105039*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35014:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:105042*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105042*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35015:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:105045*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105045*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35016:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:105048*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105048*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35017:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:105051*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105051*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35018:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:105054*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105054*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35019:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:105057*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105057*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35020:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:105060*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105060*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35021:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:105063*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105063*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35022:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:105066*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105066*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35023:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2f70b1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2f70b1; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:105069*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105069*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35024:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x0; valaddr_reg:x3; val_offset:105072*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105072*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35025:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:105075*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105075*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35026:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:105078*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105078*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35027:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:105081*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105081*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35028:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:105084*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105084*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35029:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:105087*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105087*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35030:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:105090*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105090*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35031:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x7f; valaddr_reg:x3; val_offset:105093*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105093*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35032:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0xff; valaddr_reg:x3; val_offset:105096*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105096*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35033:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x1ff; valaddr_reg:x3; val_offset:105099*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105099*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35034:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x3ff; valaddr_reg:x3; val_offset:105102*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105102*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35035:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x7ff; valaddr_reg:x3; val_offset:105105*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105105*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35036:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0xfff; valaddr_reg:x3; val_offset:105108*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105108*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35037:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x1fff; valaddr_reg:x3; val_offset:105111*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105111*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35038:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x3fff; valaddr_reg:x3; val_offset:105114*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105114*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35039:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x7fff; valaddr_reg:x3; val_offset:105117*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105117*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35040:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0xffff; valaddr_reg:x3; val_offset:105120*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105120*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35041:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x1ffff; valaddr_reg:x3; val_offset:105123*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105123*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35042:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x3ffff; valaddr_reg:x3; val_offset:105126*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105126*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35043:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x7ffff; valaddr_reg:x3; val_offset:105129*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105129*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35044:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0xfffff; valaddr_reg:x3; val_offset:105132*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105132*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35045:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:105135*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105135*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35046:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x1fffff; valaddr_reg:x3; val_offset:105138*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105138*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35047:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:105141*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105141*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35048:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:105144*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105144*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35049:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:105147*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105147*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35050:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:105150*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105150*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35051:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x3fffff; valaddr_reg:x3; val_offset:105153*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105153*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35052:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x400000; valaddr_reg:x3; val_offset:105156*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105156*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35053:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:105159*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105159*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35054:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:105162*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105162*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35055:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:105165*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105165*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35056:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x600000; valaddr_reg:x3; val_offset:105168*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105168*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35057:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:105171*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105171*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35058:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:105174*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105174*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35059:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x700000; valaddr_reg:x3; val_offset:105177*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105177*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35060:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x780000; valaddr_reg:x3; val_offset:105180*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105180*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35061:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x7c0000; valaddr_reg:x3; val_offset:105183*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105183*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35062:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x7e0000; valaddr_reg:x3; val_offset:105186*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105186*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35063:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x7f0000; valaddr_reg:x3; val_offset:105189*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105189*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35064:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x7f8000; valaddr_reg:x3; val_offset:105192*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105192*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35065:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x7fc000; valaddr_reg:x3; val_offset:105195*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105195*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35066:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x7fe000; valaddr_reg:x3; val_offset:105198*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105198*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35067:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x7ff000; valaddr_reg:x3; val_offset:105201*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105201*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35068:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x7ff800; valaddr_reg:x3; val_offset:105204*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105204*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35069:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x7ffc00; valaddr_reg:x3; val_offset:105207*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105207*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35070:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x7ffe00; valaddr_reg:x3; val_offset:105210*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105210*0 + 3*273*FLEN/8, x4, x1, x2)

inst_35071:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2fdc84 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2fdc84; op2val:0x0;
op3val:0x7fff00; valaddr_reg:x3; val_offset:105213*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105213*0 + 3*273*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133767598,32,FLEN)
NAN_BOXED(1069256332,32,FLEN)
NAN_BOXED(1660944382,32,FLEN)
NAN_BOXED(2133767598,32,FLEN)
NAN_BOXED(1069256332,32,FLEN)
NAN_BOXED(1660944383,32,FLEN)
NAN_BOXED(2133767598,32,FLEN)
NAN_BOXED(1069256332,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2133767598,32,FLEN)
NAN_BOXED(1069256332,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2133767598,32,FLEN)
NAN_BOXED(1069256332,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2133767598,32,FLEN)
NAN_BOXED(1069256332,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2133767598,32,FLEN)
NAN_BOXED(1069256332,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2133767598,32,FLEN)
NAN_BOXED(1069256332,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2133767598,32,FLEN)
NAN_BOXED(1069256332,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2133767598,32,FLEN)
NAN_BOXED(1069256332,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2133767598,32,FLEN)
NAN_BOXED(1069256332,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2133767598,32,FLEN)
NAN_BOXED(1069256332,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2133767598,32,FLEN)
NAN_BOXED(1069256332,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2133767598,32,FLEN)
NAN_BOXED(1069256332,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2133767598,32,FLEN)
NAN_BOXED(1069256332,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2133767598,32,FLEN)
NAN_BOXED(1069256332,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2133767598,32,FLEN)
NAN_BOXED(1069256332,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2133767598,32,FLEN)
NAN_BOXED(1069256332,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(31,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(63,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(127,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(255,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(511,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1023,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2047,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4095,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8191,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16383,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(32767,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(65535,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(131071,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(262143,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(524287,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1048575,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097151,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4194303,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4194304,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6291456,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7340032,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7864320,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8126464,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8257536,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8323072,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8355840,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8372224,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8380416,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8384512,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8386560,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8387584,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388096,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388352,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388480,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388544,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388576,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388592,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2133815473,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(31,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(63,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(127,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(255,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(511,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1023,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2047,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4095,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8191,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16383,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(32767,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(65535,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(131071,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(262143,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(524287,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1048575,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2097151,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4194303,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4194304,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6291456,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7340032,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7864320,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8126464,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8257536,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8323072,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8355840,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8372224,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8380416,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8384512,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8386560,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8387584,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388096,32,FLEN)
NAN_BOXED(2133843076,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388352,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
