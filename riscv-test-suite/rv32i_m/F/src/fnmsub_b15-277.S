
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_35328:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xae800000; valaddr_reg:x3; val_offset:105984*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105984*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35329:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xae800001; valaddr_reg:x3; val_offset:105987*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105987*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35330:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xae800003; valaddr_reg:x3; val_offset:105990*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105990*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35331:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xae800007; valaddr_reg:x3; val_offset:105993*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105993*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35332:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xae80000f; valaddr_reg:x3; val_offset:105996*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105996*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35333:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xae80001f; valaddr_reg:x3; val_offset:105999*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105999*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35334:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xae80003f; valaddr_reg:x3; val_offset:106002*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106002*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35335:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xae80007f; valaddr_reg:x3; val_offset:106005*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106005*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35336:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xae8000ff; valaddr_reg:x3; val_offset:106008*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106008*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35337:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xae8001ff; valaddr_reg:x3; val_offset:106011*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106011*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35338:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xae8003ff; valaddr_reg:x3; val_offset:106014*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106014*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35339:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xae8007ff; valaddr_reg:x3; val_offset:106017*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106017*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35340:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xae800fff; valaddr_reg:x3; val_offset:106020*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106020*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35341:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xae801fff; valaddr_reg:x3; val_offset:106023*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106023*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35342:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xae803fff; valaddr_reg:x3; val_offset:106026*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106026*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35343:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xae807fff; valaddr_reg:x3; val_offset:106029*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106029*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35344:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xae80ffff; valaddr_reg:x3; val_offset:106032*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106032*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35345:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xae81ffff; valaddr_reg:x3; val_offset:106035*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106035*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35346:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xae83ffff; valaddr_reg:x3; val_offset:106038*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106038*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35347:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xae87ffff; valaddr_reg:x3; val_offset:106041*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106041*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35348:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xae8fffff; valaddr_reg:x3; val_offset:106044*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106044*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35349:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xae9fffff; valaddr_reg:x3; val_offset:106047*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106047*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35350:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xaebfffff; valaddr_reg:x3; val_offset:106050*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106050*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35351:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xaec00000; valaddr_reg:x3; val_offset:106053*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106053*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35352:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xaee00000; valaddr_reg:x3; val_offset:106056*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106056*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35353:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xaef00000; valaddr_reg:x3; val_offset:106059*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106059*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35354:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xaef80000; valaddr_reg:x3; val_offset:106062*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106062*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35355:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xaefc0000; valaddr_reg:x3; val_offset:106065*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106065*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35356:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xaefe0000; valaddr_reg:x3; val_offset:106068*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106068*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35357:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xaeff0000; valaddr_reg:x3; val_offset:106071*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106071*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35358:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xaeff8000; valaddr_reg:x3; val_offset:106074*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106074*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35359:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xaeffc000; valaddr_reg:x3; val_offset:106077*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106077*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35360:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xaeffe000; valaddr_reg:x3; val_offset:106080*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106080*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35361:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xaefff000; valaddr_reg:x3; val_offset:106083*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106083*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35362:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xaefff800; valaddr_reg:x3; val_offset:106086*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106086*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35363:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xaefffc00; valaddr_reg:x3; val_offset:106089*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106089*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35364:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xaefffe00; valaddr_reg:x3; val_offset:106092*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106092*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35365:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xaeffff00; valaddr_reg:x3; val_offset:106095*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106095*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35366:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xaeffff80; valaddr_reg:x3; val_offset:106098*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106098*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35367:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xaeffffc0; valaddr_reg:x3; val_offset:106101*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106101*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35368:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xaeffffe0; valaddr_reg:x3; val_offset:106104*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106104*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35369:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xaefffff0; valaddr_reg:x3; val_offset:106107*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106107*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35370:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xaefffff8; valaddr_reg:x3; val_offset:106110*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106110*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35371:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xaefffffc; valaddr_reg:x3; val_offset:106113*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106113*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35372:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xaefffffe; valaddr_reg:x3; val_offset:106116*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106116*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35373:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x5d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xaeffffff; valaddr_reg:x3; val_offset:106119*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106119*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35374:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xbf800001; valaddr_reg:x3; val_offset:106122*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106122*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35375:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xbf800003; valaddr_reg:x3; val_offset:106125*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106125*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35376:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xbf800007; valaddr_reg:x3; val_offset:106128*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106128*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35377:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xbf999999; valaddr_reg:x3; val_offset:106131*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106131*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35378:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:106134*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106134*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35379:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:106137*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106137*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35380:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:106140*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106140*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35381:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:106143*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106143*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35382:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:106146*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106146*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35383:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:106149*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106149*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35384:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:106152*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106152*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35385:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:106155*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106155*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35386:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:106158*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106158*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35387:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:106161*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106161*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35388:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:106164*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106164*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35389:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31614f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e2eed and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31614f; op2val:0x802e2eed;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:106167*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106167*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35390:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:106170*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106170*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35391:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:106173*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106173*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35392:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:106176*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106176*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35393:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:106179*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106179*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35394:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:106182*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106182*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35395:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:106185*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106185*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35396:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:106188*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106188*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35397:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:106191*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106191*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35398:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:106194*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106194*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35399:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:106197*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106197*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35400:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:106200*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106200*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35401:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:106203*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106203*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35402:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:106206*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106206*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35403:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:106209*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106209*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35404:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:106212*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106212*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35405:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:106215*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106215*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35406:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x1000000; valaddr_reg:x3; val_offset:106218*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106218*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35407:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x1000001; valaddr_reg:x3; val_offset:106221*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106221*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35408:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x1000003; valaddr_reg:x3; val_offset:106224*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106224*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35409:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x1000007; valaddr_reg:x3; val_offset:106227*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106227*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35410:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x100000f; valaddr_reg:x3; val_offset:106230*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106230*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35411:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x100001f; valaddr_reg:x3; val_offset:106233*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106233*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35412:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x100003f; valaddr_reg:x3; val_offset:106236*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106236*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35413:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x100007f; valaddr_reg:x3; val_offset:106239*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106239*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35414:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x10000ff; valaddr_reg:x3; val_offset:106242*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106242*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35415:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x10001ff; valaddr_reg:x3; val_offset:106245*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106245*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35416:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x10003ff; valaddr_reg:x3; val_offset:106248*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106248*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35417:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x10007ff; valaddr_reg:x3; val_offset:106251*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106251*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35418:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x1000fff; valaddr_reg:x3; val_offset:106254*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106254*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35419:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x1001fff; valaddr_reg:x3; val_offset:106257*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106257*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35420:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x1003fff; valaddr_reg:x3; val_offset:106260*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106260*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35421:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x1007fff; valaddr_reg:x3; val_offset:106263*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106263*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35422:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x100ffff; valaddr_reg:x3; val_offset:106266*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106266*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35423:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x101ffff; valaddr_reg:x3; val_offset:106269*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106269*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35424:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x103ffff; valaddr_reg:x3; val_offset:106272*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106272*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35425:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x107ffff; valaddr_reg:x3; val_offset:106275*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106275*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35426:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x10fffff; valaddr_reg:x3; val_offset:106278*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106278*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35427:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x11fffff; valaddr_reg:x3; val_offset:106281*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106281*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35428:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x13fffff; valaddr_reg:x3; val_offset:106284*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106284*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35429:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x1400000; valaddr_reg:x3; val_offset:106287*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106287*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35430:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x1600000; valaddr_reg:x3; val_offset:106290*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106290*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35431:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x1700000; valaddr_reg:x3; val_offset:106293*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106293*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35432:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x1780000; valaddr_reg:x3; val_offset:106296*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106296*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35433:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x17c0000; valaddr_reg:x3; val_offset:106299*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106299*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35434:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x17e0000; valaddr_reg:x3; val_offset:106302*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106302*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35435:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x17f0000; valaddr_reg:x3; val_offset:106305*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106305*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35436:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x17f8000; valaddr_reg:x3; val_offset:106308*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106308*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35437:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x17fc000; valaddr_reg:x3; val_offset:106311*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106311*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35438:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x17fe000; valaddr_reg:x3; val_offset:106314*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106314*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35439:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x17ff000; valaddr_reg:x3; val_offset:106317*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106317*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x17ff800; valaddr_reg:x3; val_offset:106320*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106320*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35441:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x17ffc00; valaddr_reg:x3; val_offset:106323*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106323*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35442:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x17ffe00; valaddr_reg:x3; val_offset:106326*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106326*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35443:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x17fff00; valaddr_reg:x3; val_offset:106329*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106329*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35444:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x17fff80; valaddr_reg:x3; val_offset:106332*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106332*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35445:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x17fffc0; valaddr_reg:x3; val_offset:106335*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106335*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35446:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x17fffe0; valaddr_reg:x3; val_offset:106338*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106338*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35447:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x17ffff0; valaddr_reg:x3; val_offset:106341*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106341*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35448:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x17ffff8; valaddr_reg:x3; val_offset:106344*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106344*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35449:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x17ffffc; valaddr_reg:x3; val_offset:106347*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106347*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35450:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x17ffffe; valaddr_reg:x3; val_offset:106350*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106350*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35451:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31651b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31651b; op2val:0x0;
op3val:0x17fffff; valaddr_reg:x3; val_offset:106353*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106353*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35452:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31c2a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31c2a9; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:106356*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106356*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35453:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31c2a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31c2a9; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:106359*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106359*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35454:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31c2a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31c2a9; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:106362*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106362*0 + 3*276*FLEN/8, x4, x1, x2)

inst_35455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31c2a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31c2a9; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:106365*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 106365*0 + 3*276*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2927624192,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2927624193,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2927624195,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2927624199,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2927624207,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2927624223,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2927624255,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2927624319,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2927624447,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2927624703,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2927625215,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2927626239,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2927628287,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2927632383,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2927640575,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2927656959,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2927689727,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2927755263,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2927886335,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2928148479,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2928672767,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2929721343,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2931818495,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2931818496,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2933915648,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2934964224,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2935488512,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2935750656,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2935881728,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2935947264,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2935980032,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2935996416,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2936004608,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2936008704,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2936010752,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2936011776,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2936012288,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2936012544,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2936012672,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2936012736,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2936012768,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2936012784,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2936012792,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2936012796,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2936012798,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(2936012799,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2133942607,32,FLEN)
NAN_BOXED(2150510317,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777216,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777217,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777219,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777223,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777231,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777247,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777279,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777343,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777471,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777727,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16778239,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16779263,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16781311,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16785407,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16793599,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16809983,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16842751,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16908287,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17039359,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17301503,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(17825791,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(18874367,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(20971519,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(20971520,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(23068672,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(24117248,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(24641536,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(24903680,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25034752,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25100288,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25133056,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25149440,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25157632,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25161728,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25163776,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25164800,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165312,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165568,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165696,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165760,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165792,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165808,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165816,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165820,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165822,32,FLEN)
NAN_BOXED(2133943579,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(25165823,32,FLEN)
NAN_BOXED(2133967529,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2133967529,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2133967529,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2133967529,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
