
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_3456:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf7ffe00; valaddr_reg:x3; val_offset:10368*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10368*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3457:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf7fff00; valaddr_reg:x3; val_offset:10371*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10371*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3458:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf7fff80; valaddr_reg:x3; val_offset:10374*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10374*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3459:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf7fffc0; valaddr_reg:x3; val_offset:10377*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10377*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3460:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf7fffe0; valaddr_reg:x3; val_offset:10380*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10380*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3461:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf7ffff0; valaddr_reg:x3; val_offset:10383*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10383*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3462:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf7ffff8; valaddr_reg:x3; val_offset:10386*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10386*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3463:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf7ffffc; valaddr_reg:x3; val_offset:10389*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10389*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3464:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf7ffffe; valaddr_reg:x3; val_offset:10392*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10392*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3465:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x15b097 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x7e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d95b097; op2val:0x80000000;
op3val:0xbf7fffff; valaddr_reg:x3; val_offset:10395*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10395*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3466:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x3f800001; valaddr_reg:x3; val_offset:10398*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10398*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3467:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x3f800003; valaddr_reg:x3; val_offset:10401*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10401*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3468:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x3f800007; valaddr_reg:x3; val_offset:10404*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10404*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3469:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x3f999999; valaddr_reg:x3; val_offset:10407*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10407*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3470:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:10410*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10410*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3471:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:10413*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10413*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3472:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:10416*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10416*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3473:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:10419*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10419*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3474:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:10422*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10422*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3475:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:10425*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10425*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3476:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:10428*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10428*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3477:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:10431*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10431*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3478:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:10434*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10434*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3479:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:10437*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10437*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3480:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:10440*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10440*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3481:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:10443*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10443*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3482:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45800000; valaddr_reg:x3; val_offset:10446*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10446*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3483:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45800001; valaddr_reg:x3; val_offset:10449*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10449*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3484:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45800003; valaddr_reg:x3; val_offset:10452*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10452*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3485:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45800007; valaddr_reg:x3; val_offset:10455*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10455*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3486:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x4580000f; valaddr_reg:x3; val_offset:10458*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10458*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3487:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x4580001f; valaddr_reg:x3; val_offset:10461*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10461*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3488:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x4580003f; valaddr_reg:x3; val_offset:10464*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10464*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3489:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x4580007f; valaddr_reg:x3; val_offset:10467*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10467*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3490:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x458000ff; valaddr_reg:x3; val_offset:10470*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10470*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3491:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x458001ff; valaddr_reg:x3; val_offset:10473*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10473*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3492:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x458003ff; valaddr_reg:x3; val_offset:10476*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10476*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3493:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x458007ff; valaddr_reg:x3; val_offset:10479*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10479*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3494:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45800fff; valaddr_reg:x3; val_offset:10482*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10482*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3495:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45801fff; valaddr_reg:x3; val_offset:10485*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10485*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3496:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45803fff; valaddr_reg:x3; val_offset:10488*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10488*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3497:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45807fff; valaddr_reg:x3; val_offset:10491*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10491*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3498:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x4580ffff; valaddr_reg:x3; val_offset:10494*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10494*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3499:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x4581ffff; valaddr_reg:x3; val_offset:10497*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10497*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3500:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x4583ffff; valaddr_reg:x3; val_offset:10500*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10500*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3501:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x4587ffff; valaddr_reg:x3; val_offset:10503*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10503*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3502:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x458fffff; valaddr_reg:x3; val_offset:10506*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10506*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3503:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x459fffff; valaddr_reg:x3; val_offset:10509*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10509*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3504:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45bfffff; valaddr_reg:x3; val_offset:10512*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10512*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3505:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45c00000; valaddr_reg:x3; val_offset:10515*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10515*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3506:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45e00000; valaddr_reg:x3; val_offset:10518*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10518*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3507:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45f00000; valaddr_reg:x3; val_offset:10521*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10521*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3508:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45f80000; valaddr_reg:x3; val_offset:10524*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10524*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3509:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45fc0000; valaddr_reg:x3; val_offset:10527*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10527*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3510:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45fe0000; valaddr_reg:x3; val_offset:10530*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10530*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3511:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45ff0000; valaddr_reg:x3; val_offset:10533*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10533*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3512:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45ff8000; valaddr_reg:x3; val_offset:10536*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10536*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3513:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45ffc000; valaddr_reg:x3; val_offset:10539*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10539*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3514:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45ffe000; valaddr_reg:x3; val_offset:10542*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10542*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3515:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45fff000; valaddr_reg:x3; val_offset:10545*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10545*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3516:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45fff800; valaddr_reg:x3; val_offset:10548*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10548*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3517:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45fffc00; valaddr_reg:x3; val_offset:10551*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10551*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3518:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45fffe00; valaddr_reg:x3; val_offset:10554*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10554*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3519:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45ffff00; valaddr_reg:x3; val_offset:10557*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10557*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3520:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45ffff80; valaddr_reg:x3; val_offset:10560*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10560*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3521:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45ffffc0; valaddr_reg:x3; val_offset:10563*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10563*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3522:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45ffffe0; valaddr_reg:x3; val_offset:10566*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10566*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3523:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45fffff0; valaddr_reg:x3; val_offset:10569*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10569*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3524:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45fffff8; valaddr_reg:x3; val_offset:10572*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10572*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3525:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45fffffc; valaddr_reg:x3; val_offset:10575*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10575*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3526:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45fffffe; valaddr_reg:x3; val_offset:10578*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10578*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3527:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x1c6dc8 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x5179b6 and fs3 == 0 and fe3 == 0x8b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d9c6dc8; op2val:0x15179b6;
op3val:0x45ffffff; valaddr_reg:x3; val_offset:10581*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10581*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3528:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:10584*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10584*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3529:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:10587*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10587*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3530:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:10590*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10590*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3531:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:10593*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10593*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3532:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:10596*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10596*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3533:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:10599*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10599*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3534:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:10602*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10602*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3535:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:10605*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10605*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3536:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:10608*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10608*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3537:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:10611*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10611*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3538:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:10614*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10614*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3539:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:10617*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10617*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3540:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:10620*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10620*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3541:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:10623*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10623*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3542:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:10626*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10626*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3543:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:10629*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10629*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3544:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x86000000; valaddr_reg:x3; val_offset:10632*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10632*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3545:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x86000001; valaddr_reg:x3; val_offset:10635*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10635*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3546:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x86000003; valaddr_reg:x3; val_offset:10638*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10638*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3547:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x86000007; valaddr_reg:x3; val_offset:10641*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10641*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3548:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x8600000f; valaddr_reg:x3; val_offset:10644*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10644*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3549:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x8600001f; valaddr_reg:x3; val_offset:10647*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10647*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3550:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x8600003f; valaddr_reg:x3; val_offset:10650*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10650*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3551:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x8600007f; valaddr_reg:x3; val_offset:10653*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10653*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3552:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x860000ff; valaddr_reg:x3; val_offset:10656*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10656*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3553:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x860001ff; valaddr_reg:x3; val_offset:10659*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10659*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3554:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x860003ff; valaddr_reg:x3; val_offset:10662*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10662*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3555:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x860007ff; valaddr_reg:x3; val_offset:10665*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10665*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3556:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x86000fff; valaddr_reg:x3; val_offset:10668*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10668*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3557:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x86001fff; valaddr_reg:x3; val_offset:10671*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10671*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3558:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x86003fff; valaddr_reg:x3; val_offset:10674*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10674*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3559:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x86007fff; valaddr_reg:x3; val_offset:10677*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10677*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3560:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x8600ffff; valaddr_reg:x3; val_offset:10680*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10680*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3561:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x8601ffff; valaddr_reg:x3; val_offset:10683*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10683*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3562:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x8603ffff; valaddr_reg:x3; val_offset:10686*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10686*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3563:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x8607ffff; valaddr_reg:x3; val_offset:10689*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10689*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3564:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x860fffff; valaddr_reg:x3; val_offset:10692*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10692*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3565:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x861fffff; valaddr_reg:x3; val_offset:10695*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10695*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3566:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x863fffff; valaddr_reg:x3; val_offset:10698*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10698*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3567:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x86400000; valaddr_reg:x3; val_offset:10701*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10701*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3568:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x86600000; valaddr_reg:x3; val_offset:10704*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10704*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3569:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x86700000; valaddr_reg:x3; val_offset:10707*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10707*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3570:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x86780000; valaddr_reg:x3; val_offset:10710*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10710*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3571:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x867c0000; valaddr_reg:x3; val_offset:10713*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10713*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3572:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x867e0000; valaddr_reg:x3; val_offset:10716*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10716*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3573:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x867f0000; valaddr_reg:x3; val_offset:10719*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10719*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3574:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x867f8000; valaddr_reg:x3; val_offset:10722*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10722*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3575:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x867fc000; valaddr_reg:x3; val_offset:10725*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10725*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3576:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x867fe000; valaddr_reg:x3; val_offset:10728*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10728*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3577:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x867ff000; valaddr_reg:x3; val_offset:10731*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10731*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3578:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x867ff800; valaddr_reg:x3; val_offset:10734*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10734*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3579:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x867ffc00; valaddr_reg:x3; val_offset:10737*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10737*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3580:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x867ffe00; valaddr_reg:x3; val_offset:10740*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10740*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3581:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x867fff00; valaddr_reg:x3; val_offset:10743*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10743*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3582:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x867fff80; valaddr_reg:x3; val_offset:10746*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10746*0 + 3*27*FLEN/8, x4, x1, x2)

inst_3583:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x23f553 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da3f553; op2val:0x80000000;
op3val:0x867fffc0; valaddr_reg:x3; val_offset:10749*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 10749*0 + 3*27*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3212836352,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3212836608,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3212836736,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3212836800,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3212836832,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3212836848,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3212836856,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3212836860,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3212836862,32,FLEN)
NAN_BOXED(2106962071,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(3212836863,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1166016512,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1166016513,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1166016515,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1166016519,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1166016527,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1166016543,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1166016575,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1166016639,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1166016767,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1166017023,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1166017535,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1166018559,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1166020607,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1166024703,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1166032895,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1166049279,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1166082047,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1166147583,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1166278655,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1166540799,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1167065087,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1168113663,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1170210815,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1170210816,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1172307968,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1173356544,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1173880832,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1174142976,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1174274048,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1174339584,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1174372352,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1174388736,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1174396928,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1174401024,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1174403072,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1174404096,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1174404608,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1174404864,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1174404992,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1174405056,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1174405088,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1174405104,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1174405112,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1174405116,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1174405118,32,FLEN)
NAN_BOXED(2107403720,32,FLEN)
NAN_BOXED(22116790,32,FLEN)
NAN_BOXED(1174405119,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146944,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146945,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146947,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146951,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146959,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146975,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248147007,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248147071,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248147199,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248147455,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248147967,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248148991,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248151039,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248155135,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248163327,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248179711,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248212479,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248278015,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248409087,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248671231,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2249195519,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2250244095,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2252341247,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2252341248,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2254438400,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2255486976,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256011264,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256273408,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256404480,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256470016,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256502784,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256519168,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256527360,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256531456,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256533504,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256534528,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535040,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535296,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535424,32,FLEN)
NAN_BOXED(2107897171,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2256535488,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
