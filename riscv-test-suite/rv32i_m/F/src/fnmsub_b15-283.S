
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_36096:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x88000ff; valaddr_reg:x3; val_offset:108288*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108288*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36097:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x88001ff; valaddr_reg:x3; val_offset:108291*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108291*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36098:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x88003ff; valaddr_reg:x3; val_offset:108294*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108294*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36099:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x88007ff; valaddr_reg:x3; val_offset:108297*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108297*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x8800fff; valaddr_reg:x3; val_offset:108300*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108300*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x8801fff; valaddr_reg:x3; val_offset:108303*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108303*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x8803fff; valaddr_reg:x3; val_offset:108306*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108306*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x8807fff; valaddr_reg:x3; val_offset:108309*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108309*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x880ffff; valaddr_reg:x3; val_offset:108312*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108312*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x881ffff; valaddr_reg:x3; val_offset:108315*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108315*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x883ffff; valaddr_reg:x3; val_offset:108318*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108318*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x887ffff; valaddr_reg:x3; val_offset:108321*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108321*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x88fffff; valaddr_reg:x3; val_offset:108324*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108324*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x89fffff; valaddr_reg:x3; val_offset:108327*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108327*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x8bfffff; valaddr_reg:x3; val_offset:108330*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108330*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x8c00000; valaddr_reg:x3; val_offset:108333*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108333*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x8e00000; valaddr_reg:x3; val_offset:108336*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108336*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x8f00000; valaddr_reg:x3; val_offset:108339*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108339*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x8f80000; valaddr_reg:x3; val_offset:108342*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108342*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x8fc0000; valaddr_reg:x3; val_offset:108345*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108345*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x8fe0000; valaddr_reg:x3; val_offset:108348*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108348*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x8ff0000; valaddr_reg:x3; val_offset:108351*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108351*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x8ff8000; valaddr_reg:x3; val_offset:108354*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108354*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x8ffc000; valaddr_reg:x3; val_offset:108357*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108357*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x8ffe000; valaddr_reg:x3; val_offset:108360*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108360*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x8fff000; valaddr_reg:x3; val_offset:108363*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108363*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x8fff800; valaddr_reg:x3; val_offset:108366*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108366*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x8fffc00; valaddr_reg:x3; val_offset:108369*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108369*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x8fffe00; valaddr_reg:x3; val_offset:108372*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108372*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x8ffff00; valaddr_reg:x3; val_offset:108375*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108375*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x8ffff80; valaddr_reg:x3; val_offset:108378*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108378*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x8ffffc0; valaddr_reg:x3; val_offset:108381*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108381*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x8ffffe0; valaddr_reg:x3; val_offset:108384*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108384*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x8fffff0; valaddr_reg:x3; val_offset:108387*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108387*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x8fffff8; valaddr_reg:x3; val_offset:108390*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108390*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x8fffffc; valaddr_reg:x3; val_offset:108393*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108393*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x8fffffe; valaddr_reg:x3; val_offset:108396*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108396*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x344cc5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x11 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f344cc5; op2val:0x0;
op3val:0x8ffffff; valaddr_reg:x3; val_offset:108399*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108399*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e000000; valaddr_reg:x3; val_offset:108402*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108402*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e000001; valaddr_reg:x3; val_offset:108405*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108405*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e000003; valaddr_reg:x3; val_offset:108408*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108408*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e000007; valaddr_reg:x3; val_offset:108411*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108411*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e00000f; valaddr_reg:x3; val_offset:108414*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108414*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e00001f; valaddr_reg:x3; val_offset:108417*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108417*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e00003f; valaddr_reg:x3; val_offset:108420*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108420*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e00007f; valaddr_reg:x3; val_offset:108423*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108423*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e0000ff; valaddr_reg:x3; val_offset:108426*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108426*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e0001ff; valaddr_reg:x3; val_offset:108429*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108429*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e0003ff; valaddr_reg:x3; val_offset:108432*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108432*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e0007ff; valaddr_reg:x3; val_offset:108435*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108435*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e000fff; valaddr_reg:x3; val_offset:108438*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108438*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e001fff; valaddr_reg:x3; val_offset:108441*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108441*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e003fff; valaddr_reg:x3; val_offset:108444*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108444*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e007fff; valaddr_reg:x3; val_offset:108447*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108447*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e00ffff; valaddr_reg:x3; val_offset:108450*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108450*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e01ffff; valaddr_reg:x3; val_offset:108453*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108453*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e03ffff; valaddr_reg:x3; val_offset:108456*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108456*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e07ffff; valaddr_reg:x3; val_offset:108459*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108459*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e0fffff; valaddr_reg:x3; val_offset:108462*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108462*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e1fffff; valaddr_reg:x3; val_offset:108465*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108465*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e3fffff; valaddr_reg:x3; val_offset:108468*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108468*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e400000; valaddr_reg:x3; val_offset:108471*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108471*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e600000; valaddr_reg:x3; val_offset:108474*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108474*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e700000; valaddr_reg:x3; val_offset:108477*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108477*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e780000; valaddr_reg:x3; val_offset:108480*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108480*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e7c0000; valaddr_reg:x3; val_offset:108483*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108483*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e7e0000; valaddr_reg:x3; val_offset:108486*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108486*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e7f0000; valaddr_reg:x3; val_offset:108489*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108489*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e7f8000; valaddr_reg:x3; val_offset:108492*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108492*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e7fc000; valaddr_reg:x3; val_offset:108495*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108495*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36166:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e7fe000; valaddr_reg:x3; val_offset:108498*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108498*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e7ff000; valaddr_reg:x3; val_offset:108501*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108501*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e7ff800; valaddr_reg:x3; val_offset:108504*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108504*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e7ffc00; valaddr_reg:x3; val_offset:108507*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108507*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e7ffe00; valaddr_reg:x3; val_offset:108510*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108510*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e7fff00; valaddr_reg:x3; val_offset:108513*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108513*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e7fff80; valaddr_reg:x3; val_offset:108516*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108516*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e7fffc0; valaddr_reg:x3; val_offset:108519*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108519*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e7fffe0; valaddr_reg:x3; val_offset:108522*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108522*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e7ffff0; valaddr_reg:x3; val_offset:108525*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108525*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e7ffff8; valaddr_reg:x3; val_offset:108528*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108528*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e7ffffc; valaddr_reg:x3; val_offset:108531*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108531*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e7ffffe; valaddr_reg:x3; val_offset:108534*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108534*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x5c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x2e7fffff; valaddr_reg:x3; val_offset:108537*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108537*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x3f800001; valaddr_reg:x3; val_offset:108540*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108540*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x3f800003; valaddr_reg:x3; val_offset:108543*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108543*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x3f800007; valaddr_reg:x3; val_offset:108546*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108546*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x3f999999; valaddr_reg:x3; val_offset:108549*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108549*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36184:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:108552*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108552*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36185:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:108555*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108555*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36186:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:108558*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108558*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36187:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:108561*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108561*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:108564*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108564*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:108567*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108567*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:108570*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108570*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:108573*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108573*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36192:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:108576*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108576*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36193:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:108579*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108579*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36194:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:108582*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108582*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36195:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x34996a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2d5c2f and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f34996a; op2val:0x2d5c2f;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:108585*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108585*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36196:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa4000000; valaddr_reg:x3; val_offset:108588*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108588*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa4000001; valaddr_reg:x3; val_offset:108591*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108591*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa4000003; valaddr_reg:x3; val_offset:108594*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108594*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36199:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa4000007; valaddr_reg:x3; val_offset:108597*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108597*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36200:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa400000f; valaddr_reg:x3; val_offset:108600*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108600*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36201:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa400001f; valaddr_reg:x3; val_offset:108603*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108603*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36202:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa400003f; valaddr_reg:x3; val_offset:108606*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108606*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36203:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa400007f; valaddr_reg:x3; val_offset:108609*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108609*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36204:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa40000ff; valaddr_reg:x3; val_offset:108612*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108612*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36205:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa40001ff; valaddr_reg:x3; val_offset:108615*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108615*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36206:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa40003ff; valaddr_reg:x3; val_offset:108618*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108618*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36207:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa40007ff; valaddr_reg:x3; val_offset:108621*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108621*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36208:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa4000fff; valaddr_reg:x3; val_offset:108624*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108624*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36209:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa4001fff; valaddr_reg:x3; val_offset:108627*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108627*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36210:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa4003fff; valaddr_reg:x3; val_offset:108630*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108630*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36211:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa4007fff; valaddr_reg:x3; val_offset:108633*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108633*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36212:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa400ffff; valaddr_reg:x3; val_offset:108636*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108636*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36213:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa401ffff; valaddr_reg:x3; val_offset:108639*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108639*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36214:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa403ffff; valaddr_reg:x3; val_offset:108642*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108642*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36215:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa407ffff; valaddr_reg:x3; val_offset:108645*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108645*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36216:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa40fffff; valaddr_reg:x3; val_offset:108648*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108648*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36217:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa41fffff; valaddr_reg:x3; val_offset:108651*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108651*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36218:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa43fffff; valaddr_reg:x3; val_offset:108654*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108654*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36219:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa4400000; valaddr_reg:x3; val_offset:108657*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108657*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36220:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa4600000; valaddr_reg:x3; val_offset:108660*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108660*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36221:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa4700000; valaddr_reg:x3; val_offset:108663*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108663*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36222:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa4780000; valaddr_reg:x3; val_offset:108666*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108666*0 + 3*282*FLEN/8, x4, x1, x2)

inst_36223:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa47c0000; valaddr_reg:x3; val_offset:108669*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108669*0 + 3*282*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606591,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606847,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142607359,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142608383,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142610431,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142614527,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142622719,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142639103,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142671871,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142737407,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142868479,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(143130623,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(143654911,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(144703487,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(146800639,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(146800640,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(148897792,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(149946368,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150470656,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150732800,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150863872,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150929408,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150962176,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150978560,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150986752,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150990848,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150992896,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150993920,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994432,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994688,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994816,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994880,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994912,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994928,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994936,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994940,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994942,32,FLEN)
NAN_BOXED(2134133957,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(150994943,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(771751936,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(771751937,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(771751939,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(771751943,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(771751951,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(771751967,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(771751999,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(771752063,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(771752191,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(771752447,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(771752959,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(771753983,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(771756031,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(771760127,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(771768319,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(771784703,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(771817471,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(771883007,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(772014079,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(772276223,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(772800511,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(773849087,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(775946239,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(775946240,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(778043392,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(779091968,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(779616256,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(779878400,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(780009472,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(780075008,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(780107776,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(780124160,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(780132352,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(780136448,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(780138496,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(780139520,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(780140032,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(780140288,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(780140416,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(780140480,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(780140512,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(780140528,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(780140536,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(780140540,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(780140542,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(780140543,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2134153578,32,FLEN)
NAN_BOXED(2972719,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2751463424,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2751463425,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2751463427,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2751463431,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2751463439,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2751463455,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2751463487,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2751463551,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2751463679,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2751463935,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2751464447,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2751465471,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2751467519,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2751471615,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2751479807,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2751496191,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2751528959,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2751594495,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2751725567,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2751987711,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2752511999,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2753560575,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2755657727,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2755657728,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2757754880,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2758803456,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2759327744,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2759589888,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
