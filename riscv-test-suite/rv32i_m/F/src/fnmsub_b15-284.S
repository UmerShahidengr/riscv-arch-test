
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_36224:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa47e0000; valaddr_reg:x3; val_offset:108672*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108672*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36225:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa47f0000; valaddr_reg:x3; val_offset:108675*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108675*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36226:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa47f8000; valaddr_reg:x3; val_offset:108678*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108678*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36227:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa47fc000; valaddr_reg:x3; val_offset:108681*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108681*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36228:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa47fe000; valaddr_reg:x3; val_offset:108684*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108684*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36229:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa47ff000; valaddr_reg:x3; val_offset:108687*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108687*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa47ff800; valaddr_reg:x3; val_offset:108690*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108690*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa47ffc00; valaddr_reg:x3; val_offset:108693*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108693*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa47ffe00; valaddr_reg:x3; val_offset:108696*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108696*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa47fff00; valaddr_reg:x3; val_offset:108699*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108699*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa47fff80; valaddr_reg:x3; val_offset:108702*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108702*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa47fffc0; valaddr_reg:x3; val_offset:108705*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108705*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa47fffe0; valaddr_reg:x3; val_offset:108708*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108708*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa47ffff0; valaddr_reg:x3; val_offset:108711*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108711*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa47ffff8; valaddr_reg:x3; val_offset:108714*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108714*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa47ffffc; valaddr_reg:x3; val_offset:108717*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108717*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa47ffffe; valaddr_reg:x3; val_offset:108720*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108720*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x48 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xa47fffff; valaddr_reg:x3; val_offset:108723*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108723*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xbf800001; valaddr_reg:x3; val_offset:108726*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108726*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xbf800003; valaddr_reg:x3; val_offset:108729*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108729*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xbf800007; valaddr_reg:x3; val_offset:108732*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108732*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36245:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xbf999999; valaddr_reg:x3; val_offset:108735*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108735*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:108738*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108738*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:108741*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108741*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:108744*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108744*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:108747*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108747*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:108750*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108750*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:108753*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108753*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:108756*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108756*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:108759*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108759*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:108762*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108762*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:108765*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108765*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36256:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:108768*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108768*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36257:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x351b7f and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2d3b9a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f351b7f; op2val:0x802d3b9a;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:108771*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108771*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36258:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:108774*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108774*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36259:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:108777*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108777*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36260:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:108780*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108780*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36261:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:108783*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108783*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36262:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:108786*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108786*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36263:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:108789*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108789*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36264:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:108792*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108792*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36265:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:108795*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108795*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36266:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:108798*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108798*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36267:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:108801*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108801*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36268:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:108804*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108804*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36269:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:108807*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108807*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36270:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:108810*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108810*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36271:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:108813*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108813*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36272:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:108816*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108816*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36273:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:108819*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108819*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36274:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xd800000; valaddr_reg:x3; val_offset:108822*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108822*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36275:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xd800001; valaddr_reg:x3; val_offset:108825*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108825*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36276:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xd800003; valaddr_reg:x3; val_offset:108828*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108828*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36277:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xd800007; valaddr_reg:x3; val_offset:108831*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108831*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36278:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xd80000f; valaddr_reg:x3; val_offset:108834*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108834*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36279:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xd80001f; valaddr_reg:x3; val_offset:108837*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108837*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36280:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xd80003f; valaddr_reg:x3; val_offset:108840*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108840*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36281:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xd80007f; valaddr_reg:x3; val_offset:108843*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108843*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36282:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xd8000ff; valaddr_reg:x3; val_offset:108846*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108846*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36283:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xd8001ff; valaddr_reg:x3; val_offset:108849*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108849*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36284:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xd8003ff; valaddr_reg:x3; val_offset:108852*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108852*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36285:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xd8007ff; valaddr_reg:x3; val_offset:108855*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108855*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36286:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xd800fff; valaddr_reg:x3; val_offset:108858*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108858*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36287:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xd801fff; valaddr_reg:x3; val_offset:108861*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108861*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36288:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xd803fff; valaddr_reg:x3; val_offset:108864*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108864*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36289:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xd807fff; valaddr_reg:x3; val_offset:108867*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108867*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36290:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xd80ffff; valaddr_reg:x3; val_offset:108870*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108870*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36291:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xd81ffff; valaddr_reg:x3; val_offset:108873*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108873*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36292:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xd83ffff; valaddr_reg:x3; val_offset:108876*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108876*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36293:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xd87ffff; valaddr_reg:x3; val_offset:108879*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108879*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36294:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xd8fffff; valaddr_reg:x3; val_offset:108882*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108882*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36295:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xd9fffff; valaddr_reg:x3; val_offset:108885*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108885*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36296:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xdbfffff; valaddr_reg:x3; val_offset:108888*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108888*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36297:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xdc00000; valaddr_reg:x3; val_offset:108891*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108891*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36298:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xde00000; valaddr_reg:x3; val_offset:108894*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108894*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36299:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xdf00000; valaddr_reg:x3; val_offset:108897*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108897*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36300:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xdf80000; valaddr_reg:x3; val_offset:108900*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108900*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36301:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xdfc0000; valaddr_reg:x3; val_offset:108903*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108903*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36302:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xdfe0000; valaddr_reg:x3; val_offset:108906*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108906*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36303:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xdff0000; valaddr_reg:x3; val_offset:108909*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108909*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36304:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xdff8000; valaddr_reg:x3; val_offset:108912*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108912*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36305:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xdffc000; valaddr_reg:x3; val_offset:108915*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108915*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36306:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xdffe000; valaddr_reg:x3; val_offset:108918*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108918*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36307:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xdfff000; valaddr_reg:x3; val_offset:108921*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108921*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36308:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xdfff800; valaddr_reg:x3; val_offset:108924*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108924*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36309:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xdfffc00; valaddr_reg:x3; val_offset:108927*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108927*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36310:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xdfffe00; valaddr_reg:x3; val_offset:108930*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108930*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36311:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xdffff00; valaddr_reg:x3; val_offset:108933*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108933*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36312:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xdffff80; valaddr_reg:x3; val_offset:108936*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108936*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36313:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xdffffc0; valaddr_reg:x3; val_offset:108939*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108939*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36314:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xdffffe0; valaddr_reg:x3; val_offset:108942*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108942*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36315:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xdfffff0; valaddr_reg:x3; val_offset:108945*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108945*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36316:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xdfffff8; valaddr_reg:x3; val_offset:108948*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108948*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36317:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xdfffffc; valaddr_reg:x3; val_offset:108951*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108951*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36318:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xdfffffe; valaddr_reg:x3; val_offset:108954*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108954*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36319:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x354a49 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f354a49; op2val:0x0;
op3val:0xdffffff; valaddr_reg:x3; val_offset:108957*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108957*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36320:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:108960*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108960*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36321:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:108963*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108963*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36322:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:108966*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108966*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36323:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:108969*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108969*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36324:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:108972*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108972*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36325:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:108975*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108975*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36326:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:108978*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108978*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36327:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:108981*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108981*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36328:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:108984*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108984*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36329:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:108987*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108987*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36330:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:108990*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108990*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36331:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:108993*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108993*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36332:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:108996*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108996*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36333:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:108999*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108999*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36334:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:109002*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109002*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36335:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:109005*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109005*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36336:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0xf000000; valaddr_reg:x3; val_offset:109008*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109008*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36337:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0xf000001; valaddr_reg:x3; val_offset:109011*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109011*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36338:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0xf000003; valaddr_reg:x3; val_offset:109014*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109014*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36339:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0xf000007; valaddr_reg:x3; val_offset:109017*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109017*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36340:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0xf00000f; valaddr_reg:x3; val_offset:109020*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109020*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36341:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0xf00001f; valaddr_reg:x3; val_offset:109023*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109023*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36342:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0xf00003f; valaddr_reg:x3; val_offset:109026*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109026*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36343:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0xf00007f; valaddr_reg:x3; val_offset:109029*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109029*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36344:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0xf0000ff; valaddr_reg:x3; val_offset:109032*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109032*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36345:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0xf0001ff; valaddr_reg:x3; val_offset:109035*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109035*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36346:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0xf0003ff; valaddr_reg:x3; val_offset:109038*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109038*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36347:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0xf0007ff; valaddr_reg:x3; val_offset:109041*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109041*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36348:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0xf000fff; valaddr_reg:x3; val_offset:109044*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109044*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36349:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0xf001fff; valaddr_reg:x3; val_offset:109047*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109047*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36350:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0xf003fff; valaddr_reg:x3; val_offset:109050*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109050*0 + 3*283*FLEN/8, x4, x1, x2)

inst_36351:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x355590 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f355590; op2val:0x0;
op3val:0xf007fff; valaddr_reg:x3; val_offset:109053*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109053*0 + 3*283*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2759720960,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2759786496,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2759819264,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2759835648,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2759843840,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2759847936,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2759849984,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2759851008,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2759851520,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2759851776,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2759851904,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2759851968,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2759852000,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2759852016,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2759852024,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2759852028,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2759852030,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(2759852031,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2134186879,32,FLEN)
NAN_BOXED(2150448026,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492416,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492417,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492419,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492423,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492431,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492447,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492479,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492543,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492671,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226492927,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226493439,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226494463,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226496511,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226500607,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226508799,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226525183,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226557951,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226623487,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(226754559,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(227016703,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(227540991,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(228589567,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(230686719,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(230686720,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(232783872,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(233832448,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234356736,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234618880,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234749952,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234815488,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234848256,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234864640,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234872832,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234876928,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234878976,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880000,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880512,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880768,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880896,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880960,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234880992,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881008,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881016,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881020,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881022,32,FLEN)
NAN_BOXED(2134198857,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(234881023,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658240,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658241,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658243,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658247,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658255,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658271,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658303,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658367,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658495,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251658751,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251659263,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251660287,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251662335,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251666431,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251674623,32,FLEN)
NAN_BOXED(2134201744,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(251691007,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
