
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_36480:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35c5b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3444ff and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f35c5b2; op2val:0x3fb444ff;
op3val:0x77fffe00; valaddr_reg:x3; val_offset:109440*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109440*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36481:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35c5b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3444ff and fs3 == 0 and fe3 == 0xef and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f35c5b2; op2val:0x3fb444ff;
op3val:0x77ffff00; valaddr_reg:x3; val_offset:109443*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109443*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36482:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35c5b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3444ff and fs3 == 0 and fe3 == 0xef and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f35c5b2; op2val:0x3fb444ff;
op3val:0x77ffff80; valaddr_reg:x3; val_offset:109446*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109446*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36483:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35c5b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3444ff and fs3 == 0 and fe3 == 0xef and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f35c5b2; op2val:0x3fb444ff;
op3val:0x77ffffc0; valaddr_reg:x3; val_offset:109449*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109449*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36484:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35c5b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3444ff and fs3 == 0 and fe3 == 0xef and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f35c5b2; op2val:0x3fb444ff;
op3val:0x77ffffe0; valaddr_reg:x3; val_offset:109452*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109452*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36485:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35c5b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3444ff and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f35c5b2; op2val:0x3fb444ff;
op3val:0x77fffff0; valaddr_reg:x3; val_offset:109455*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109455*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36486:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35c5b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3444ff and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f35c5b2; op2val:0x3fb444ff;
op3val:0x77fffff8; valaddr_reg:x3; val_offset:109458*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109458*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36487:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35c5b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3444ff and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f35c5b2; op2val:0x3fb444ff;
op3val:0x77fffffc; valaddr_reg:x3; val_offset:109461*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109461*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36488:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35c5b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3444ff and fs3 == 0 and fe3 == 0xef and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f35c5b2; op2val:0x3fb444ff;
op3val:0x77fffffe; valaddr_reg:x3; val_offset:109464*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109464*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36489:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35c5b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3444ff and fs3 == 0 and fe3 == 0xef and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f35c5b2; op2val:0x3fb444ff;
op3val:0x77ffffff; valaddr_reg:x3; val_offset:109467*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109467*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36490:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35c5b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3444ff and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f35c5b2; op2val:0x3fb444ff;
op3val:0x7f000001; valaddr_reg:x3; val_offset:109470*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109470*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36491:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35c5b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3444ff and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f35c5b2; op2val:0x3fb444ff;
op3val:0x7f000003; valaddr_reg:x3; val_offset:109473*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109473*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36492:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35c5b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3444ff and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f35c5b2; op2val:0x3fb444ff;
op3val:0x7f000007; valaddr_reg:x3; val_offset:109476*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109476*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36493:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35c5b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3444ff and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f35c5b2; op2val:0x3fb444ff;
op3val:0x7f199999; valaddr_reg:x3; val_offset:109479*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109479*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36494:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35c5b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3444ff and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f35c5b2; op2val:0x3fb444ff;
op3val:0x7f249249; valaddr_reg:x3; val_offset:109482*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109482*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36495:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35c5b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3444ff and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f35c5b2; op2val:0x3fb444ff;
op3val:0x7f333333; valaddr_reg:x3; val_offset:109485*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109485*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36496:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35c5b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3444ff and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f35c5b2; op2val:0x3fb444ff;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:109488*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109488*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36497:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35c5b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3444ff and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f35c5b2; op2val:0x3fb444ff;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:109491*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109491*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36498:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35c5b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3444ff and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f35c5b2; op2val:0x3fb444ff;
op3val:0x7f444444; valaddr_reg:x3; val_offset:109494*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109494*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36499:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35c5b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3444ff and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f35c5b2; op2val:0x3fb444ff;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:109497*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109497*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36500:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35c5b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3444ff and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f35c5b2; op2val:0x3fb444ff;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:109500*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109500*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36501:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35c5b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3444ff and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f35c5b2; op2val:0x3fb444ff;
op3val:0x7f666666; valaddr_reg:x3; val_offset:109503*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109503*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36502:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35c5b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3444ff and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f35c5b2; op2val:0x3fb444ff;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:109506*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109506*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36503:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35c5b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3444ff and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f35c5b2; op2val:0x3fb444ff;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:109509*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109509*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36504:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35c5b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3444ff and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f35c5b2; op2val:0x3fb444ff;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:109512*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109512*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36505:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35c5b2 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x3444ff and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f35c5b2; op2val:0x3fb444ff;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:109515*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109515*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36506:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa6000000; valaddr_reg:x3; val_offset:109518*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109518*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36507:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa6000001; valaddr_reg:x3; val_offset:109521*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109521*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36508:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa6000003; valaddr_reg:x3; val_offset:109524*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109524*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36509:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa6000007; valaddr_reg:x3; val_offset:109527*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109527*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36510:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa600000f; valaddr_reg:x3; val_offset:109530*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109530*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36511:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa600001f; valaddr_reg:x3; val_offset:109533*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109533*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36512:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa600003f; valaddr_reg:x3; val_offset:109536*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109536*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36513:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa600007f; valaddr_reg:x3; val_offset:109539*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109539*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36514:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa60000ff; valaddr_reg:x3; val_offset:109542*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109542*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36515:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa60001ff; valaddr_reg:x3; val_offset:109545*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109545*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36516:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa60003ff; valaddr_reg:x3; val_offset:109548*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109548*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36517:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa60007ff; valaddr_reg:x3; val_offset:109551*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109551*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36518:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa6000fff; valaddr_reg:x3; val_offset:109554*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109554*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36519:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa6001fff; valaddr_reg:x3; val_offset:109557*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109557*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36520:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa6003fff; valaddr_reg:x3; val_offset:109560*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109560*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36521:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa6007fff; valaddr_reg:x3; val_offset:109563*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109563*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36522:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa600ffff; valaddr_reg:x3; val_offset:109566*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109566*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36523:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa601ffff; valaddr_reg:x3; val_offset:109569*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109569*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36524:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa603ffff; valaddr_reg:x3; val_offset:109572*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109572*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36525:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa607ffff; valaddr_reg:x3; val_offset:109575*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109575*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36526:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa60fffff; valaddr_reg:x3; val_offset:109578*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109578*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36527:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa61fffff; valaddr_reg:x3; val_offset:109581*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109581*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36528:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa63fffff; valaddr_reg:x3; val_offset:109584*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109584*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36529:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa6400000; valaddr_reg:x3; val_offset:109587*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109587*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36530:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa6600000; valaddr_reg:x3; val_offset:109590*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109590*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36531:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa6700000; valaddr_reg:x3; val_offset:109593*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109593*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36532:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa6780000; valaddr_reg:x3; val_offset:109596*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109596*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36533:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa67c0000; valaddr_reg:x3; val_offset:109599*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109599*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36534:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa67e0000; valaddr_reg:x3; val_offset:109602*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109602*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36535:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa67f0000; valaddr_reg:x3; val_offset:109605*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109605*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36536:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa67f8000; valaddr_reg:x3; val_offset:109608*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109608*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36537:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa67fc000; valaddr_reg:x3; val_offset:109611*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109611*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36538:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa67fe000; valaddr_reg:x3; val_offset:109614*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109614*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36539:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa67ff000; valaddr_reg:x3; val_offset:109617*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109617*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36540:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa67ff800; valaddr_reg:x3; val_offset:109620*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109620*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36541:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa67ffc00; valaddr_reg:x3; val_offset:109623*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109623*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36542:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa67ffe00; valaddr_reg:x3; val_offset:109626*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109626*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36543:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa67fff00; valaddr_reg:x3; val_offset:109629*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109629*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36544:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa67fff80; valaddr_reg:x3; val_offset:109632*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109632*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36545:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa67fffc0; valaddr_reg:x3; val_offset:109635*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109635*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36546:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa67fffe0; valaddr_reg:x3; val_offset:109638*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109638*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36547:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa67ffff0; valaddr_reg:x3; val_offset:109641*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109641*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36548:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa67ffff8; valaddr_reg:x3; val_offset:109644*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109644*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36549:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa67ffffc; valaddr_reg:x3; val_offset:109647*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109647*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36550:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa67ffffe; valaddr_reg:x3; val_offset:109650*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109650*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36551:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x4c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xa67fffff; valaddr_reg:x3; val_offset:109653*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109653*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36552:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xbf800001; valaddr_reg:x3; val_offset:109656*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109656*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36553:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xbf800003; valaddr_reg:x3; val_offset:109659*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109659*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36554:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xbf800007; valaddr_reg:x3; val_offset:109662*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109662*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36555:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xbf999999; valaddr_reg:x3; val_offset:109665*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109665*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36556:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:109668*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109668*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36557:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:109671*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109671*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36558:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:109674*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109674*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36559:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:109677*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109677*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36560:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:109680*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109680*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36561:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:109683*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109683*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36562:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:109686*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109686*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36563:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:109689*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109689*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36564:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:109692*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109692*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36565:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:109695*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109695*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36566:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:109698*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109698*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36567:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x366e51 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2ce798 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f366e51; op2val:0x802ce798;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:109701*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109701*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36568:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:109704*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109704*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36569:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:109707*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109707*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36570:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:109710*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109710*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36571:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:109713*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109713*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36572:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:109716*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109716*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36573:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:109719*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109719*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36574:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:109722*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109722*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36575:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:109725*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109725*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36576:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:109728*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109728*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36577:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:109731*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109731*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36578:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:109734*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109734*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36579:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:109737*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109737*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36580:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:109740*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109740*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36581:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:109743*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109743*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36582:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:109746*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109746*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36583:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:109749*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109749*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36584:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x800000; valaddr_reg:x3; val_offset:109752*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109752*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36585:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:109755*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109755*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36586:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:109758*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109758*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36587:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:109761*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109761*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36588:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x80000f; valaddr_reg:x3; val_offset:109764*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109764*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36589:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x80001f; valaddr_reg:x3; val_offset:109767*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109767*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36590:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x80003f; valaddr_reg:x3; val_offset:109770*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109770*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36591:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x80007f; valaddr_reg:x3; val_offset:109773*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109773*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36592:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x8000ff; valaddr_reg:x3; val_offset:109776*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109776*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36593:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x8001ff; valaddr_reg:x3; val_offset:109779*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109779*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36594:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x8003ff; valaddr_reg:x3; val_offset:109782*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109782*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36595:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x8007ff; valaddr_reg:x3; val_offset:109785*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109785*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36596:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x800fff; valaddr_reg:x3; val_offset:109788*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109788*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36597:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x801fff; valaddr_reg:x3; val_offset:109791*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109791*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36598:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x803fff; valaddr_reg:x3; val_offset:109794*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109794*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36599:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x807fff; valaddr_reg:x3; val_offset:109797*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109797*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36600:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x80ffff; valaddr_reg:x3; val_offset:109800*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109800*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36601:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x81ffff; valaddr_reg:x3; val_offset:109803*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109803*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36602:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x83ffff; valaddr_reg:x3; val_offset:109806*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109806*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36603:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x87ffff; valaddr_reg:x3; val_offset:109809*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109809*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36604:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x8fffff; valaddr_reg:x3; val_offset:109812*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109812*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36605:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0x9fffff; valaddr_reg:x3; val_offset:109815*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109815*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36606:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0xbfffff; valaddr_reg:x3; val_offset:109818*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109818*0 + 3*285*FLEN/8, x4, x1, x2)

inst_36607:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36749a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36749a; op2val:0x0;
op3val:0xc00000; valaddr_reg:x3; val_offset:109821*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 109821*0 + 3*285*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134230450,32,FLEN)
NAN_BOXED(1068778751,32,FLEN)
NAN_BOXED(2013265408,32,FLEN)
NAN_BOXED(2134230450,32,FLEN)
NAN_BOXED(1068778751,32,FLEN)
NAN_BOXED(2013265664,32,FLEN)
NAN_BOXED(2134230450,32,FLEN)
NAN_BOXED(1068778751,32,FLEN)
NAN_BOXED(2013265792,32,FLEN)
NAN_BOXED(2134230450,32,FLEN)
NAN_BOXED(1068778751,32,FLEN)
NAN_BOXED(2013265856,32,FLEN)
NAN_BOXED(2134230450,32,FLEN)
NAN_BOXED(1068778751,32,FLEN)
NAN_BOXED(2013265888,32,FLEN)
NAN_BOXED(2134230450,32,FLEN)
NAN_BOXED(1068778751,32,FLEN)
NAN_BOXED(2013265904,32,FLEN)
NAN_BOXED(2134230450,32,FLEN)
NAN_BOXED(1068778751,32,FLEN)
NAN_BOXED(2013265912,32,FLEN)
NAN_BOXED(2134230450,32,FLEN)
NAN_BOXED(1068778751,32,FLEN)
NAN_BOXED(2013265916,32,FLEN)
NAN_BOXED(2134230450,32,FLEN)
NAN_BOXED(1068778751,32,FLEN)
NAN_BOXED(2013265918,32,FLEN)
NAN_BOXED(2134230450,32,FLEN)
NAN_BOXED(1068778751,32,FLEN)
NAN_BOXED(2013265919,32,FLEN)
NAN_BOXED(2134230450,32,FLEN)
NAN_BOXED(1068778751,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2134230450,32,FLEN)
NAN_BOXED(1068778751,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2134230450,32,FLEN)
NAN_BOXED(1068778751,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2134230450,32,FLEN)
NAN_BOXED(1068778751,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2134230450,32,FLEN)
NAN_BOXED(1068778751,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2134230450,32,FLEN)
NAN_BOXED(1068778751,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2134230450,32,FLEN)
NAN_BOXED(1068778751,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2134230450,32,FLEN)
NAN_BOXED(1068778751,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2134230450,32,FLEN)
NAN_BOXED(1068778751,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2134230450,32,FLEN)
NAN_BOXED(1068778751,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2134230450,32,FLEN)
NAN_BOXED(1068778751,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2134230450,32,FLEN)
NAN_BOXED(1068778751,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2134230450,32,FLEN)
NAN_BOXED(1068778751,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2134230450,32,FLEN)
NAN_BOXED(1068778751,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2134230450,32,FLEN)
NAN_BOXED(1068778751,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2134230450,32,FLEN)
NAN_BOXED(1068778751,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2785017856,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2785017857,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2785017859,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2785017863,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2785017871,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2785017887,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2785017919,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2785017983,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2785018111,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2785018367,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2785018879,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2785019903,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2785021951,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2785026047,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2785034239,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2785050623,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2785083391,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2785148927,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2785279999,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2785542143,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2786066431,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2787115007,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2789212159,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2789212160,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2791309312,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2792357888,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2792882176,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2793144320,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2793275392,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2793340928,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2793373696,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2793390080,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2793398272,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2793402368,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2793404416,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2793405440,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2793405952,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2793406208,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2793406336,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2793406400,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2793406432,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2793406448,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2793406456,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2793406460,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2793406462,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(2793406463,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2134273617,32,FLEN)
NAN_BOXED(2150426520,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388608,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388623,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388639,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388671,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388735,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388863,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8389119,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8389631,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8390655,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8392703,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8396799,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8404991,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8421375,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8454143,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8519679,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8650751,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8912895,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(9437183,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10485759,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12582911,32,FLEN)
NAN_BOXED(2134275226,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12582912,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
