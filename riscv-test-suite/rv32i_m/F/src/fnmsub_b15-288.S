
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_36736:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36dceb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36dceb; op2val:0x80000000;
op3val:0x82fe0000; valaddr_reg:x3; val_offset:110208*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110208*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36737:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36dceb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36dceb; op2val:0x80000000;
op3val:0x82ff0000; valaddr_reg:x3; val_offset:110211*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110211*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36738:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36dceb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36dceb; op2val:0x80000000;
op3val:0x82ff8000; valaddr_reg:x3; val_offset:110214*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110214*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36739:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36dceb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36dceb; op2val:0x80000000;
op3val:0x82ffc000; valaddr_reg:x3; val_offset:110217*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110217*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36740:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36dceb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36dceb; op2val:0x80000000;
op3val:0x82ffe000; valaddr_reg:x3; val_offset:110220*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110220*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36741:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36dceb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36dceb; op2val:0x80000000;
op3val:0x82fff000; valaddr_reg:x3; val_offset:110223*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110223*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36742:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36dceb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36dceb; op2val:0x80000000;
op3val:0x82fff800; valaddr_reg:x3; val_offset:110226*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110226*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36743:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36dceb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36dceb; op2val:0x80000000;
op3val:0x82fffc00; valaddr_reg:x3; val_offset:110229*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110229*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36744:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36dceb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36dceb; op2val:0x80000000;
op3val:0x82fffe00; valaddr_reg:x3; val_offset:110232*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110232*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36745:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36dceb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36dceb; op2val:0x80000000;
op3val:0x82ffff00; valaddr_reg:x3; val_offset:110235*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110235*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36746:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36dceb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36dceb; op2val:0x80000000;
op3val:0x82ffff80; valaddr_reg:x3; val_offset:110238*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110238*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36747:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36dceb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36dceb; op2val:0x80000000;
op3val:0x82ffffc0; valaddr_reg:x3; val_offset:110241*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110241*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36748:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36dceb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36dceb; op2val:0x80000000;
op3val:0x82ffffe0; valaddr_reg:x3; val_offset:110244*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110244*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36749:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36dceb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36dceb; op2val:0x80000000;
op3val:0x82fffff0; valaddr_reg:x3; val_offset:110247*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110247*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36750:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36dceb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36dceb; op2val:0x80000000;
op3val:0x82fffff8; valaddr_reg:x3; val_offset:110250*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110250*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36751:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36dceb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36dceb; op2val:0x80000000;
op3val:0x82fffffc; valaddr_reg:x3; val_offset:110253*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110253*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36752:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36dceb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36dceb; op2val:0x80000000;
op3val:0x82fffffe; valaddr_reg:x3; val_offset:110256*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110256*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36753:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x36dceb and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f36dceb; op2val:0x80000000;
op3val:0x82ffffff; valaddr_reg:x3; val_offset:110259*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110259*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36754:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:110262*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110262*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36755:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:110265*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110265*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36756:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:110268*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110268*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36757:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:110271*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110271*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36758:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:110274*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110274*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36759:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:110277*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110277*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36760:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:110280*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110280*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36761:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:110283*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110283*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36762:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:110286*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110286*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36763:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:110289*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110289*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36764:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:110292*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110292*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36765:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:110295*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110295*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36766:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:110298*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110298*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36767:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:110301*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110301*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36768:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:110304*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110304*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36769:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:110307*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110307*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36770:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa000000; valaddr_reg:x3; val_offset:110310*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110310*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36771:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa000001; valaddr_reg:x3; val_offset:110313*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110313*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36772:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa000003; valaddr_reg:x3; val_offset:110316*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110316*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36773:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa000007; valaddr_reg:x3; val_offset:110319*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110319*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36774:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa00000f; valaddr_reg:x3; val_offset:110322*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110322*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36775:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa00001f; valaddr_reg:x3; val_offset:110325*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110325*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36776:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa00003f; valaddr_reg:x3; val_offset:110328*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110328*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36777:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa00007f; valaddr_reg:x3; val_offset:110331*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110331*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36778:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa0000ff; valaddr_reg:x3; val_offset:110334*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110334*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36779:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa0001ff; valaddr_reg:x3; val_offset:110337*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110337*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36780:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa0003ff; valaddr_reg:x3; val_offset:110340*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110340*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36781:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa0007ff; valaddr_reg:x3; val_offset:110343*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110343*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36782:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa000fff; valaddr_reg:x3; val_offset:110346*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110346*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36783:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa001fff; valaddr_reg:x3; val_offset:110349*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110349*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36784:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa003fff; valaddr_reg:x3; val_offset:110352*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110352*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36785:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa007fff; valaddr_reg:x3; val_offset:110355*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110355*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36786:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa00ffff; valaddr_reg:x3; val_offset:110358*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110358*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36787:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa01ffff; valaddr_reg:x3; val_offset:110361*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110361*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36788:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa03ffff; valaddr_reg:x3; val_offset:110364*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110364*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36789:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa07ffff; valaddr_reg:x3; val_offset:110367*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110367*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36790:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa0fffff; valaddr_reg:x3; val_offset:110370*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110370*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36791:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa1fffff; valaddr_reg:x3; val_offset:110373*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110373*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36792:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa3fffff; valaddr_reg:x3; val_offset:110376*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110376*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa400000; valaddr_reg:x3; val_offset:110379*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110379*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36794:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa600000; valaddr_reg:x3; val_offset:110382*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110382*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa700000; valaddr_reg:x3; val_offset:110385*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110385*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36796:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa780000; valaddr_reg:x3; val_offset:110388*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110388*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa7c0000; valaddr_reg:x3; val_offset:110391*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110391*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36798:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa7e0000; valaddr_reg:x3; val_offset:110394*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110394*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa7f0000; valaddr_reg:x3; val_offset:110397*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110397*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36800:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa7f8000; valaddr_reg:x3; val_offset:110400*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110400*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36801:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa7fc000; valaddr_reg:x3; val_offset:110403*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110403*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36802:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa7fe000; valaddr_reg:x3; val_offset:110406*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110406*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36803:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa7ff000; valaddr_reg:x3; val_offset:110409*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110409*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36804:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa7ff800; valaddr_reg:x3; val_offset:110412*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110412*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa7ffc00; valaddr_reg:x3; val_offset:110415*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110415*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36806:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa7ffe00; valaddr_reg:x3; val_offset:110418*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110418*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36807:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa7fff00; valaddr_reg:x3; val_offset:110421*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110421*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36808:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa7fff80; valaddr_reg:x3; val_offset:110424*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110424*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36809:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa7fffc0; valaddr_reg:x3; val_offset:110427*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110427*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36810:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa7fffe0; valaddr_reg:x3; val_offset:110430*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110430*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa7ffff0; valaddr_reg:x3; val_offset:110433*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110433*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36812:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa7ffff8; valaddr_reg:x3; val_offset:110436*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110436*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa7ffffc; valaddr_reg:x3; val_offset:110439*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110439*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa7ffffe; valaddr_reg:x3; val_offset:110442*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110442*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x37d6e4 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x14 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f37d6e4; op2val:0x0;
op3val:0xa7fffff; valaddr_reg:x3; val_offset:110445*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110445*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29800000; valaddr_reg:x3; val_offset:110448*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110448*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29800001; valaddr_reg:x3; val_offset:110451*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110451*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36818:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29800003; valaddr_reg:x3; val_offset:110454*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110454*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29800007; valaddr_reg:x3; val_offset:110457*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110457*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36820:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x2980000f; valaddr_reg:x3; val_offset:110460*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110460*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x2980001f; valaddr_reg:x3; val_offset:110463*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110463*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x2980003f; valaddr_reg:x3; val_offset:110466*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110466*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x2980007f; valaddr_reg:x3; val_offset:110469*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110469*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x298000ff; valaddr_reg:x3; val_offset:110472*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110472*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x298001ff; valaddr_reg:x3; val_offset:110475*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110475*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36826:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x298003ff; valaddr_reg:x3; val_offset:110478*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110478*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x298007ff; valaddr_reg:x3; val_offset:110481*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110481*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36828:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29800fff; valaddr_reg:x3; val_offset:110484*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110484*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29801fff; valaddr_reg:x3; val_offset:110487*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110487*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36830:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29803fff; valaddr_reg:x3; val_offset:110490*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110490*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29807fff; valaddr_reg:x3; val_offset:110493*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110493*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36832:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x2980ffff; valaddr_reg:x3; val_offset:110496*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110496*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x2981ffff; valaddr_reg:x3; val_offset:110499*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110499*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36834:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x2983ffff; valaddr_reg:x3; val_offset:110502*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110502*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x2987ffff; valaddr_reg:x3; val_offset:110505*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110505*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36836:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x298fffff; valaddr_reg:x3; val_offset:110508*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110508*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x299fffff; valaddr_reg:x3; val_offset:110511*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110511*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29bfffff; valaddr_reg:x3; val_offset:110514*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110514*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29c00000; valaddr_reg:x3; val_offset:110517*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110517*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29e00000; valaddr_reg:x3; val_offset:110520*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110520*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29f00000; valaddr_reg:x3; val_offset:110523*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110523*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29f80000; valaddr_reg:x3; val_offset:110526*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110526*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29fc0000; valaddr_reg:x3; val_offset:110529*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110529*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29fe0000; valaddr_reg:x3; val_offset:110532*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110532*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29ff0000; valaddr_reg:x3; val_offset:110535*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110535*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29ff8000; valaddr_reg:x3; val_offset:110538*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110538*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29ffc000; valaddr_reg:x3; val_offset:110541*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110541*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29ffe000; valaddr_reg:x3; val_offset:110544*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110544*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29fff000; valaddr_reg:x3; val_offset:110547*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110547*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29fff800; valaddr_reg:x3; val_offset:110550*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110550*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29fffc00; valaddr_reg:x3; val_offset:110553*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110553*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29fffe00; valaddr_reg:x3; val_offset:110556*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110556*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29ffff00; valaddr_reg:x3; val_offset:110559*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110559*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29ffff80; valaddr_reg:x3; val_offset:110562*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110562*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29ffffc0; valaddr_reg:x3; val_offset:110565*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110565*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36856:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29ffffe0; valaddr_reg:x3; val_offset:110568*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110568*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29fffff0; valaddr_reg:x3; val_offset:110571*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110571*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36858:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29fffff8; valaddr_reg:x3; val_offset:110574*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110574*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29fffffc; valaddr_reg:x3; val_offset:110577*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110577*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36860:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29fffffe; valaddr_reg:x3; val_offset:110580*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110580*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x53 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x29ffffff; valaddr_reg:x3; val_offset:110583*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110583*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36862:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x3f800001; valaddr_reg:x3; val_offset:110586*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110586*0 + 3*287*FLEN/8, x4, x1, x2)

inst_36863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x381006 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c81b0 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f381006; op2val:0x2c81b0;
op3val:0x3f800003; valaddr_reg:x3; val_offset:110589*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110589*0 + 3*287*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134301931,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197684224,32,FLEN)
NAN_BOXED(2134301931,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197749760,32,FLEN)
NAN_BOXED(2134301931,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197782528,32,FLEN)
NAN_BOXED(2134301931,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197798912,32,FLEN)
NAN_BOXED(2134301931,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197807104,32,FLEN)
NAN_BOXED(2134301931,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197811200,32,FLEN)
NAN_BOXED(2134301931,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197813248,32,FLEN)
NAN_BOXED(2134301931,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197814272,32,FLEN)
NAN_BOXED(2134301931,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197814784,32,FLEN)
NAN_BOXED(2134301931,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815040,32,FLEN)
NAN_BOXED(2134301931,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815168,32,FLEN)
NAN_BOXED(2134301931,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815232,32,FLEN)
NAN_BOXED(2134301931,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815264,32,FLEN)
NAN_BOXED(2134301931,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815280,32,FLEN)
NAN_BOXED(2134301931,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815288,32,FLEN)
NAN_BOXED(2134301931,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815292,32,FLEN)
NAN_BOXED(2134301931,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815294,32,FLEN)
NAN_BOXED(2134301931,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815295,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772160,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772161,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772163,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772167,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772175,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772191,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772223,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772287,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772415,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772671,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167773183,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167774207,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167776255,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167780351,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167788543,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167804927,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167837695,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167903231,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(168034303,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(168296447,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(168820735,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(169869311,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(171966463,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(171966464,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(174063616,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(175112192,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(175636480,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(175898624,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176029696,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176095232,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176128000,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176144384,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176152576,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176156672,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176158720,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176159744,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160256,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160512,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160640,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160704,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160736,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160752,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160760,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160764,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160766,32,FLEN)
NAN_BOXED(2134365924,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(176160767,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(696254464,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(696254465,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(696254467,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(696254471,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(696254479,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(696254495,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(696254527,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(696254591,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(696254719,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(696254975,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(696255487,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(696256511,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(696258559,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(696262655,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(696270847,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(696287231,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(696319999,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(696385535,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(696516607,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(696778751,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(697303039,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(698351615,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(700448767,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(700448768,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(702545920,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(703594496,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(704118784,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(704380928,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(704512000,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(704577536,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(704610304,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(704626688,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(704634880,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(704638976,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(704641024,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(704642048,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(704642560,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(704642816,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(704642944,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(704643008,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(704643040,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(704643056,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(704643064,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(704643068,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(704643070,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(704643071,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2134380550,32,FLEN)
NAN_BOXED(2916784,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
