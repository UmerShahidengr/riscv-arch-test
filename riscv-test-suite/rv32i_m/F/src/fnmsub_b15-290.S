
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_36992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x385ea4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f385ea4; op2val:0x80000000;
op3val:0x86fffe00; valaddr_reg:x3; val_offset:110976*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110976*0 + 3*289*FLEN/8, x4, x1, x2)

inst_36993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x385ea4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f385ea4; op2val:0x80000000;
op3val:0x86ffff00; valaddr_reg:x3; val_offset:110979*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110979*0 + 3*289*FLEN/8, x4, x1, x2)

inst_36994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x385ea4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f385ea4; op2val:0x80000000;
op3val:0x86ffff80; valaddr_reg:x3; val_offset:110982*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110982*0 + 3*289*FLEN/8, x4, x1, x2)

inst_36995:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x385ea4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f385ea4; op2val:0x80000000;
op3val:0x86ffffc0; valaddr_reg:x3; val_offset:110985*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110985*0 + 3*289*FLEN/8, x4, x1, x2)

inst_36996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x385ea4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f385ea4; op2val:0x80000000;
op3val:0x86ffffe0; valaddr_reg:x3; val_offset:110988*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110988*0 + 3*289*FLEN/8, x4, x1, x2)

inst_36997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x385ea4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f385ea4; op2val:0x80000000;
op3val:0x86fffff0; valaddr_reg:x3; val_offset:110991*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110991*0 + 3*289*FLEN/8, x4, x1, x2)

inst_36998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x385ea4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f385ea4; op2val:0x80000000;
op3val:0x86fffff8; valaddr_reg:x3; val_offset:110994*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110994*0 + 3*289*FLEN/8, x4, x1, x2)

inst_36999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x385ea4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f385ea4; op2val:0x80000000;
op3val:0x86fffffc; valaddr_reg:x3; val_offset:110997*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 110997*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37000:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x385ea4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f385ea4; op2val:0x80000000;
op3val:0x86fffffe; valaddr_reg:x3; val_offset:111000*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111000*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37001:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x385ea4 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f385ea4; op2val:0x80000000;
op3val:0x86ffffff; valaddr_reg:x3; val_offset:111003*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111003*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37002:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3a800000; valaddr_reg:x3; val_offset:111006*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111006*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37003:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3a800001; valaddr_reg:x3; val_offset:111009*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111009*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37004:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3a800003; valaddr_reg:x3; val_offset:111012*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111012*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37005:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3a800007; valaddr_reg:x3; val_offset:111015*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111015*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37006:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3a80000f; valaddr_reg:x3; val_offset:111018*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111018*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37007:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3a80001f; valaddr_reg:x3; val_offset:111021*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111021*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37008:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3a80003f; valaddr_reg:x3; val_offset:111024*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111024*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37009:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3a80007f; valaddr_reg:x3; val_offset:111027*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111027*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37010:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3a8000ff; valaddr_reg:x3; val_offset:111030*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111030*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37011:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3a8001ff; valaddr_reg:x3; val_offset:111033*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111033*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37012:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3a8003ff; valaddr_reg:x3; val_offset:111036*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111036*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37013:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3a8007ff; valaddr_reg:x3; val_offset:111039*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111039*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37014:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3a800fff; valaddr_reg:x3; val_offset:111042*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111042*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37015:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3a801fff; valaddr_reg:x3; val_offset:111045*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111045*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37016:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3a803fff; valaddr_reg:x3; val_offset:111048*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111048*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37017:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3a807fff; valaddr_reg:x3; val_offset:111051*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111051*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37018:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3a80ffff; valaddr_reg:x3; val_offset:111054*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111054*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37019:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3a81ffff; valaddr_reg:x3; val_offset:111057*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111057*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37020:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3a83ffff; valaddr_reg:x3; val_offset:111060*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111060*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37021:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3a87ffff; valaddr_reg:x3; val_offset:111063*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111063*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37022:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3a8fffff; valaddr_reg:x3; val_offset:111066*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111066*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37023:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3a9fffff; valaddr_reg:x3; val_offset:111069*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111069*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37024:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3abfffff; valaddr_reg:x3; val_offset:111072*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111072*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37025:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3ac00000; valaddr_reg:x3; val_offset:111075*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111075*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37026:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3ae00000; valaddr_reg:x3; val_offset:111078*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111078*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37027:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3af00000; valaddr_reg:x3; val_offset:111081*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111081*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37028:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3af80000; valaddr_reg:x3; val_offset:111084*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111084*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37029:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3afc0000; valaddr_reg:x3; val_offset:111087*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111087*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37030:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3afe0000; valaddr_reg:x3; val_offset:111090*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111090*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37031:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3aff0000; valaddr_reg:x3; val_offset:111093*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111093*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37032:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3aff8000; valaddr_reg:x3; val_offset:111096*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111096*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37033:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3affc000; valaddr_reg:x3; val_offset:111099*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111099*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37034:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3affe000; valaddr_reg:x3; val_offset:111102*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111102*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37035:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3afff000; valaddr_reg:x3; val_offset:111105*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111105*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37036:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3afff800; valaddr_reg:x3; val_offset:111108*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111108*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37037:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3afffc00; valaddr_reg:x3; val_offset:111111*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111111*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37038:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3afffe00; valaddr_reg:x3; val_offset:111114*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111114*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37039:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3affff00; valaddr_reg:x3; val_offset:111117*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111117*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37040:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3affff80; valaddr_reg:x3; val_offset:111120*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111120*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37041:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3affffc0; valaddr_reg:x3; val_offset:111123*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111123*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37042:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3affffe0; valaddr_reg:x3; val_offset:111126*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111126*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37043:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3afffff0; valaddr_reg:x3; val_offset:111129*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111129*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37044:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3afffff8; valaddr_reg:x3; val_offset:111132*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111132*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37045:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3afffffc; valaddr_reg:x3; val_offset:111135*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111135*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37046:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3afffffe; valaddr_reg:x3; val_offset:111138*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111138*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37047:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x75 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3affffff; valaddr_reg:x3; val_offset:111141*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111141*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37048:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3f800001; valaddr_reg:x3; val_offset:111144*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111144*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37049:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3f800003; valaddr_reg:x3; val_offset:111147*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111147*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37050:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3f800007; valaddr_reg:x3; val_offset:111150*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111150*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37051:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3f999999; valaddr_reg:x3; val_offset:111153*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111153*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37052:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:111156*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111156*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37053:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:111159*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111159*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37054:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:111162*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111162*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37055:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:111165*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111165*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37056:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:111168*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111168*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37057:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:111171*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111171*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37058:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:111174*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111174*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37059:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:111177*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111177*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37060:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:111180*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111180*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37061:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:111183*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111183*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37062:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:111186*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111186*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37063:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38f464 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2c4abc and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38f464; op2val:0x2c4abc;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:111189*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111189*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37064:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:111192*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111192*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37065:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:111195*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111195*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37066:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:111198*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111198*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37067:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:111201*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111201*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37068:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:111204*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111204*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37069:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:111207*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111207*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37070:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:111210*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111210*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37071:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:111213*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111213*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37072:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:111216*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111216*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37073:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:111219*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111219*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37074:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:111222*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111222*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37075:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:111225*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111225*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37076:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:111228*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111228*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37077:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:111231*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111231*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37078:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:111234*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111234*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37079:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:111237*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111237*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37080:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x10000000; valaddr_reg:x3; val_offset:111240*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111240*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37081:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x10000001; valaddr_reg:x3; val_offset:111243*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111243*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37082:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x10000003; valaddr_reg:x3; val_offset:111246*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111246*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37083:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x10000007; valaddr_reg:x3; val_offset:111249*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111249*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37084:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x1000000f; valaddr_reg:x3; val_offset:111252*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111252*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37085:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x1000001f; valaddr_reg:x3; val_offset:111255*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111255*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37086:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x1000003f; valaddr_reg:x3; val_offset:111258*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111258*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37087:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x1000007f; valaddr_reg:x3; val_offset:111261*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111261*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37088:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x100000ff; valaddr_reg:x3; val_offset:111264*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111264*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37089:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x100001ff; valaddr_reg:x3; val_offset:111267*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111267*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37090:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x100003ff; valaddr_reg:x3; val_offset:111270*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111270*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37091:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x100007ff; valaddr_reg:x3; val_offset:111273*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111273*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37092:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x10000fff; valaddr_reg:x3; val_offset:111276*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111276*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37093:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x10001fff; valaddr_reg:x3; val_offset:111279*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111279*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37094:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x10003fff; valaddr_reg:x3; val_offset:111282*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111282*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37095:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x10007fff; valaddr_reg:x3; val_offset:111285*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111285*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37096:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x1000ffff; valaddr_reg:x3; val_offset:111288*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111288*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37097:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x1001ffff; valaddr_reg:x3; val_offset:111291*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111291*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37098:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x1003ffff; valaddr_reg:x3; val_offset:111294*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111294*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37099:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x1007ffff; valaddr_reg:x3; val_offset:111297*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111297*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x100fffff; valaddr_reg:x3; val_offset:111300*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111300*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x101fffff; valaddr_reg:x3; val_offset:111303*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111303*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x103fffff; valaddr_reg:x3; val_offset:111306*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111306*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x10400000; valaddr_reg:x3; val_offset:111309*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111309*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x10600000; valaddr_reg:x3; val_offset:111312*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111312*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x10700000; valaddr_reg:x3; val_offset:111315*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111315*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x10780000; valaddr_reg:x3; val_offset:111318*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111318*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x107c0000; valaddr_reg:x3; val_offset:111321*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111321*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x107e0000; valaddr_reg:x3; val_offset:111324*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111324*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x107f0000; valaddr_reg:x3; val_offset:111327*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111327*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x107f8000; valaddr_reg:x3; val_offset:111330*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111330*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x107fc000; valaddr_reg:x3; val_offset:111333*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111333*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x107fe000; valaddr_reg:x3; val_offset:111336*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111336*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x107ff000; valaddr_reg:x3; val_offset:111339*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111339*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x107ff800; valaddr_reg:x3; val_offset:111342*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111342*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x107ffc00; valaddr_reg:x3; val_offset:111345*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111345*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x107ffe00; valaddr_reg:x3; val_offset:111348*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111348*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x107fff00; valaddr_reg:x3; val_offset:111351*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111351*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x107fff80; valaddr_reg:x3; val_offset:111354*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111354*0 + 3*289*FLEN/8, x4, x1, x2)

inst_37119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x391b22 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f391b22; op2val:0x0;
op3val:0x107fffc0; valaddr_reg:x3; val_offset:111357*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111357*0 + 3*289*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134400676,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264923648,32,FLEN)
NAN_BOXED(2134400676,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264923904,32,FLEN)
NAN_BOXED(2134400676,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924032,32,FLEN)
NAN_BOXED(2134400676,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924096,32,FLEN)
NAN_BOXED(2134400676,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924128,32,FLEN)
NAN_BOXED(2134400676,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924144,32,FLEN)
NAN_BOXED(2134400676,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924152,32,FLEN)
NAN_BOXED(2134400676,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924156,32,FLEN)
NAN_BOXED(2134400676,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924158,32,FLEN)
NAN_BOXED(2134400676,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2264924159,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(981467136,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(981467137,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(981467139,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(981467143,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(981467151,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(981467167,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(981467199,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(981467263,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(981467391,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(981467647,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(981468159,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(981469183,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(981471231,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(981475327,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(981483519,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(981499903,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(981532671,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(981598207,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(981729279,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(981991423,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(982515711,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(983564287,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(985661439,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(985661440,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(987758592,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(988807168,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(989331456,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(989593600,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(989724672,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(989790208,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(989822976,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(989839360,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(989847552,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(989851648,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(989853696,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(989854720,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(989855232,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(989855488,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(989855616,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(989855680,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(989855712,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(989855728,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(989855736,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(989855740,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(989855742,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(989855743,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2134439012,32,FLEN)
NAN_BOXED(2902716,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435456,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435457,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435459,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435463,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435471,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435487,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435519,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435583,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435711,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435967,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268436479,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268437503,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268439551,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268443647,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268451839,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268468223,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268500991,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268566527,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268697599,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268959743,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(269484031,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(270532607,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(272629759,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(272629760,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(274726912,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(275775488,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276299776,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276561920,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276692992,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276758528,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276791296,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276807680,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276815872,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276819968,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276822016,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276823040,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276823552,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276823808,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276823936,32,FLEN)
NAN_BOXED(2134448930,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(276824000,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
