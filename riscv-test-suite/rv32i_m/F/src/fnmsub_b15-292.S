
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_37248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395f47; op2val:0x80000000;
op3val:0x817ffffe; valaddr_reg:x3; val_offset:111744*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111744*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x395f47 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x02 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f395f47; op2val:0x80000000;
op3val:0x817fffff; valaddr_reg:x3; val_offset:111747*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111747*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfa800000; valaddr_reg:x3; val_offset:111750*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111750*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfa800001; valaddr_reg:x3; val_offset:111753*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111753*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfa800003; valaddr_reg:x3; val_offset:111756*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111756*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfa800007; valaddr_reg:x3; val_offset:111759*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111759*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfa80000f; valaddr_reg:x3; val_offset:111762*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111762*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfa80001f; valaddr_reg:x3; val_offset:111765*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111765*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37256:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfa80003f; valaddr_reg:x3; val_offset:111768*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111768*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37257:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfa80007f; valaddr_reg:x3; val_offset:111771*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111771*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37258:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfa8000ff; valaddr_reg:x3; val_offset:111774*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111774*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37259:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfa8001ff; valaddr_reg:x3; val_offset:111777*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111777*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37260:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfa8003ff; valaddr_reg:x3; val_offset:111780*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111780*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37261:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfa8007ff; valaddr_reg:x3; val_offset:111783*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111783*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37262:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfa800fff; valaddr_reg:x3; val_offset:111786*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111786*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37263:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfa801fff; valaddr_reg:x3; val_offset:111789*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111789*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37264:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfa803fff; valaddr_reg:x3; val_offset:111792*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111792*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37265:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfa807fff; valaddr_reg:x3; val_offset:111795*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111795*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37266:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfa80ffff; valaddr_reg:x3; val_offset:111798*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111798*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37267:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfa81ffff; valaddr_reg:x3; val_offset:111801*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111801*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37268:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfa83ffff; valaddr_reg:x3; val_offset:111804*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111804*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37269:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfa87ffff; valaddr_reg:x3; val_offset:111807*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111807*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37270:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfa8fffff; valaddr_reg:x3; val_offset:111810*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111810*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37271:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfa9fffff; valaddr_reg:x3; val_offset:111813*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111813*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37272:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfabfffff; valaddr_reg:x3; val_offset:111816*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111816*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37273:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfac00000; valaddr_reg:x3; val_offset:111819*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111819*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37274:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfae00000; valaddr_reg:x3; val_offset:111822*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111822*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37275:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfaf00000; valaddr_reg:x3; val_offset:111825*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111825*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37276:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfaf80000; valaddr_reg:x3; val_offset:111828*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111828*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37277:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfafc0000; valaddr_reg:x3; val_offset:111831*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111831*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37278:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfafe0000; valaddr_reg:x3; val_offset:111834*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111834*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37279:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfaff0000; valaddr_reg:x3; val_offset:111837*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111837*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37280:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfaff8000; valaddr_reg:x3; val_offset:111840*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111840*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37281:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfaffc000; valaddr_reg:x3; val_offset:111843*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111843*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37282:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfaffe000; valaddr_reg:x3; val_offset:111846*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111846*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37283:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfafff000; valaddr_reg:x3; val_offset:111849*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111849*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37284:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfafff800; valaddr_reg:x3; val_offset:111852*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111852*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37285:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfafffc00; valaddr_reg:x3; val_offset:111855*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111855*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37286:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfafffe00; valaddr_reg:x3; val_offset:111858*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111858*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37287:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfaffff00; valaddr_reg:x3; val_offset:111861*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111861*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37288:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfaffff80; valaddr_reg:x3; val_offset:111864*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111864*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37289:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfaffffc0; valaddr_reg:x3; val_offset:111867*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111867*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37290:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfaffffe0; valaddr_reg:x3; val_offset:111870*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111870*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37291:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfafffff0; valaddr_reg:x3; val_offset:111873*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111873*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37292:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfafffff8; valaddr_reg:x3; val_offset:111876*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111876*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37293:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfafffffc; valaddr_reg:x3; val_offset:111879*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111879*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37294:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfafffffe; valaddr_reg:x3; val_offset:111882*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111882*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37295:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xf5 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xfaffffff; valaddr_reg:x3; val_offset:111885*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111885*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37296:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xff000001; valaddr_reg:x3; val_offset:111888*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111888*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37297:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xff000003; valaddr_reg:x3; val_offset:111891*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111891*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37298:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xff000007; valaddr_reg:x3; val_offset:111894*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111894*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37299:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xff199999; valaddr_reg:x3; val_offset:111897*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111897*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37300:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xff249249; valaddr_reg:x3; val_offset:111900*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111900*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37301:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xff333333; valaddr_reg:x3; val_offset:111903*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111903*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37302:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:111906*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111906*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37303:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:111909*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111909*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37304:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xff444444; valaddr_reg:x3; val_offset:111912*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111912*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37305:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:111915*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111915*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37306:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:111918*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111918*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37307:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xff666666; valaddr_reg:x3; val_offset:111921*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111921*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37308:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:111924*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111924*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37309:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:111927*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111927*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37310:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:111930*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111930*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37311:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x396190 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x30c29a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f396190; op2val:0xbfb0c29a;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:111933*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111933*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37312:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:111936*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111936*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37313:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:111939*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111939*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37314:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:111942*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111942*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37315:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:111945*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111945*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37316:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:111948*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111948*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37317:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:111951*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111951*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37318:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:111954*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111954*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37319:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:111957*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111957*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37320:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:111960*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111960*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37321:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:111963*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111963*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37322:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:111966*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111966*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37323:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:111969*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111969*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37324:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:111972*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111972*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37325:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:111975*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111975*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37326:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:111978*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111978*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37327:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:111981*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111981*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37328:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x6000000; valaddr_reg:x3; val_offset:111984*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111984*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37329:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x6000001; valaddr_reg:x3; val_offset:111987*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111987*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37330:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x6000003; valaddr_reg:x3; val_offset:111990*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111990*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37331:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x6000007; valaddr_reg:x3; val_offset:111993*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111993*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37332:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x600000f; valaddr_reg:x3; val_offset:111996*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111996*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37333:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x600001f; valaddr_reg:x3; val_offset:111999*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111999*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37334:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x600003f; valaddr_reg:x3; val_offset:112002*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112002*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37335:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x600007f; valaddr_reg:x3; val_offset:112005*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112005*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37336:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x60000ff; valaddr_reg:x3; val_offset:112008*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112008*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37337:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x60001ff; valaddr_reg:x3; val_offset:112011*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112011*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37338:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x60003ff; valaddr_reg:x3; val_offset:112014*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112014*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37339:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x60007ff; valaddr_reg:x3; val_offset:112017*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112017*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37340:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x6000fff; valaddr_reg:x3; val_offset:112020*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112020*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37341:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x6001fff; valaddr_reg:x3; val_offset:112023*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112023*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37342:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x6003fff; valaddr_reg:x3; val_offset:112026*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112026*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37343:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x6007fff; valaddr_reg:x3; val_offset:112029*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112029*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37344:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x600ffff; valaddr_reg:x3; val_offset:112032*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112032*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37345:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x601ffff; valaddr_reg:x3; val_offset:112035*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112035*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37346:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x603ffff; valaddr_reg:x3; val_offset:112038*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112038*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37347:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x607ffff; valaddr_reg:x3; val_offset:112041*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112041*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37348:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x60fffff; valaddr_reg:x3; val_offset:112044*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112044*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37349:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x61fffff; valaddr_reg:x3; val_offset:112047*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112047*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37350:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x63fffff; valaddr_reg:x3; val_offset:112050*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112050*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37351:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x6400000; valaddr_reg:x3; val_offset:112053*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112053*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37352:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x6600000; valaddr_reg:x3; val_offset:112056*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112056*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37353:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x6700000; valaddr_reg:x3; val_offset:112059*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112059*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37354:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x6780000; valaddr_reg:x3; val_offset:112062*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112062*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37355:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x67c0000; valaddr_reg:x3; val_offset:112065*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112065*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37356:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x67e0000; valaddr_reg:x3; val_offset:112068*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112068*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37357:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x67f0000; valaddr_reg:x3; val_offset:112071*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112071*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37358:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x67f8000; valaddr_reg:x3; val_offset:112074*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112074*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37359:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x67fc000; valaddr_reg:x3; val_offset:112077*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112077*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37360:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x67fe000; valaddr_reg:x3; val_offset:112080*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112080*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37361:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x67ff000; valaddr_reg:x3; val_offset:112083*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112083*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37362:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x67ff800; valaddr_reg:x3; val_offset:112086*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112086*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37363:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x67ffc00; valaddr_reg:x3; val_offset:112089*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112089*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37364:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x67ffe00; valaddr_reg:x3; val_offset:112092*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112092*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37365:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x67fff00; valaddr_reg:x3; val_offset:112095*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112095*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37366:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x67fff80; valaddr_reg:x3; val_offset:112098*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112098*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37367:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x67fffc0; valaddr_reg:x3; val_offset:112101*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112101*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37368:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x67fffe0; valaddr_reg:x3; val_offset:112104*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112104*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37369:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x67ffff0; valaddr_reg:x3; val_offset:112107*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112107*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37370:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x67ffff8; valaddr_reg:x3; val_offset:112110*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112110*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37371:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x67ffffc; valaddr_reg:x3; val_offset:112113*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112113*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37372:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x67ffffe; valaddr_reg:x3; val_offset:112116*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112116*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37373:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3a0304 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3a0304; op2val:0x0;
op3val:0x67fffff; valaddr_reg:x3; val_offset:112119*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112119*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37374:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ad3ab and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ad3ab; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:112122*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112122*0 + 3*291*FLEN/8, x4, x1, x2)

inst_37375:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3ad3ab and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3ad3ab; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:112125*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 112125*0 + 3*291*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134466375,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649470,32,FLEN)
NAN_BOXED(2134466375,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2172649471,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4202692608,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4202692609,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4202692611,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4202692615,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4202692623,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4202692639,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4202692671,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4202692735,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4202692863,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4202693119,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4202693631,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4202694655,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4202696703,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4202700799,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4202708991,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4202725375,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4202758143,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4202823679,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4202954751,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4203216895,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4203741183,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4204789759,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4206886911,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4206886912,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4208984064,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4210032640,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4210556928,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4210819072,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4210950144,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4211015680,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4211048448,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4211064832,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4211073024,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4211077120,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4211079168,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4211080192,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4211080704,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4211080960,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4211081088,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4211081152,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4211081184,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4211081200,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4211081208,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4211081212,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4211081214,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4211081215,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2134466960,32,FLEN)
NAN_BOXED(3216032410,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663296,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663297,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663299,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663303,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663311,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663327,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663359,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663423,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663551,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663807,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100664319,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100665343,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100667391,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100671487,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100679679,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100696063,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100728831,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100794367,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100925439,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(101187583,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(101711871,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(102760447,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(104857599,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(104857600,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(106954752,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108003328,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108527616,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108789760,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108920832,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108986368,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109019136,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109035520,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109043712,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109047808,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109049856,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109050880,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051392,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051648,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051776,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051840,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051872,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051888,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051896,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051900,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051902,32,FLEN)
NAN_BOXED(2134508292,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051903,32,FLEN)
NAN_BOXED(2134561707,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2134561707,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
