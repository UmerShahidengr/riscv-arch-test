
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_38016:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x603fffff; valaddr_reg:x3; val_offset:114048*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114048*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38017:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x60400000; valaddr_reg:x3; val_offset:114051*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114051*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38018:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x60600000; valaddr_reg:x3; val_offset:114054*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114054*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38019:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x60700000; valaddr_reg:x3; val_offset:114057*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114057*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38020:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x60780000; valaddr_reg:x3; val_offset:114060*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114060*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38021:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x607c0000; valaddr_reg:x3; val_offset:114063*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114063*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38022:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x607e0000; valaddr_reg:x3; val_offset:114066*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114066*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38023:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x607f0000; valaddr_reg:x3; val_offset:114069*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114069*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38024:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x607f8000; valaddr_reg:x3; val_offset:114072*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114072*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38025:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x607fc000; valaddr_reg:x3; val_offset:114075*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114075*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38026:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x607fe000; valaddr_reg:x3; val_offset:114078*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114078*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38027:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x607ff000; valaddr_reg:x3; val_offset:114081*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114081*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38028:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x607ff800; valaddr_reg:x3; val_offset:114084*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114084*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38029:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x607ffc00; valaddr_reg:x3; val_offset:114087*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114087*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38030:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x607ffe00; valaddr_reg:x3; val_offset:114090*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114090*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38031:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x607fff00; valaddr_reg:x3; val_offset:114093*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114093*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38032:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x607fff80; valaddr_reg:x3; val_offset:114096*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114096*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38033:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x607fffc0; valaddr_reg:x3; val_offset:114099*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114099*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38034:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x607fffe0; valaddr_reg:x3; val_offset:114102*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114102*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38035:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x607ffff0; valaddr_reg:x3; val_offset:114105*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114105*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38036:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x607ffff8; valaddr_reg:x3; val_offset:114108*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114108*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38037:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x607ffffc; valaddr_reg:x3; val_offset:114111*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114111*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38038:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x607ffffe; valaddr_reg:x3; val_offset:114114*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114114*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38039:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xc0 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x607fffff; valaddr_reg:x3; val_offset:114117*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114117*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38040:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x7f000001; valaddr_reg:x3; val_offset:114120*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114120*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38041:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x7f000003; valaddr_reg:x3; val_offset:114123*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114123*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38042:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x7f000007; valaddr_reg:x3; val_offset:114126*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114126*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38043:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x7f199999; valaddr_reg:x3; val_offset:114129*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114129*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38044:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x7f249249; valaddr_reg:x3; val_offset:114132*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114132*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38045:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x7f333333; valaddr_reg:x3; val_offset:114135*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114135*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38046:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:114138*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114138*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38047:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:114141*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114141*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38048:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x7f444444; valaddr_reg:x3; val_offset:114144*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114144*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38049:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:114147*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114147*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38050:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:114150*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114150*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38051:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x7f666666; valaddr_reg:x3; val_offset:114153*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114153*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38052:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:114156*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114156*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38053:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:114159*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114159*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38054:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:114162*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114162*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38055:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3f2967 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x2b6a40 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3f2967; op2val:0x3fab6a40;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:114165*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114165*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38056:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23800000; valaddr_reg:x3; val_offset:114168*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114168*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38057:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23800001; valaddr_reg:x3; val_offset:114171*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114171*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38058:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23800003; valaddr_reg:x3; val_offset:114174*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114174*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38059:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23800007; valaddr_reg:x3; val_offset:114177*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114177*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38060:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x2380000f; valaddr_reg:x3; val_offset:114180*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114180*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38061:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x2380001f; valaddr_reg:x3; val_offset:114183*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114183*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38062:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x2380003f; valaddr_reg:x3; val_offset:114186*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114186*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38063:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x2380007f; valaddr_reg:x3; val_offset:114189*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114189*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38064:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x238000ff; valaddr_reg:x3; val_offset:114192*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114192*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38065:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x238001ff; valaddr_reg:x3; val_offset:114195*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114195*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38066:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x238003ff; valaddr_reg:x3; val_offset:114198*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114198*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38067:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x238007ff; valaddr_reg:x3; val_offset:114201*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114201*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38068:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23800fff; valaddr_reg:x3; val_offset:114204*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114204*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38069:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23801fff; valaddr_reg:x3; val_offset:114207*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114207*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38070:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23803fff; valaddr_reg:x3; val_offset:114210*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114210*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38071:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23807fff; valaddr_reg:x3; val_offset:114213*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114213*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38072:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x2380ffff; valaddr_reg:x3; val_offset:114216*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114216*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38073:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x2381ffff; valaddr_reg:x3; val_offset:114219*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114219*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38074:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x2383ffff; valaddr_reg:x3; val_offset:114222*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114222*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38075:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x2387ffff; valaddr_reg:x3; val_offset:114225*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114225*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38076:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x238fffff; valaddr_reg:x3; val_offset:114228*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114228*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38077:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x239fffff; valaddr_reg:x3; val_offset:114231*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114231*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38078:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23bfffff; valaddr_reg:x3; val_offset:114234*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114234*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38079:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23c00000; valaddr_reg:x3; val_offset:114237*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114237*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38080:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23e00000; valaddr_reg:x3; val_offset:114240*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114240*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38081:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23f00000; valaddr_reg:x3; val_offset:114243*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114243*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38082:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23f80000; valaddr_reg:x3; val_offset:114246*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114246*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38083:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23fc0000; valaddr_reg:x3; val_offset:114249*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114249*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38084:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23fe0000; valaddr_reg:x3; val_offset:114252*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114252*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38085:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23ff0000; valaddr_reg:x3; val_offset:114255*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114255*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38086:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23ff8000; valaddr_reg:x3; val_offset:114258*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114258*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38087:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23ffc000; valaddr_reg:x3; val_offset:114261*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114261*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38088:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23ffe000; valaddr_reg:x3; val_offset:114264*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114264*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38089:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23fff000; valaddr_reg:x3; val_offset:114267*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114267*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38090:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23fff800; valaddr_reg:x3; val_offset:114270*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114270*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38091:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23fffc00; valaddr_reg:x3; val_offset:114273*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114273*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38092:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23fffe00; valaddr_reg:x3; val_offset:114276*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114276*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38093:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23ffff00; valaddr_reg:x3; val_offset:114279*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114279*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38094:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23ffff80; valaddr_reg:x3; val_offset:114282*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114282*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38095:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23ffffc0; valaddr_reg:x3; val_offset:114285*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114285*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38096:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23ffffe0; valaddr_reg:x3; val_offset:114288*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114288*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38097:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23fffff0; valaddr_reg:x3; val_offset:114291*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114291*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38098:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23fffff8; valaddr_reg:x3; val_offset:114294*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114294*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38099:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23fffffc; valaddr_reg:x3; val_offset:114297*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114297*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23fffffe; valaddr_reg:x3; val_offset:114300*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114300*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x47 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x23ffffff; valaddr_reg:x3; val_offset:114303*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114303*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x3f800001; valaddr_reg:x3; val_offset:114306*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114306*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x3f800003; valaddr_reg:x3; val_offset:114309*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114309*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x3f800007; valaddr_reg:x3; val_offset:114312*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114312*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x3f999999; valaddr_reg:x3; val_offset:114315*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114315*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:114318*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114318*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:114321*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114321*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:114324*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114324*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:114327*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114327*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:114330*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114330*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:114333*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114333*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:114336*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114336*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:114339*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114339*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:114342*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114342*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:114345*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114345*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:114348*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114348*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3fb6b5 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2abafa and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3fb6b5; op2val:0x2abafa;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:114351*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114351*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38118:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x31cc28 and fs2 == 1 and fe2 == 0x08 and fm2 == 0x384caf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab1cc28; op2val:0x84384caf;
op3val:0xbf800001; valaddr_reg:x3; val_offset:114354*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114354*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38119:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x31cc28 and fs2 == 1 and fe2 == 0x08 and fm2 == 0x384caf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab1cc28; op2val:0x84384caf;
op3val:0xbf800003; valaddr_reg:x3; val_offset:114357*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114357*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38120:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x31cc28 and fs2 == 1 and fe2 == 0x08 and fm2 == 0x384caf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab1cc28; op2val:0x84384caf;
op3val:0xbf800007; valaddr_reg:x3; val_offset:114360*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114360*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38121:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x31cc28 and fs2 == 1 and fe2 == 0x08 and fm2 == 0x384caf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab1cc28; op2val:0x84384caf;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:114363*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114363*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38122:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x31cc28 and fs2 == 1 and fe2 == 0x08 and fm2 == 0x384caf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab1cc28; op2val:0x84384caf;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:114366*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114366*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38123:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x31cc28 and fs2 == 1 and fe2 == 0x08 and fm2 == 0x384caf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab1cc28; op2val:0x84384caf;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:114369*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114369*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38124:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x31cc28 and fs2 == 1 and fe2 == 0x08 and fm2 == 0x384caf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab1cc28; op2val:0x84384caf;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:114372*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114372*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38125:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x31cc28 and fs2 == 1 and fe2 == 0x08 and fm2 == 0x384caf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab1cc28; op2val:0x84384caf;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:114375*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114375*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38126:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x31cc28 and fs2 == 1 and fe2 == 0x08 and fm2 == 0x384caf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab1cc28; op2val:0x84384caf;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:114378*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114378*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38127:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x31cc28 and fs2 == 1 and fe2 == 0x08 and fm2 == 0x384caf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab1cc28; op2val:0x84384caf;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:114381*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114381*0 + 3*297*FLEN/8, x4, x1, x2)

inst_38128:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x31cc28 and fs2 == 1 and fe2 == 0x08 and fm2 == 0x384caf and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ab1cc28; op2val:0x84384caf;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:114384*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114384*0 + 3*297*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(1614807039,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(1614807040,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(1616904192,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(1617952768,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(1618477056,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(1618739200,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(1618870272,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(1618935808,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(1618968576,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(1618984960,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(1618993152,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(1618997248,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(1618999296,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(1619000320,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(1619000832,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(1619001088,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(1619001216,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(1619001280,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(1619001312,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(1619001328,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(1619001336,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(1619001340,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(1619001342,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(1619001343,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2134845799,32,FLEN)
NAN_BOXED(1068198464,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(595591168,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(595591169,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(595591171,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(595591175,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(595591183,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(595591199,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(595591231,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(595591295,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(595591423,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(595591679,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(595592191,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(595593215,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(595595263,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(595599359,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(595607551,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(595623935,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(595656703,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(595722239,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(595853311,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(596115455,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(596639743,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(597688319,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(599785471,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(599785472,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(601882624,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(602931200,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(603455488,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(603717632,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(603848704,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(603914240,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(603947008,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(603963392,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(603971584,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(603975680,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(603977728,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(603978752,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(603979264,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(603979520,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(603979648,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(603979712,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(603979744,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(603979760,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(603979768,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(603979772,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(603979774,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(603979775,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2134881973,32,FLEN)
NAN_BOXED(2800378,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2058472488,32,FLEN)
NAN_BOXED(2218282159,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2058472488,32,FLEN)
NAN_BOXED(2218282159,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2058472488,32,FLEN)
NAN_BOXED(2218282159,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2058472488,32,FLEN)
NAN_BOXED(2218282159,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2058472488,32,FLEN)
NAN_BOXED(2218282159,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2058472488,32,FLEN)
NAN_BOXED(2218282159,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2058472488,32,FLEN)
NAN_BOXED(2218282159,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2058472488,32,FLEN)
NAN_BOXED(2218282159,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2058472488,32,FLEN)
NAN_BOXED(2218282159,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2058472488,32,FLEN)
NAN_BOXED(2218282159,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2058472488,32,FLEN)
NAN_BOXED(2218282159,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
