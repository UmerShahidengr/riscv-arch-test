
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_3840:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4800003; valaddr_reg:x3; val_offset:11520*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11520*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3841:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4800007; valaddr_reg:x3; val_offset:11523*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11523*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3842:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf480000f; valaddr_reg:x3; val_offset:11526*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11526*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3843:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf480001f; valaddr_reg:x3; val_offset:11529*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11529*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3844:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf480003f; valaddr_reg:x3; val_offset:11532*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11532*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3845:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf480007f; valaddr_reg:x3; val_offset:11535*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11535*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3846:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf48000ff; valaddr_reg:x3; val_offset:11538*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11538*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3847:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf48001ff; valaddr_reg:x3; val_offset:11541*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11541*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3848:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf48003ff; valaddr_reg:x3; val_offset:11544*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11544*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3849:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf48007ff; valaddr_reg:x3; val_offset:11547*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11547*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3850:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4800fff; valaddr_reg:x3; val_offset:11550*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11550*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3851:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4801fff; valaddr_reg:x3; val_offset:11553*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11553*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3852:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4803fff; valaddr_reg:x3; val_offset:11556*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11556*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3853:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4807fff; valaddr_reg:x3; val_offset:11559*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11559*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3854:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf480ffff; valaddr_reg:x3; val_offset:11562*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11562*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3855:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf481ffff; valaddr_reg:x3; val_offset:11565*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11565*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3856:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf483ffff; valaddr_reg:x3; val_offset:11568*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11568*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3857:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf487ffff; valaddr_reg:x3; val_offset:11571*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11571*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3858:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf48fffff; valaddr_reg:x3; val_offset:11574*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11574*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3859:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf49fffff; valaddr_reg:x3; val_offset:11577*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11577*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3860:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4bfffff; valaddr_reg:x3; val_offset:11580*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11580*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3861:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4c00000; valaddr_reg:x3; val_offset:11583*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11583*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3862:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4e00000; valaddr_reg:x3; val_offset:11586*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11586*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3863:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4f00000; valaddr_reg:x3; val_offset:11589*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11589*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3864:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4f80000; valaddr_reg:x3; val_offset:11592*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11592*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3865:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4fc0000; valaddr_reg:x3; val_offset:11595*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11595*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3866:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4fe0000; valaddr_reg:x3; val_offset:11598*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11598*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3867:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4ff0000; valaddr_reg:x3; val_offset:11601*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11601*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3868:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4ff8000; valaddr_reg:x3; val_offset:11604*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11604*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3869:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4ffc000; valaddr_reg:x3; val_offset:11607*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11607*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3870:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4ffe000; valaddr_reg:x3; val_offset:11610*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11610*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3871:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4fff000; valaddr_reg:x3; val_offset:11613*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11613*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3872:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4fff800; valaddr_reg:x3; val_offset:11616*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11616*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3873:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4fffc00; valaddr_reg:x3; val_offset:11619*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11619*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3874:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4fffe00; valaddr_reg:x3; val_offset:11622*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11622*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3875:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4ffff00; valaddr_reg:x3; val_offset:11625*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11625*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3876:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4ffff80; valaddr_reg:x3; val_offset:11628*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11628*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3877:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4ffffc0; valaddr_reg:x3; val_offset:11631*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11631*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3878:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4ffffe0; valaddr_reg:x3; val_offset:11634*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11634*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3879:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4fffff0; valaddr_reg:x3; val_offset:11637*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11637*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3880:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4fffff8; valaddr_reg:x3; val_offset:11640*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11640*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3881:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4fffffc; valaddr_reg:x3; val_offset:11643*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11643*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3882:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4fffffe; valaddr_reg:x3; val_offset:11646*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11646*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3883:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xe9 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xf4ffffff; valaddr_reg:x3; val_offset:11649*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11649*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3884:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xff000001; valaddr_reg:x3; val_offset:11652*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11652*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3885:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xff000003; valaddr_reg:x3; val_offset:11655*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11655*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3886:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xff000007; valaddr_reg:x3; val_offset:11658*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11658*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3887:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xff199999; valaddr_reg:x3; val_offset:11661*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11661*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3888:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xff249249; valaddr_reg:x3; val_offset:11664*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11664*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3889:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xff333333; valaddr_reg:x3; val_offset:11667*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11667*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3890:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:11670*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11670*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3891:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:11673*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11673*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3892:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xff444444; valaddr_reg:x3; val_offset:11676*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11676*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3893:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:11679*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11679*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3894:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:11682*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11682*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3895:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xff666666; valaddr_reg:x3; val_offset:11685*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11685*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3896:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:11688*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11688*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3897:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:11691*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11691*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3898:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:11694*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11694*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3899:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x291107 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x41d133 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7da91107; op2val:0xc141d133;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:11697*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11697*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3900:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x78000000; valaddr_reg:x3; val_offset:11700*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11700*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3901:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x78000001; valaddr_reg:x3; val_offset:11703*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11703*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3902:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x78000003; valaddr_reg:x3; val_offset:11706*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11706*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3903:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x78000007; valaddr_reg:x3; val_offset:11709*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11709*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3904:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x7800000f; valaddr_reg:x3; val_offset:11712*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11712*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3905:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x7800001f; valaddr_reg:x3; val_offset:11715*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11715*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3906:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x7800003f; valaddr_reg:x3; val_offset:11718*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11718*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3907:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x7800007f; valaddr_reg:x3; val_offset:11721*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11721*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3908:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x780000ff; valaddr_reg:x3; val_offset:11724*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11724*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3909:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x780001ff; valaddr_reg:x3; val_offset:11727*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11727*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3910:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x780003ff; valaddr_reg:x3; val_offset:11730*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11730*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3911:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x780007ff; valaddr_reg:x3; val_offset:11733*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11733*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3912:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x78000fff; valaddr_reg:x3; val_offset:11736*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11736*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3913:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x78001fff; valaddr_reg:x3; val_offset:11739*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11739*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3914:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x78003fff; valaddr_reg:x3; val_offset:11742*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11742*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3915:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x78007fff; valaddr_reg:x3; val_offset:11745*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11745*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3916:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x7800ffff; valaddr_reg:x3; val_offset:11748*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11748*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3917:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x7801ffff; valaddr_reg:x3; val_offset:11751*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11751*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3918:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x7803ffff; valaddr_reg:x3; val_offset:11754*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11754*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3919:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x7807ffff; valaddr_reg:x3; val_offset:11757*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11757*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3920:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x780fffff; valaddr_reg:x3; val_offset:11760*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11760*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3921:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x781fffff; valaddr_reg:x3; val_offset:11763*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11763*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3922:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x783fffff; valaddr_reg:x3; val_offset:11766*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11766*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3923:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x78400000; valaddr_reg:x3; val_offset:11769*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11769*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3924:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x78600000; valaddr_reg:x3; val_offset:11772*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11772*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3925:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x78700000; valaddr_reg:x3; val_offset:11775*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11775*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3926:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x78780000; valaddr_reg:x3; val_offset:11778*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11778*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3927:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x787c0000; valaddr_reg:x3; val_offset:11781*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11781*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3928:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x787e0000; valaddr_reg:x3; val_offset:11784*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11784*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3929:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x787f0000; valaddr_reg:x3; val_offset:11787*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11787*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3930:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x787f8000; valaddr_reg:x3; val_offset:11790*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11790*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3931:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x787fc000; valaddr_reg:x3; val_offset:11793*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11793*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3932:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x787fe000; valaddr_reg:x3; val_offset:11796*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11796*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3933:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x787ff000; valaddr_reg:x3; val_offset:11799*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11799*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3934:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x787ff800; valaddr_reg:x3; val_offset:11802*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11802*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3935:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x787ffc00; valaddr_reg:x3; val_offset:11805*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11805*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3936:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x787ffe00; valaddr_reg:x3; val_offset:11808*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11808*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3937:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x787fff00; valaddr_reg:x3; val_offset:11811*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11811*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3938:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x787fff80; valaddr_reg:x3; val_offset:11814*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11814*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3939:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x787fffc0; valaddr_reg:x3; val_offset:11817*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11817*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3940:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x787fffe0; valaddr_reg:x3; val_offset:11820*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11820*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3941:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x787ffff0; valaddr_reg:x3; val_offset:11823*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11823*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3942:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x787ffff8; valaddr_reg:x3; val_offset:11826*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11826*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3943:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x787ffffc; valaddr_reg:x3; val_offset:11829*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11829*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3944:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x787ffffe; valaddr_reg:x3; val_offset:11832*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11832*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3945:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xf0 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x787fffff; valaddr_reg:x3; val_offset:11835*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11835*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3946:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x7f000001; valaddr_reg:x3; val_offset:11838*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11838*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3947:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x7f000003; valaddr_reg:x3; val_offset:11841*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11841*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3948:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x7f000007; valaddr_reg:x3; val_offset:11844*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11844*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3949:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x7f199999; valaddr_reg:x3; val_offset:11847*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11847*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3950:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x7f249249; valaddr_reg:x3; val_offset:11850*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11850*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3951:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x7f333333; valaddr_reg:x3; val_offset:11853*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11853*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3952:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:11856*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11856*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3953:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:11859*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11859*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3954:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x7f444444; valaddr_reg:x3; val_offset:11862*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11862*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3955:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:11865*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11865*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3956:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:11868*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11868*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3957:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x7f666666; valaddr_reg:x3; val_offset:11871*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11871*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3958:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:11874*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11874*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3959:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:11877*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11877*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3960:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:11880*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11880*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3961:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2b6085 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3f3442 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dab6085; op2val:0x413f3442;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:11883*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11883*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3962:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x63000000; valaddr_reg:x3; val_offset:11886*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11886*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3963:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x63000001; valaddr_reg:x3; val_offset:11889*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11889*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3964:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x63000003; valaddr_reg:x3; val_offset:11892*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11892*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3965:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x63000007; valaddr_reg:x3; val_offset:11895*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11895*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3966:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x6300000f; valaddr_reg:x3; val_offset:11898*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11898*0 + 3*30*FLEN/8, x4, x1, x2)

inst_3967:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x6300001f; valaddr_reg:x3; val_offset:11901*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11901*0 + 3*30*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4102029315,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4102029319,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4102029327,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4102029343,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4102029375,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4102029439,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4102029567,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4102029823,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4102030335,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4102031359,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4102033407,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4102037503,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4102045695,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4102062079,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4102094847,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4102160383,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4102291455,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4102553599,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4103077887,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4104126463,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4106223615,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4106223616,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4108320768,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4109369344,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4109893632,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4110155776,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4110286848,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4110352384,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4110385152,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4110401536,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4110409728,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4110413824,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4110415872,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4110416896,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4110417408,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4110417664,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4110417792,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4110417856,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4110417888,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4110417904,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4110417912,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4110417916,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4110417918,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4110417919,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2108231943,32,FLEN)
NAN_BOXED(3242316083,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2013265920,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2013265921,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2013265923,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2013265927,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2013265935,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2013265951,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2013265983,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2013266047,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2013266175,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2013266431,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2013266943,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2013267967,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2013270015,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2013274111,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2013282303,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2013298687,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2013331455,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2013396991,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2013528063,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2013790207,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2014314495,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2015363071,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2017460223,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2017460224,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2019557376,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2020605952,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2021130240,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2021392384,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2021523456,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2021588992,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2021621760,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2021638144,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2021646336,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2021650432,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2021652480,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2021653504,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2021654016,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2021654272,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2021654400,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2021654464,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2021654496,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2021654512,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2021654520,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2021654524,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2021654526,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2021654527,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2108383365,32,FLEN)
NAN_BOXED(1094661186,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1660944384,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1660944385,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1660944387,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1660944391,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1660944399,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1660944415,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
