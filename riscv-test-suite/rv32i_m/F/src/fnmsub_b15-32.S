
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_3968:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x6300003f; valaddr_reg:x3; val_offset:11904*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11904*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3969:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x6300007f; valaddr_reg:x3; val_offset:11907*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11907*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3970:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x630000ff; valaddr_reg:x3; val_offset:11910*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11910*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3971:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x630001ff; valaddr_reg:x3; val_offset:11913*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11913*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3972:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x630003ff; valaddr_reg:x3; val_offset:11916*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11916*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3973:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x630007ff; valaddr_reg:x3; val_offset:11919*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11919*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3974:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x63000fff; valaddr_reg:x3; val_offset:11922*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11922*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3975:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x63001fff; valaddr_reg:x3; val_offset:11925*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11925*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3976:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x63003fff; valaddr_reg:x3; val_offset:11928*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11928*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3977:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x63007fff; valaddr_reg:x3; val_offset:11931*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11931*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3978:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x6300ffff; valaddr_reg:x3; val_offset:11934*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11934*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3979:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x6301ffff; valaddr_reg:x3; val_offset:11937*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11937*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3980:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x6303ffff; valaddr_reg:x3; val_offset:11940*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11940*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3981:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x6307ffff; valaddr_reg:x3; val_offset:11943*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11943*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3982:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x630fffff; valaddr_reg:x3; val_offset:11946*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11946*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3983:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x631fffff; valaddr_reg:x3; val_offset:11949*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11949*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3984:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x633fffff; valaddr_reg:x3; val_offset:11952*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11952*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3985:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x63400000; valaddr_reg:x3; val_offset:11955*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11955*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3986:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x63600000; valaddr_reg:x3; val_offset:11958*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11958*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3987:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x63700000; valaddr_reg:x3; val_offset:11961*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11961*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3988:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x63780000; valaddr_reg:x3; val_offset:11964*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11964*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3989:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x637c0000; valaddr_reg:x3; val_offset:11967*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11967*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3990:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x637e0000; valaddr_reg:x3; val_offset:11970*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11970*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3991:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x637f0000; valaddr_reg:x3; val_offset:11973*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11973*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3992:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x637f8000; valaddr_reg:x3; val_offset:11976*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11976*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3993:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x637fc000; valaddr_reg:x3; val_offset:11979*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11979*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3994:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x637fe000; valaddr_reg:x3; val_offset:11982*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11982*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3995:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x637ff000; valaddr_reg:x3; val_offset:11985*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11985*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3996:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x637ff800; valaddr_reg:x3; val_offset:11988*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11988*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3997:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x637ffc00; valaddr_reg:x3; val_offset:11991*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11991*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3998:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x637ffe00; valaddr_reg:x3; val_offset:11994*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11994*0 + 3*31*FLEN/8, x4, x1, x2)

inst_3999:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x637fff00; valaddr_reg:x3; val_offset:11997*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 11997*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4000:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x637fff80; valaddr_reg:x3; val_offset:12000*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12000*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4001:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x637fffc0; valaddr_reg:x3; val_offset:12003*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12003*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4002:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x637fffe0; valaddr_reg:x3; val_offset:12006*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12006*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4003:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x637ffff0; valaddr_reg:x3; val_offset:12009*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12009*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4004:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x637ffff8; valaddr_reg:x3; val_offset:12012*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12012*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4005:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x637ffffc; valaddr_reg:x3; val_offset:12015*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12015*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4006:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x637ffffe; valaddr_reg:x3; val_offset:12018*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12018*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4007:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xc6 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x637fffff; valaddr_reg:x3; val_offset:12021*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12021*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4008:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x7f000001; valaddr_reg:x3; val_offset:12024*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12024*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4009:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x7f000003; valaddr_reg:x3; val_offset:12027*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12027*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4010:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x7f000007; valaddr_reg:x3; val_offset:12030*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12030*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4011:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x7f199999; valaddr_reg:x3; val_offset:12033*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12033*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4012:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x7f249249; valaddr_reg:x3; val_offset:12036*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12036*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4013:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x7f333333; valaddr_reg:x3; val_offset:12039*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12039*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4014:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:12042*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12042*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4015:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:12045*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12045*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4016:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x7f444444; valaddr_reg:x3; val_offset:12048*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12048*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4017:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:12051*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12051*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4018:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:12054*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12054*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4019:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x7f666666; valaddr_reg:x3; val_offset:12057*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12057*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4020:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:12060*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12060*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4021:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:12063*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12063*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4022:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:12066*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12066*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4023:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x2c2cae and fs2 == 0 and fe2 == 0x82 and fm2 == 0x3e5188 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dac2cae; op2val:0x413e5188;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:12069*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12069*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4024:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x3f800001; valaddr_reg:x3; val_offset:12072*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12072*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4025:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x3f800003; valaddr_reg:x3; val_offset:12075*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12075*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4026:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x3f800007; valaddr_reg:x3; val_offset:12078*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12078*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4027:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x3f999999; valaddr_reg:x3; val_offset:12081*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12081*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4028:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:12084*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12084*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4029:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:12087*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12087*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4030:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:12090*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12090*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4031:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:12093*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12093*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4032:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:12096*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12096*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4033:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:12099*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12099*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4034:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:12102*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12102*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4035:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:12105*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12105*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4036:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:12108*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12108*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4037:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:12111*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12111*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4038:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:12114*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12114*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4039:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:12117*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12117*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4040:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4b800000; valaddr_reg:x3; val_offset:12120*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12120*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4041:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4b800001; valaddr_reg:x3; val_offset:12123*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12123*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4042:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4b800003; valaddr_reg:x3; val_offset:12126*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12126*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4043:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4b800007; valaddr_reg:x3; val_offset:12129*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12129*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4044:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4b80000f; valaddr_reg:x3; val_offset:12132*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12132*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4045:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4b80001f; valaddr_reg:x3; val_offset:12135*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12135*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4046:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4b80003f; valaddr_reg:x3; val_offset:12138*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12138*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4047:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4b80007f; valaddr_reg:x3; val_offset:12141*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12141*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4048:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4b8000ff; valaddr_reg:x3; val_offset:12144*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12144*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4049:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4b8001ff; valaddr_reg:x3; val_offset:12147*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12147*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4050:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4b8003ff; valaddr_reg:x3; val_offset:12150*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12150*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4051:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4b8007ff; valaddr_reg:x3; val_offset:12153*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12153*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4052:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4b800fff; valaddr_reg:x3; val_offset:12156*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12156*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4053:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4b801fff; valaddr_reg:x3; val_offset:12159*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12159*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4054:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4b803fff; valaddr_reg:x3; val_offset:12162*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12162*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4055:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4b807fff; valaddr_reg:x3; val_offset:12165*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12165*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4056:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4b80ffff; valaddr_reg:x3; val_offset:12168*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12168*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4057:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4b81ffff; valaddr_reg:x3; val_offset:12171*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12171*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4058:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4b83ffff; valaddr_reg:x3; val_offset:12174*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12174*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4059:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4b87ffff; valaddr_reg:x3; val_offset:12177*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12177*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4060:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4b8fffff; valaddr_reg:x3; val_offset:12180*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12180*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4061:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4b9fffff; valaddr_reg:x3; val_offset:12183*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12183*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4062:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4bbfffff; valaddr_reg:x3; val_offset:12186*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12186*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4063:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4bc00000; valaddr_reg:x3; val_offset:12189*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12189*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4064:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4be00000; valaddr_reg:x3; val_offset:12192*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12192*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4065:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4bf00000; valaddr_reg:x3; val_offset:12195*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12195*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4066:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4bf80000; valaddr_reg:x3; val_offset:12198*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12198*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4067:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4bfc0000; valaddr_reg:x3; val_offset:12201*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12201*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4068:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4bfe0000; valaddr_reg:x3; val_offset:12204*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12204*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4069:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4bff0000; valaddr_reg:x3; val_offset:12207*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12207*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4070:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4bff8000; valaddr_reg:x3; val_offset:12210*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12210*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4071:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4bffc000; valaddr_reg:x3; val_offset:12213*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12213*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4072:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4bffe000; valaddr_reg:x3; val_offset:12216*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12216*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4073:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4bfff000; valaddr_reg:x3; val_offset:12219*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12219*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4074:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4bfff800; valaddr_reg:x3; val_offset:12222*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12222*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4075:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4bfffc00; valaddr_reg:x3; val_offset:12225*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12225*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4076:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4bfffe00; valaddr_reg:x3; val_offset:12228*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12228*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4077:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4bffff00; valaddr_reg:x3; val_offset:12231*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12231*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4078:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4bffff80; valaddr_reg:x3; val_offset:12234*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12234*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4079:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4bffffc0; valaddr_reg:x3; val_offset:12237*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12237*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4080:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4bffffe0; valaddr_reg:x3; val_offset:12240*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12240*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4081:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4bfffff0; valaddr_reg:x3; val_offset:12243*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12243*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4082:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4bfffff8; valaddr_reg:x3; val_offset:12246*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12246*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4083:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4bfffffc; valaddr_reg:x3; val_offset:12249*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12249*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4084:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4bfffffe; valaddr_reg:x3; val_offset:12252*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12252*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4085:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x39bb69 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x306d19 and fs3 == 0 and fe3 == 0x97 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7db9bb69; op2val:0x1306d19;
op3val:0x4bffffff; valaddr_reg:x3; val_offset:12255*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12255*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4086:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a4a99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba4a99; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:12258*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12258*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4087:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a4a99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba4a99; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:12261*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12261*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4088:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a4a99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba4a99; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:12264*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12264*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4089:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a4a99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba4a99; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:12267*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12267*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4090:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a4a99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba4a99; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:12270*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12270*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4091:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a4a99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba4a99; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:12273*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12273*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4092:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a4a99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba4a99; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:12276*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12276*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4093:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a4a99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba4a99; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:12279*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12279*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4094:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a4a99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba4a99; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:12282*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12282*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4095:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3a4a99 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dba4a99; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:12285*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 12285*0 + 3*31*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1660944447,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1660944511,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1660944639,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1660944895,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1660945407,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1660946431,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1660948479,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1660952575,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1660960767,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1660977151,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1661009919,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1661075455,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1661206527,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1661468671,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1661992959,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1663041535,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1665138687,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1665138688,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1667235840,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1668284416,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1668808704,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1669070848,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1669201920,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1669267456,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1669300224,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1669316608,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1669324800,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1669328896,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1669330944,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1669331968,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1669332480,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1669332736,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1669332864,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1669332928,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1669332960,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1669332976,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1669332984,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1669332988,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1669332990,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(1669332991,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2108435630,32,FLEN)
NAN_BOXED(1094603144,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1266679808,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1266679809,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1266679811,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1266679815,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1266679823,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1266679839,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1266679871,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1266679935,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1266680063,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1266680319,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1266680831,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1266681855,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1266683903,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1266687999,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1266696191,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1266712575,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1266745343,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1266810879,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1266941951,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1267204095,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1267728383,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1268776959,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1270874111,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1270874112,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1272971264,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1274019840,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1274544128,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1274806272,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1274937344,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1275002880,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1275035648,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1275052032,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1275060224,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1275064320,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1275066368,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1275067392,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1275067904,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1275068160,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1275068288,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1275068352,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1275068384,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1275068400,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1275068408,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1275068412,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1275068414,32,FLEN)
NAN_BOXED(2109324137,32,FLEN)
NAN_BOXED(19950873,32,FLEN)
NAN_BOXED(1275068415,32,FLEN)
NAN_BOXED(2109360793,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2109360793,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2109360793,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2109360793,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2109360793,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2109360793,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2109360793,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2109360793,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2109360793,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2109360793,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
