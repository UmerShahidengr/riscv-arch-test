
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_4352:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xfe03ffff; valaddr_reg:x3; val_offset:13056*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13056*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4353:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xfe07ffff; valaddr_reg:x3; val_offset:13059*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13059*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4354:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xfe0fffff; valaddr_reg:x3; val_offset:13062*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13062*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4355:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xfe1fffff; valaddr_reg:x3; val_offset:13065*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13065*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4356:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xfe3fffff; valaddr_reg:x3; val_offset:13068*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13068*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4357:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xfe400000; valaddr_reg:x3; val_offset:13071*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13071*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4358:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xfe600000; valaddr_reg:x3; val_offset:13074*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13074*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4359:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xfe700000; valaddr_reg:x3; val_offset:13077*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13077*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4360:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xfe780000; valaddr_reg:x3; val_offset:13080*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13080*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4361:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xfe7c0000; valaddr_reg:x3; val_offset:13083*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13083*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4362:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xfe7e0000; valaddr_reg:x3; val_offset:13086*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13086*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4363:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xfe7f0000; valaddr_reg:x3; val_offset:13089*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13089*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4364:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xfe7f8000; valaddr_reg:x3; val_offset:13092*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13092*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4365:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xfe7fc000; valaddr_reg:x3; val_offset:13095*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13095*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4366:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xfe7fe000; valaddr_reg:x3; val_offset:13098*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13098*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4367:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xfe7ff000; valaddr_reg:x3; val_offset:13101*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13101*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4368:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xfe7ff800; valaddr_reg:x3; val_offset:13104*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13104*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4369:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xfe7ffc00; valaddr_reg:x3; val_offset:13107*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13107*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4370:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xfe7ffe00; valaddr_reg:x3; val_offset:13110*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13110*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4371:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xfe7fff00; valaddr_reg:x3; val_offset:13113*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13113*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4372:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xfe7fff80; valaddr_reg:x3; val_offset:13116*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13116*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4373:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xfe7fffc0; valaddr_reg:x3; val_offset:13119*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13119*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4374:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xfe7fffe0; valaddr_reg:x3; val_offset:13122*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13122*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4375:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xfe7ffff0; valaddr_reg:x3; val_offset:13125*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13125*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4376:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xfe7ffff8; valaddr_reg:x3; val_offset:13128*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13128*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4377:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xfe7ffffc; valaddr_reg:x3; val_offset:13131*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13131*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4378:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xfe7ffffe; valaddr_reg:x3; val_offset:13134*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13134*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4379:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfc and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xfe7fffff; valaddr_reg:x3; val_offset:13137*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13137*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4380:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xff000001; valaddr_reg:x3; val_offset:13140*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13140*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4381:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xff000003; valaddr_reg:x3; val_offset:13143*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13143*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4382:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xff000007; valaddr_reg:x3; val_offset:13146*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13146*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4383:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xff199999; valaddr_reg:x3; val_offset:13149*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13149*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4384:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xff249249; valaddr_reg:x3; val_offset:13152*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13152*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4385:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xff333333; valaddr_reg:x3; val_offset:13155*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13155*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4386:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:13158*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13158*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4387:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:13161*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13161*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4388:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xff444444; valaddr_reg:x3; val_offset:13164*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13164*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4389:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:13167*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13167*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4390:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:13170*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13170*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4391:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xff666666; valaddr_reg:x3; val_offset:13173*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13173*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4392:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:13176*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13176*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4393:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:13179*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13179*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4394:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:13182*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13182*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4395:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3e6163 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x2c1e57 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbe6163; op2val:0xc12c1e57;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:13185*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13185*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4396:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xbf800001; valaddr_reg:x3; val_offset:13188*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13188*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4397:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xbf800003; valaddr_reg:x3; val_offset:13191*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13191*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4398:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xbf800007; valaddr_reg:x3; val_offset:13194*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13194*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4399:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xbf999999; valaddr_reg:x3; val_offset:13197*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13197*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4400:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:13200*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13200*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4401:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:13203*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13203*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4402:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:13206*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13206*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4403:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:13209*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13209*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4404:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:13212*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13212*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4405:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:13215*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13215*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4406:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:13218*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13218*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4407:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:13221*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13221*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4408:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:13224*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13224*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4409:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:13227*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13227*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4410:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:13230*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13230*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4411:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:13233*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13233*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4412:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2800000; valaddr_reg:x3; val_offset:13236*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13236*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4413:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2800001; valaddr_reg:x3; val_offset:13239*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13239*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4414:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2800003; valaddr_reg:x3; val_offset:13242*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13242*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4415:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2800007; valaddr_reg:x3; val_offset:13245*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13245*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4416:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc280000f; valaddr_reg:x3; val_offset:13248*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13248*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4417:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc280001f; valaddr_reg:x3; val_offset:13251*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13251*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4418:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc280003f; valaddr_reg:x3; val_offset:13254*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13254*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4419:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc280007f; valaddr_reg:x3; val_offset:13257*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13257*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4420:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc28000ff; valaddr_reg:x3; val_offset:13260*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13260*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4421:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc28001ff; valaddr_reg:x3; val_offset:13263*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13263*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4422:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc28003ff; valaddr_reg:x3; val_offset:13266*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13266*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4423:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc28007ff; valaddr_reg:x3; val_offset:13269*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13269*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4424:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2800fff; valaddr_reg:x3; val_offset:13272*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13272*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4425:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2801fff; valaddr_reg:x3; val_offset:13275*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13275*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4426:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2803fff; valaddr_reg:x3; val_offset:13278*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13278*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4427:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2807fff; valaddr_reg:x3; val_offset:13281*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13281*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4428:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc280ffff; valaddr_reg:x3; val_offset:13284*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13284*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4429:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc281ffff; valaddr_reg:x3; val_offset:13287*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13287*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4430:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc283ffff; valaddr_reg:x3; val_offset:13290*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13290*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4431:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc287ffff; valaddr_reg:x3; val_offset:13293*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13293*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4432:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc28fffff; valaddr_reg:x3; val_offset:13296*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13296*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4433:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc29fffff; valaddr_reg:x3; val_offset:13299*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13299*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4434:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2bfffff; valaddr_reg:x3; val_offset:13302*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13302*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4435:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2c00000; valaddr_reg:x3; val_offset:13305*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13305*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4436:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2e00000; valaddr_reg:x3; val_offset:13308*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13308*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4437:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2f00000; valaddr_reg:x3; val_offset:13311*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13311*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4438:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2f80000; valaddr_reg:x3; val_offset:13314*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13314*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4439:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2fc0000; valaddr_reg:x3; val_offset:13317*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13317*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4440:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2fe0000; valaddr_reg:x3; val_offset:13320*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13320*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4441:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2ff0000; valaddr_reg:x3; val_offset:13323*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13323*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4442:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2ff8000; valaddr_reg:x3; val_offset:13326*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13326*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4443:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2ffc000; valaddr_reg:x3; val_offset:13329*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13329*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4444:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2ffe000; valaddr_reg:x3; val_offset:13332*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13332*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4445:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2fff000; valaddr_reg:x3; val_offset:13335*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13335*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4446:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2fff800; valaddr_reg:x3; val_offset:13338*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13338*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4447:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2fffc00; valaddr_reg:x3; val_offset:13341*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13341*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4448:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2fffe00; valaddr_reg:x3; val_offset:13344*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13344*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4449:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2ffff00; valaddr_reg:x3; val_offset:13347*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13347*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4450:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2ffff80; valaddr_reg:x3; val_offset:13350*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13350*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4451:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2ffffc0; valaddr_reg:x3; val_offset:13353*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13353*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4452:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2ffffe0; valaddr_reg:x3; val_offset:13356*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13356*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4453:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2fffff0; valaddr_reg:x3; val_offset:13359*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13359*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4454:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2fffff8; valaddr_reg:x3; val_offset:13362*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13362*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4455:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2fffffc; valaddr_reg:x3; val_offset:13365*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13365*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4456:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2fffffe; valaddr_reg:x3; val_offset:13368*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13368*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4457:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x3f6d07 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2b2db3 and fs3 == 1 and fe3 == 0x85 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dbf6d07; op2val:0x812b2db3;
op3val:0xc2ffffff; valaddr_reg:x3; val_offset:13371*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13371*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4458:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:13374*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13374*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4459:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:13377*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13377*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4460:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:13380*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13380*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4461:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:13383*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13383*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4462:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:13386*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13386*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4463:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:13389*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13389*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4464:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:13392*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13392*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4465:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:13395*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13395*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4466:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:13398*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13398*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4467:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:13401*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13401*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4468:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:13404*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13404*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4469:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:13407*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13407*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4470:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:13410*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13410*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4471:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:13413*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13413*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4472:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:13416*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13416*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4473:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:13419*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13419*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4474:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x6000000; valaddr_reg:x3; val_offset:13422*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13422*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4475:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x6000001; valaddr_reg:x3; val_offset:13425*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13425*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4476:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x6000003; valaddr_reg:x3; val_offset:13428*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13428*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4477:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x6000007; valaddr_reg:x3; val_offset:13431*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13431*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4478:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x600000f; valaddr_reg:x3; val_offset:13434*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13434*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4479:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x600001f; valaddr_reg:x3; val_offset:13437*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13437*0 + 3*34*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4261675007,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4261937151,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4262461439,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4263510015,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4265607167,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4265607168,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4267704320,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4268752896,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4269277184,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4269539328,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4269670400,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4269735936,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4269768704,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4269785088,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4269793280,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4269797376,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4269799424,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4269800448,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4269800960,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4269801216,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4269801344,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4269801408,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4269801440,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4269801456,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4269801464,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4269801468,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4269801470,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4269801471,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2109628771,32,FLEN)
NAN_BOXED(3240894039,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3263168512,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3263168513,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3263168515,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3263168519,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3263168527,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3263168543,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3263168575,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3263168639,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3263168767,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3263169023,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3263169535,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3263170559,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3263172607,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3263176703,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3263184895,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3263201279,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3263234047,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3263299583,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3263430655,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3263692799,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3264217087,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3265265663,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3267362815,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3267362816,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3269459968,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3270508544,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3271032832,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3271294976,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3271426048,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3271491584,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3271524352,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3271540736,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3271548928,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3271553024,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3271555072,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3271556096,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3271556608,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3271556864,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3271556992,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3271557056,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3271557088,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3271557104,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3271557112,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3271557116,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3271557118,32,FLEN)
NAN_BOXED(2109697287,32,FLEN)
NAN_BOXED(2167090611,32,FLEN)
NAN_BOXED(3271557119,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663296,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663297,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663299,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663303,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663311,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663327,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
