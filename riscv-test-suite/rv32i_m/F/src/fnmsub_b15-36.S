
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_4480:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x600003f; valaddr_reg:x3; val_offset:13440*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13440*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4481:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x600007f; valaddr_reg:x3; val_offset:13443*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13443*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4482:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x60000ff; valaddr_reg:x3; val_offset:13446*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13446*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4483:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x60001ff; valaddr_reg:x3; val_offset:13449*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13449*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4484:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x60003ff; valaddr_reg:x3; val_offset:13452*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13452*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4485:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x60007ff; valaddr_reg:x3; val_offset:13455*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13455*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4486:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x6000fff; valaddr_reg:x3; val_offset:13458*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13458*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4487:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x6001fff; valaddr_reg:x3; val_offset:13461*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13461*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4488:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x6003fff; valaddr_reg:x3; val_offset:13464*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13464*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4489:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x6007fff; valaddr_reg:x3; val_offset:13467*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13467*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4490:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x600ffff; valaddr_reg:x3; val_offset:13470*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13470*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4491:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x601ffff; valaddr_reg:x3; val_offset:13473*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13473*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4492:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x603ffff; valaddr_reg:x3; val_offset:13476*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13476*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4493:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x607ffff; valaddr_reg:x3; val_offset:13479*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13479*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4494:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x60fffff; valaddr_reg:x3; val_offset:13482*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13482*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4495:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x61fffff; valaddr_reg:x3; val_offset:13485*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13485*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4496:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x63fffff; valaddr_reg:x3; val_offset:13488*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13488*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4497:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x6400000; valaddr_reg:x3; val_offset:13491*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13491*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4498:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x6600000; valaddr_reg:x3; val_offset:13494*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13494*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4499:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x6700000; valaddr_reg:x3; val_offset:13497*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13497*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4500:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x6780000; valaddr_reg:x3; val_offset:13500*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13500*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4501:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x67c0000; valaddr_reg:x3; val_offset:13503*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13503*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4502:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x67e0000; valaddr_reg:x3; val_offset:13506*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13506*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4503:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x67f0000; valaddr_reg:x3; val_offset:13509*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13509*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4504:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x67f8000; valaddr_reg:x3; val_offset:13512*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13512*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4505:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x67fc000; valaddr_reg:x3; val_offset:13515*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13515*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4506:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x67fe000; valaddr_reg:x3; val_offset:13518*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13518*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4507:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x67ff000; valaddr_reg:x3; val_offset:13521*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13521*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4508:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x67ff800; valaddr_reg:x3; val_offset:13524*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13524*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4509:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x67ffc00; valaddr_reg:x3; val_offset:13527*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13527*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4510:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x67ffe00; valaddr_reg:x3; val_offset:13530*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13530*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4511:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x67fff00; valaddr_reg:x3; val_offset:13533*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13533*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4512:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x67fff80; valaddr_reg:x3; val_offset:13536*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13536*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4513:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x67fffc0; valaddr_reg:x3; val_offset:13539*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13539*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4514:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x67fffe0; valaddr_reg:x3; val_offset:13542*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13542*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4515:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x67ffff0; valaddr_reg:x3; val_offset:13545*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13545*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4516:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x67ffff8; valaddr_reg:x3; val_offset:13548*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13548*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4517:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x67ffffc; valaddr_reg:x3; val_offset:13551*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13551*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4518:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x67ffffe; valaddr_reg:x3; val_offset:13554*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13554*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4519:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x40a745 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc0a745; op2val:0x0;
op3val:0x67fffff; valaddr_reg:x3; val_offset:13557*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13557*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4520:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xbf800001; valaddr_reg:x3; val_offset:13560*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13560*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4521:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xbf800003; valaddr_reg:x3; val_offset:13563*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13563*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4522:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xbf800007; valaddr_reg:x3; val_offset:13566*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13566*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4523:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xbf999999; valaddr_reg:x3; val_offset:13569*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13569*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4524:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:13572*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13572*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4525:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:13575*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13575*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4526:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:13578*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13578*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4527:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:13581*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13581*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4528:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:13584*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13584*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4529:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:13587*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13587*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4530:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:13590*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13590*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4531:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:13593*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13593*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4532:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:13596*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13596*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4533:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:13599*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13599*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4534:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:13602*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13602*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4535:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:13605*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13605*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4536:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc2000000; valaddr_reg:x3; val_offset:13608*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13608*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4537:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc2000001; valaddr_reg:x3; val_offset:13611*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13611*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4538:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc2000003; valaddr_reg:x3; val_offset:13614*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13614*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4539:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc2000007; valaddr_reg:x3; val_offset:13617*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13617*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4540:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc200000f; valaddr_reg:x3; val_offset:13620*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13620*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4541:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc200001f; valaddr_reg:x3; val_offset:13623*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13623*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4542:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc200003f; valaddr_reg:x3; val_offset:13626*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13626*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4543:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc200007f; valaddr_reg:x3; val_offset:13629*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13629*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4544:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc20000ff; valaddr_reg:x3; val_offset:13632*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13632*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4545:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc20001ff; valaddr_reg:x3; val_offset:13635*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13635*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4546:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc20003ff; valaddr_reg:x3; val_offset:13638*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13638*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4547:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc20007ff; valaddr_reg:x3; val_offset:13641*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13641*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4548:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc2000fff; valaddr_reg:x3; val_offset:13644*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13644*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4549:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc2001fff; valaddr_reg:x3; val_offset:13647*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13647*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4550:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc2003fff; valaddr_reg:x3; val_offset:13650*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13650*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4551:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc2007fff; valaddr_reg:x3; val_offset:13653*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13653*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4552:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc200ffff; valaddr_reg:x3; val_offset:13656*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13656*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4553:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc201ffff; valaddr_reg:x3; val_offset:13659*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13659*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4554:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc203ffff; valaddr_reg:x3; val_offset:13662*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13662*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4555:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc207ffff; valaddr_reg:x3; val_offset:13665*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13665*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4556:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc20fffff; valaddr_reg:x3; val_offset:13668*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13668*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4557:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc21fffff; valaddr_reg:x3; val_offset:13671*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13671*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4558:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc23fffff; valaddr_reg:x3; val_offset:13674*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13674*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4559:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc2400000; valaddr_reg:x3; val_offset:13677*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13677*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4560:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc2600000; valaddr_reg:x3; val_offset:13680*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13680*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4561:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc2700000; valaddr_reg:x3; val_offset:13683*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13683*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4562:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc2780000; valaddr_reg:x3; val_offset:13686*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13686*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4563:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc27c0000; valaddr_reg:x3; val_offset:13689*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13689*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4564:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc27e0000; valaddr_reg:x3; val_offset:13692*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13692*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4565:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc27f0000; valaddr_reg:x3; val_offset:13695*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13695*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4566:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc27f8000; valaddr_reg:x3; val_offset:13698*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13698*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4567:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc27fc000; valaddr_reg:x3; val_offset:13701*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13701*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4568:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc27fe000; valaddr_reg:x3; val_offset:13704*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13704*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4569:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc27ff000; valaddr_reg:x3; val_offset:13707*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13707*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4570:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc27ff800; valaddr_reg:x3; val_offset:13710*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13710*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4571:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc27ffc00; valaddr_reg:x3; val_offset:13713*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13713*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4572:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc27ffe00; valaddr_reg:x3; val_offset:13716*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13716*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4573:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc27fff00; valaddr_reg:x3; val_offset:13719*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13719*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4574:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc27fff80; valaddr_reg:x3; val_offset:13722*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13722*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4575:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc27fffc0; valaddr_reg:x3; val_offset:13725*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13725*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4576:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc27fffe0; valaddr_reg:x3; val_offset:13728*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13728*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4577:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc27ffff0; valaddr_reg:x3; val_offset:13731*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13731*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4578:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc27ffff8; valaddr_reg:x3; val_offset:13734*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13734*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4579:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc27ffffc; valaddr_reg:x3; val_offset:13737*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13737*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4580:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc27ffffe; valaddr_reg:x3; val_offset:13740*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13740*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4581:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x42dcac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x2828f7 and fs3 == 1 and fe3 == 0x84 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc2dcac; op2val:0x812828f7;
op3val:0xc27fffff; valaddr_reg:x3; val_offset:13743*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13743*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4582:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x66000000; valaddr_reg:x3; val_offset:13746*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13746*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4583:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x66000001; valaddr_reg:x3; val_offset:13749*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13749*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4584:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x66000003; valaddr_reg:x3; val_offset:13752*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13752*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4585:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x66000007; valaddr_reg:x3; val_offset:13755*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13755*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4586:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x6600000f; valaddr_reg:x3; val_offset:13758*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13758*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4587:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x6600001f; valaddr_reg:x3; val_offset:13761*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13761*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4588:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x6600003f; valaddr_reg:x3; val_offset:13764*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13764*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4589:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x6600007f; valaddr_reg:x3; val_offset:13767*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13767*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4590:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x660000ff; valaddr_reg:x3; val_offset:13770*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13770*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4591:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x660001ff; valaddr_reg:x3; val_offset:13773*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13773*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4592:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x660003ff; valaddr_reg:x3; val_offset:13776*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13776*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4593:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x660007ff; valaddr_reg:x3; val_offset:13779*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13779*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4594:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x66000fff; valaddr_reg:x3; val_offset:13782*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13782*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4595:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x66001fff; valaddr_reg:x3; val_offset:13785*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13785*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4596:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x66003fff; valaddr_reg:x3; val_offset:13788*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13788*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4597:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x66007fff; valaddr_reg:x3; val_offset:13791*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13791*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4598:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x6600ffff; valaddr_reg:x3; val_offset:13794*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13794*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4599:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x6601ffff; valaddr_reg:x3; val_offset:13797*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13797*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4600:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x6603ffff; valaddr_reg:x3; val_offset:13800*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13800*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4601:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x6607ffff; valaddr_reg:x3; val_offset:13803*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13803*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4602:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x660fffff; valaddr_reg:x3; val_offset:13806*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13806*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4603:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x661fffff; valaddr_reg:x3; val_offset:13809*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13809*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4604:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x663fffff; valaddr_reg:x3; val_offset:13812*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13812*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4605:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x66400000; valaddr_reg:x3; val_offset:13815*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13815*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4606:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x66600000; valaddr_reg:x3; val_offset:13818*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13818*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4607:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x66700000; valaddr_reg:x3; val_offset:13821*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13821*0 + 3*35*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663359,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663423,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663551,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100663807,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100664319,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100665343,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100667391,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100671487,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100679679,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100696063,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100728831,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100794367,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100925439,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(101187583,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(101711871,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(102760447,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(104857599,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(104857600,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(106954752,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108003328,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108527616,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108789760,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108920832,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(108986368,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109019136,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109035520,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109043712,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109047808,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109049856,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109050880,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051392,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051648,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051776,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051840,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051872,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051888,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051896,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051900,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051902,32,FLEN)
NAN_BOXED(2109777733,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(109051903,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3254779904,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3254779905,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3254779907,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3254779911,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3254779919,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3254779935,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3254779967,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3254780031,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3254780159,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3254780415,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3254780927,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3254781951,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3254783999,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3254788095,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3254796287,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3254812671,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3254845439,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3254910975,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3255042047,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3255304191,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3255828479,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3256877055,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3258974207,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3258974208,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3261071360,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3262119936,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3262644224,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3262906368,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3263037440,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3263102976,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3263135744,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3263152128,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3263160320,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3263164416,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3263166464,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3263167488,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3263168000,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3263168256,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3263168384,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3263168448,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3263168480,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3263168496,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3263168504,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3263168508,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3263168510,32,FLEN)
NAN_BOXED(2109922476,32,FLEN)
NAN_BOXED(2166892791,32,FLEN)
NAN_BOXED(3263168511,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1711276032,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1711276033,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1711276035,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1711276039,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1711276047,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1711276063,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1711276095,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1711276159,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1711276287,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1711276543,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1711277055,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1711278079,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1711280127,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1711284223,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1711292415,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1711308799,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1711341567,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1711407103,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1711538175,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1711800319,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1712324607,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1713373183,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1715470335,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1715470336,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1717567488,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1718616064,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
