
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_4608:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x66780000; valaddr_reg:x3; val_offset:13824*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13824*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4609:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x667c0000; valaddr_reg:x3; val_offset:13827*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13827*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4610:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x667e0000; valaddr_reg:x3; val_offset:13830*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13830*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4611:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x667f0000; valaddr_reg:x3; val_offset:13833*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13833*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4612:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x667f8000; valaddr_reg:x3; val_offset:13836*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13836*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4613:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x667fc000; valaddr_reg:x3; val_offset:13839*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13839*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4614:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x667fe000; valaddr_reg:x3; val_offset:13842*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13842*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4615:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x667ff000; valaddr_reg:x3; val_offset:13845*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13845*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4616:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x667ff800; valaddr_reg:x3; val_offset:13848*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13848*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4617:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x667ffc00; valaddr_reg:x3; val_offset:13851*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13851*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4618:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x667ffe00; valaddr_reg:x3; val_offset:13854*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13854*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4619:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x667fff00; valaddr_reg:x3; val_offset:13857*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13857*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4620:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x667fff80; valaddr_reg:x3; val_offset:13860*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13860*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4621:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x667fffc0; valaddr_reg:x3; val_offset:13863*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13863*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4622:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x667fffe0; valaddr_reg:x3; val_offset:13866*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13866*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4623:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x667ffff0; valaddr_reg:x3; val_offset:13869*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13869*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4624:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x667ffff8; valaddr_reg:x3; val_offset:13872*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13872*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4625:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x667ffffc; valaddr_reg:x3; val_offset:13875*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13875*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4626:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x667ffffe; valaddr_reg:x3; val_offset:13878*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13878*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4627:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xcc and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x667fffff; valaddr_reg:x3; val_offset:13881*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13881*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4628:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x7f000001; valaddr_reg:x3; val_offset:13884*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13884*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4629:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x7f000003; valaddr_reg:x3; val_offset:13887*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13887*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4630:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x7f000007; valaddr_reg:x3; val_offset:13890*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13890*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4631:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x7f199999; valaddr_reg:x3; val_offset:13893*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13893*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4632:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x7f249249; valaddr_reg:x3; val_offset:13896*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13896*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4633:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x7f333333; valaddr_reg:x3; val_offset:13899*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13899*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4634:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:13902*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13902*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4635:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:13905*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13905*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4636:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x7f444444; valaddr_reg:x3; val_offset:13908*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13908*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4637:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:13911*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13911*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4638:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:13914*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13914*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4639:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x7f666666; valaddr_reg:x3; val_offset:13917*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13917*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4640:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:13920*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13920*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4641:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:13923*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13923*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4642:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:13926*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13926*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4643:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4556e5 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x260c85 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc556e5; op2val:0x41260c85;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:13929*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13929*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4644:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xbf800001; valaddr_reg:x3; val_offset:13932*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13932*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4645:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xbf800003; valaddr_reg:x3; val_offset:13935*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13935*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4646:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xbf800007; valaddr_reg:x3; val_offset:13938*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13938*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4647:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xbf999999; valaddr_reg:x3; val_offset:13941*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13941*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4648:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:13944*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13944*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4649:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:13947*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13947*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4650:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:13950*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13950*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4651:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:13953*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13953*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4652:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:13956*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13956*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4653:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:13959*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13959*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4654:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:13962*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13962*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4655:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:13965*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13965*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4656:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:13968*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13968*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4657:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:13971*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13971*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4658:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:13974*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13974*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4659:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:13977*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13977*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4660:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5800000; valaddr_reg:x3; val_offset:13980*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13980*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4661:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5800001; valaddr_reg:x3; val_offset:13983*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13983*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4662:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5800003; valaddr_reg:x3; val_offset:13986*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13986*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4663:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5800007; valaddr_reg:x3; val_offset:13989*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13989*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4664:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf580000f; valaddr_reg:x3; val_offset:13992*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13992*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4665:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf580001f; valaddr_reg:x3; val_offset:13995*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13995*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4666:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf580003f; valaddr_reg:x3; val_offset:13998*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13998*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4667:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf580007f; valaddr_reg:x3; val_offset:14001*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14001*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4668:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf58000ff; valaddr_reg:x3; val_offset:14004*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14004*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4669:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf58001ff; valaddr_reg:x3; val_offset:14007*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14007*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4670:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf58003ff; valaddr_reg:x3; val_offset:14010*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14010*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4671:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf58007ff; valaddr_reg:x3; val_offset:14013*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14013*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4672:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5800fff; valaddr_reg:x3; val_offset:14016*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14016*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4673:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5801fff; valaddr_reg:x3; val_offset:14019*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14019*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4674:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5803fff; valaddr_reg:x3; val_offset:14022*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14022*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4675:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5807fff; valaddr_reg:x3; val_offset:14025*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14025*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4676:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf580ffff; valaddr_reg:x3; val_offset:14028*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14028*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4677:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf581ffff; valaddr_reg:x3; val_offset:14031*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14031*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4678:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf583ffff; valaddr_reg:x3; val_offset:14034*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14034*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4679:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf587ffff; valaddr_reg:x3; val_offset:14037*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14037*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4680:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf58fffff; valaddr_reg:x3; val_offset:14040*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14040*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4681:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf59fffff; valaddr_reg:x3; val_offset:14043*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14043*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4682:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5bfffff; valaddr_reg:x3; val_offset:14046*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14046*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4683:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5c00000; valaddr_reg:x3; val_offset:14049*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14049*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4684:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5e00000; valaddr_reg:x3; val_offset:14052*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14052*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4685:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5f00000; valaddr_reg:x3; val_offset:14055*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14055*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4686:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5f80000; valaddr_reg:x3; val_offset:14058*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14058*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4687:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5fc0000; valaddr_reg:x3; val_offset:14061*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14061*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4688:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5fe0000; valaddr_reg:x3; val_offset:14064*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14064*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4689:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5ff0000; valaddr_reg:x3; val_offset:14067*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14067*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4690:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5ff8000; valaddr_reg:x3; val_offset:14070*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14070*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4691:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5ffc000; valaddr_reg:x3; val_offset:14073*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14073*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4692:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5ffe000; valaddr_reg:x3; val_offset:14076*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14076*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4693:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5fff000; valaddr_reg:x3; val_offset:14079*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14079*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4694:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5fff800; valaddr_reg:x3; val_offset:14082*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14082*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4695:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5fffc00; valaddr_reg:x3; val_offset:14085*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14085*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4696:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5fffe00; valaddr_reg:x3; val_offset:14088*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14088*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4697:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5ffff00; valaddr_reg:x3; val_offset:14091*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14091*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4698:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5ffff80; valaddr_reg:x3; val_offset:14094*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14094*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4699:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5ffffc0; valaddr_reg:x3; val_offset:14097*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14097*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4700:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5ffffe0; valaddr_reg:x3; val_offset:14100*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14100*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4701:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5fffff0; valaddr_reg:x3; val_offset:14103*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14103*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4702:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5fffff8; valaddr_reg:x3; val_offset:14106*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14106*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4703:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5fffffc; valaddr_reg:x3; val_offset:14109*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14109*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4704:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5fffffe; valaddr_reg:x3; val_offset:14112*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14112*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4705:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4733d7 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x247ef4 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc733d7; op2val:0x81247ef4;
op3val:0xf5ffffff; valaddr_reg:x3; val_offset:14115*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14115*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4706:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:14118*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14118*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4707:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:14121*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14121*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4708:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:14124*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14124*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4709:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:14127*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14127*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4710:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:14130*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14130*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4711:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:14133*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14133*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4712:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:14136*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14136*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4713:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:14139*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14139*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4714:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:14142*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14142*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4715:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:14145*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14145*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4716:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:14148*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14148*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4717:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:14151*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14151*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4718:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:14154*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14154*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4719:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:14157*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14157*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4720:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:14160*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14160*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4721:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:14163*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14163*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4722:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x4800000; valaddr_reg:x3; val_offset:14166*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14166*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4723:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x4800001; valaddr_reg:x3; val_offset:14169*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14169*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4724:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x4800003; valaddr_reg:x3; val_offset:14172*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14172*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4725:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x4800007; valaddr_reg:x3; val_offset:14175*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14175*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4726:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x480000f; valaddr_reg:x3; val_offset:14178*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14178*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4727:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x480001f; valaddr_reg:x3; val_offset:14181*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14181*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4728:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x480003f; valaddr_reg:x3; val_offset:14184*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14184*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4729:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x480007f; valaddr_reg:x3; val_offset:14187*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14187*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4730:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x48000ff; valaddr_reg:x3; val_offset:14190*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14190*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4731:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x48001ff; valaddr_reg:x3; val_offset:14193*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14193*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4732:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x48003ff; valaddr_reg:x3; val_offset:14196*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14196*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4733:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x48007ff; valaddr_reg:x3; val_offset:14199*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14199*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4734:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x4800fff; valaddr_reg:x3; val_offset:14202*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14202*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4735:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x483df3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x09 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc83df3; op2val:0x0;
op3val:0x4801fff; valaddr_reg:x3; val_offset:14205*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14205*0 + 3*36*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1719140352,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1719402496,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1719533568,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1719599104,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1719631872,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1719648256,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1719656448,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1719660544,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1719662592,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1719663616,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1719664128,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1719664384,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1719664512,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1719664576,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1719664608,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1719664624,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1719664632,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1719664636,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1719664638,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(1719664639,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2110084837,32,FLEN)
NAN_BOXED(1093012613,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4118806528,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4118806529,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4118806531,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4118806535,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4118806543,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4118806559,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4118806591,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4118806655,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4118806783,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4118807039,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4118807551,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4118808575,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4118810623,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4118814719,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4118822911,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4118839295,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4118872063,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4118937599,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4119068671,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4119330815,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4119855103,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4120903679,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4123000831,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4123000832,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4125097984,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4126146560,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4126670848,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4126932992,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4127064064,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4127129600,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4127162368,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4127178752,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4127186944,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4127191040,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4127193088,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4127194112,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4127194624,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4127194880,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4127195008,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4127195072,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4127195104,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4127195120,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4127195128,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4127195132,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4127195134,32,FLEN)
NAN_BOXED(2110206935,32,FLEN)
NAN_BOXED(2166652660,32,FLEN)
NAN_BOXED(4127195135,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497472,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497473,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497475,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497479,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497487,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497503,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497535,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497599,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497727,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75497983,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75498495,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75499519,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75501567,32,FLEN)
NAN_BOXED(2110275059,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(75505663,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
