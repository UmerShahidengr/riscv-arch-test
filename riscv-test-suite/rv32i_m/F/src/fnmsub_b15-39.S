
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_4864:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e0d93 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce0d93; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:14592*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14592*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4865:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e0d93 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce0d93; op2val:0x80000000;
op3val:0x80700000; valaddr_reg:x3; val_offset:14595*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14595*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4866:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e0d93 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce0d93; op2val:0x80000000;
op3val:0x80780000; valaddr_reg:x3; val_offset:14598*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14598*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4867:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e0d93 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce0d93; op2val:0x80000000;
op3val:0x807c0000; valaddr_reg:x3; val_offset:14601*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14601*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4868:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e0d93 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce0d93; op2val:0x80000000;
op3val:0x807e0000; valaddr_reg:x3; val_offset:14604*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14604*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4869:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e0d93 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce0d93; op2val:0x80000000;
op3val:0x807f0000; valaddr_reg:x3; val_offset:14607*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14607*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4870:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e0d93 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce0d93; op2val:0x80000000;
op3val:0x807f8000; valaddr_reg:x3; val_offset:14610*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14610*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4871:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e0d93 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce0d93; op2val:0x80000000;
op3val:0x807fc000; valaddr_reg:x3; val_offset:14613*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14613*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4872:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e0d93 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce0d93; op2val:0x80000000;
op3val:0x807fe000; valaddr_reg:x3; val_offset:14616*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14616*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4873:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e0d93 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce0d93; op2val:0x80000000;
op3val:0x807ff000; valaddr_reg:x3; val_offset:14619*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14619*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4874:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e0d93 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce0d93; op2val:0x80000000;
op3val:0x807ff800; valaddr_reg:x3; val_offset:14622*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14622*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4875:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e0d93 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce0d93; op2val:0x80000000;
op3val:0x807ffc00; valaddr_reg:x3; val_offset:14625*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14625*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4876:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e0d93 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce0d93; op2val:0x80000000;
op3val:0x807ffe00; valaddr_reg:x3; val_offset:14628*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14628*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4877:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e0d93 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce0d93; op2val:0x80000000;
op3val:0x807fff00; valaddr_reg:x3; val_offset:14631*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14631*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4878:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e0d93 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce0d93; op2val:0x80000000;
op3val:0x807fff80; valaddr_reg:x3; val_offset:14634*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14634*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4879:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e0d93 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce0d93; op2val:0x80000000;
op3val:0x807fffc0; valaddr_reg:x3; val_offset:14637*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14637*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4880:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e0d93 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce0d93; op2val:0x80000000;
op3val:0x807fffe0; valaddr_reg:x3; val_offset:14640*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14640*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4881:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e0d93 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce0d93; op2val:0x80000000;
op3val:0x807ffff0; valaddr_reg:x3; val_offset:14643*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14643*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4882:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e0d93 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce0d93; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:14646*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14646*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4883:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e0d93 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce0d93; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:14649*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14649*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4884:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e0d93 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce0d93; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:14652*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14652*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4885:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e0d93 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce0d93; op2val:0x80000000;
op3val:0x807fffff; valaddr_reg:x3; val_offset:14655*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14655*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4886:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8800000; valaddr_reg:x3; val_offset:14658*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14658*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4887:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8800001; valaddr_reg:x3; val_offset:14661*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14661*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4888:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8800003; valaddr_reg:x3; val_offset:14664*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14664*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4889:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8800007; valaddr_reg:x3; val_offset:14667*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14667*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4890:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd880000f; valaddr_reg:x3; val_offset:14670*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14670*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4891:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd880001f; valaddr_reg:x3; val_offset:14673*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14673*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4892:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd880003f; valaddr_reg:x3; val_offset:14676*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14676*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4893:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd880007f; valaddr_reg:x3; val_offset:14679*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14679*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4894:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd88000ff; valaddr_reg:x3; val_offset:14682*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14682*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4895:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd88001ff; valaddr_reg:x3; val_offset:14685*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14685*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4896:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd88003ff; valaddr_reg:x3; val_offset:14688*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14688*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4897:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd88007ff; valaddr_reg:x3; val_offset:14691*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14691*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4898:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8800fff; valaddr_reg:x3; val_offset:14694*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14694*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4899:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8801fff; valaddr_reg:x3; val_offset:14697*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14697*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4900:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8803fff; valaddr_reg:x3; val_offset:14700*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14700*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4901:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8807fff; valaddr_reg:x3; val_offset:14703*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14703*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4902:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd880ffff; valaddr_reg:x3; val_offset:14706*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14706*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4903:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd881ffff; valaddr_reg:x3; val_offset:14709*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14709*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4904:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd883ffff; valaddr_reg:x3; val_offset:14712*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14712*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4905:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd887ffff; valaddr_reg:x3; val_offset:14715*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14715*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4906:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd88fffff; valaddr_reg:x3; val_offset:14718*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14718*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4907:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd89fffff; valaddr_reg:x3; val_offset:14721*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14721*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4908:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8bfffff; valaddr_reg:x3; val_offset:14724*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14724*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4909:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8c00000; valaddr_reg:x3; val_offset:14727*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14727*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4910:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8e00000; valaddr_reg:x3; val_offset:14730*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14730*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4911:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8f00000; valaddr_reg:x3; val_offset:14733*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14733*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4912:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8f80000; valaddr_reg:x3; val_offset:14736*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14736*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4913:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8fc0000; valaddr_reg:x3; val_offset:14739*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14739*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4914:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8fe0000; valaddr_reg:x3; val_offset:14742*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14742*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4915:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8ff0000; valaddr_reg:x3; val_offset:14745*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14745*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4916:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8ff8000; valaddr_reg:x3; val_offset:14748*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14748*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4917:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8ffc000; valaddr_reg:x3; val_offset:14751*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14751*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4918:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8ffe000; valaddr_reg:x3; val_offset:14754*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14754*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4919:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8fff000; valaddr_reg:x3; val_offset:14757*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14757*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4920:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8fff800; valaddr_reg:x3; val_offset:14760*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14760*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4921:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8fffc00; valaddr_reg:x3; val_offset:14763*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14763*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4922:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8fffe00; valaddr_reg:x3; val_offset:14766*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14766*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4923:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8ffff00; valaddr_reg:x3; val_offset:14769*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14769*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4924:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8ffff80; valaddr_reg:x3; val_offset:14772*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14772*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4925:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8ffffc0; valaddr_reg:x3; val_offset:14775*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14775*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4926:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8ffffe0; valaddr_reg:x3; val_offset:14778*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14778*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4927:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8fffff0; valaddr_reg:x3; val_offset:14781*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14781*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4928:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8fffff8; valaddr_reg:x3; val_offset:14784*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14784*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4929:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8fffffc; valaddr_reg:x3; val_offset:14787*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14787*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4930:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8fffffe; valaddr_reg:x3; val_offset:14790*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14790*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4931:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xb1 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xd8ffffff; valaddr_reg:x3; val_offset:14793*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14793*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4932:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xff000001; valaddr_reg:x3; val_offset:14796*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14796*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4933:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xff000003; valaddr_reg:x3; val_offset:14799*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14799*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4934:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xff000007; valaddr_reg:x3; val_offset:14802*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14802*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4935:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xff199999; valaddr_reg:x3; val_offset:14805*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14805*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4936:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xff249249; valaddr_reg:x3; val_offset:14808*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14808*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4937:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xff333333; valaddr_reg:x3; val_offset:14811*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14811*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4938:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:14814*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14814*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4939:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:14817*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14817*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4940:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xff444444; valaddr_reg:x3; val_offset:14820*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14820*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4941:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:14823*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14823*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4942:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:14826*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14826*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4943:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xff666666; valaddr_reg:x3; val_offset:14829*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14829*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4944:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:14832*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14832*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4945:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:14835*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14835*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4946:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:14838*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14838*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4947:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4e5f30 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x1ec806 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dce5f30; op2val:0xc11ec806;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:14841*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14841*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4948:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x80000000; valaddr_reg:x3; val_offset:14844*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14844*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4949:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:14847*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14847*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4950:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:14850*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14850*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4951:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:14853*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14853*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4952:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x8000000f; valaddr_reg:x3; val_offset:14856*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14856*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4953:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x8000001f; valaddr_reg:x3; val_offset:14859*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14859*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4954:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x8000003f; valaddr_reg:x3; val_offset:14862*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14862*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4955:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x8000007f; valaddr_reg:x3; val_offset:14865*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14865*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4956:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x800000ff; valaddr_reg:x3; val_offset:14868*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14868*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4957:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x800001ff; valaddr_reg:x3; val_offset:14871*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14871*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4958:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x800003ff; valaddr_reg:x3; val_offset:14874*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14874*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4959:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x800007ff; valaddr_reg:x3; val_offset:14877*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14877*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4960:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x80000fff; valaddr_reg:x3; val_offset:14880*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14880*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4961:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x80001fff; valaddr_reg:x3; val_offset:14883*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14883*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4962:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x80003fff; valaddr_reg:x3; val_offset:14886*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14886*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4963:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x80007fff; valaddr_reg:x3; val_offset:14889*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14889*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4964:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x8000ffff; valaddr_reg:x3; val_offset:14892*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14892*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4965:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x8001ffff; valaddr_reg:x3; val_offset:14895*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14895*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4966:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x8003ffff; valaddr_reg:x3; val_offset:14898*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14898*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4967:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x8007ffff; valaddr_reg:x3; val_offset:14901*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14901*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4968:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x800fffff; valaddr_reg:x3; val_offset:14904*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14904*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4969:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:14907*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14907*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4970:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x801fffff; valaddr_reg:x3; val_offset:14910*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14910*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4971:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:14913*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14913*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4972:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:14916*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14916*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4973:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:14919*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14919*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4974:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:14922*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14922*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4975:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x803fffff; valaddr_reg:x3; val_offset:14925*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14925*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4976:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x80400000; valaddr_reg:x3; val_offset:14928*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14928*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4977:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:14931*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14931*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4978:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:14934*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14934*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4979:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:14937*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14937*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4980:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x80600000; valaddr_reg:x3; val_offset:14940*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14940*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4981:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:14943*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14943*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4982:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:14946*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14946*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4983:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x80700000; valaddr_reg:x3; val_offset:14949*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14949*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4984:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x80780000; valaddr_reg:x3; val_offset:14952*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14952*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4985:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x807c0000; valaddr_reg:x3; val_offset:14955*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14955*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4986:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x807e0000; valaddr_reg:x3; val_offset:14958*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14958*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4987:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x807f0000; valaddr_reg:x3; val_offset:14961*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14961*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4988:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x807f8000; valaddr_reg:x3; val_offset:14964*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14964*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4989:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x807fc000; valaddr_reg:x3; val_offset:14967*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14967*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4990:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x807fe000; valaddr_reg:x3; val_offset:14970*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14970*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4991:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x50d921 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd0d921; op2val:0x80000000;
op3val:0x807ff000; valaddr_reg:x3; val_offset:14973*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14973*0 + 3*38*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2110655891,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2110655891,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154823680,32,FLEN)
NAN_BOXED(2110655891,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155347968,32,FLEN)
NAN_BOXED(2110655891,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155610112,32,FLEN)
NAN_BOXED(2110655891,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155741184,32,FLEN)
NAN_BOXED(2110655891,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155806720,32,FLEN)
NAN_BOXED(2110655891,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155839488,32,FLEN)
NAN_BOXED(2110655891,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155855872,32,FLEN)
NAN_BOXED(2110655891,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155864064,32,FLEN)
NAN_BOXED(2110655891,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155868160,32,FLEN)
NAN_BOXED(2110655891,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155870208,32,FLEN)
NAN_BOXED(2110655891,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155871232,32,FLEN)
NAN_BOXED(2110655891,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155871744,32,FLEN)
NAN_BOXED(2110655891,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872000,32,FLEN)
NAN_BOXED(2110655891,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872128,32,FLEN)
NAN_BOXED(2110655891,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872192,32,FLEN)
NAN_BOXED(2110655891,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872224,32,FLEN)
NAN_BOXED(2110655891,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872240,32,FLEN)
NAN_BOXED(2110655891,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2110655891,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2110655891,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2110655891,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3632267264,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3632267265,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3632267267,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3632267271,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3632267279,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3632267295,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3632267327,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3632267391,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3632267519,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3632267775,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3632268287,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3632269311,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3632271359,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3632275455,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3632283647,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3632300031,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3632332799,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3632398335,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3632529407,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3632791551,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3633315839,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3634364415,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3636461567,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3636461568,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3638558720,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3639607296,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3640131584,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3640393728,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3640524800,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3640590336,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3640623104,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3640639488,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3640647680,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3640651776,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3640653824,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3640654848,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3640655360,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3640655616,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3640655744,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3640655808,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3640655840,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3640655856,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3640655864,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3640655868,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3640655870,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(3640655871,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2110676784,32,FLEN)
NAN_BOXED(3240019974,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483663,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483679,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483711,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483775,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483903,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147484159,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147484671,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147485695,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147487743,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147491839,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147500031,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147516415,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147549183,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147614719,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147745791,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2148007935,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2148532223,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149580799,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151677951,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151677952,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153775104,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154823680,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155347968,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155610112,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155741184,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155806720,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155839488,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155855872,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155864064,32,FLEN)
NAN_BOXED(2110839073,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155868160,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
