
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_5120:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x592a8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd92a8c; op2val:0x80000000;
op3val:0x85ffff80; valaddr_reg:x3; val_offset:15360*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15360*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5121:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x592a8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd92a8c; op2val:0x80000000;
op3val:0x85ffffc0; valaddr_reg:x3; val_offset:15363*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15363*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5122:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x592a8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd92a8c; op2val:0x80000000;
op3val:0x85ffffe0; valaddr_reg:x3; val_offset:15366*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15366*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5123:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x592a8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd92a8c; op2val:0x80000000;
op3val:0x85fffff0; valaddr_reg:x3; val_offset:15369*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15369*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5124:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x592a8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd92a8c; op2val:0x80000000;
op3val:0x85fffff8; valaddr_reg:x3; val_offset:15372*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15372*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5125:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x592a8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd92a8c; op2val:0x80000000;
op3val:0x85fffffc; valaddr_reg:x3; val_offset:15375*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15375*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5126:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x592a8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd92a8c; op2val:0x80000000;
op3val:0x85fffffe; valaddr_reg:x3; val_offset:15378*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15378*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5127:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x592a8c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd92a8c; op2val:0x80000000;
op3val:0x85ffffff; valaddr_reg:x3; val_offset:15381*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15381*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5128:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0800000; valaddr_reg:x3; val_offset:15384*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15384*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5129:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0800001; valaddr_reg:x3; val_offset:15387*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15387*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5130:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0800003; valaddr_reg:x3; val_offset:15390*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15390*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5131:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0800007; valaddr_reg:x3; val_offset:15393*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15393*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5132:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf080000f; valaddr_reg:x3; val_offset:15396*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15396*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5133:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf080001f; valaddr_reg:x3; val_offset:15399*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15399*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5134:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf080003f; valaddr_reg:x3; val_offset:15402*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15402*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5135:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf080007f; valaddr_reg:x3; val_offset:15405*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15405*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5136:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf08000ff; valaddr_reg:x3; val_offset:15408*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15408*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5137:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf08001ff; valaddr_reg:x3; val_offset:15411*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15411*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5138:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf08003ff; valaddr_reg:x3; val_offset:15414*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15414*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5139:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf08007ff; valaddr_reg:x3; val_offset:15417*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15417*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5140:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0800fff; valaddr_reg:x3; val_offset:15420*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15420*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5141:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0801fff; valaddr_reg:x3; val_offset:15423*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15423*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5142:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0803fff; valaddr_reg:x3; val_offset:15426*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15426*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5143:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0807fff; valaddr_reg:x3; val_offset:15429*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15429*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5144:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf080ffff; valaddr_reg:x3; val_offset:15432*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15432*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5145:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf081ffff; valaddr_reg:x3; val_offset:15435*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15435*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5146:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf083ffff; valaddr_reg:x3; val_offset:15438*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15438*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5147:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf087ffff; valaddr_reg:x3; val_offset:15441*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15441*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5148:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf08fffff; valaddr_reg:x3; val_offset:15444*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15444*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5149:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf09fffff; valaddr_reg:x3; val_offset:15447*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15447*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5150:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0bfffff; valaddr_reg:x3; val_offset:15450*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15450*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5151:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0c00000; valaddr_reg:x3; val_offset:15453*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15453*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5152:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0e00000; valaddr_reg:x3; val_offset:15456*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15456*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5153:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0f00000; valaddr_reg:x3; val_offset:15459*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15459*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5154:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0f80000; valaddr_reg:x3; val_offset:15462*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15462*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5155:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0fc0000; valaddr_reg:x3; val_offset:15465*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15465*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5156:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0fe0000; valaddr_reg:x3; val_offset:15468*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15468*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5157:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0ff0000; valaddr_reg:x3; val_offset:15471*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15471*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5158:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0ff8000; valaddr_reg:x3; val_offset:15474*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15474*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5159:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0ffc000; valaddr_reg:x3; val_offset:15477*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15477*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5160:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0ffe000; valaddr_reg:x3; val_offset:15480*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15480*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5161:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0fff000; valaddr_reg:x3; val_offset:15483*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15483*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5162:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0fff800; valaddr_reg:x3; val_offset:15486*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15486*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5163:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0fffc00; valaddr_reg:x3; val_offset:15489*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15489*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5164:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0fffe00; valaddr_reg:x3; val_offset:15492*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15492*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5165:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0ffff00; valaddr_reg:x3; val_offset:15495*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15495*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5166:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0ffff80; valaddr_reg:x3; val_offset:15498*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15498*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5167:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0ffffc0; valaddr_reg:x3; val_offset:15501*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15501*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5168:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0ffffe0; valaddr_reg:x3; val_offset:15504*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15504*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5169:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0fffff0; valaddr_reg:x3; val_offset:15507*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15507*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5170:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0fffff8; valaddr_reg:x3; val_offset:15510*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15510*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5171:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0fffffc; valaddr_reg:x3; val_offset:15513*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15513*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5172:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0fffffe; valaddr_reg:x3; val_offset:15516*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15516*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5173:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xf0ffffff; valaddr_reg:x3; val_offset:15519*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15519*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5174:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xff000001; valaddr_reg:x3; val_offset:15522*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15522*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5175:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xff000003; valaddr_reg:x3; val_offset:15525*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15525*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5176:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xff000007; valaddr_reg:x3; val_offset:15528*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15528*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5177:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xff199999; valaddr_reg:x3; val_offset:15531*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15531*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5178:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xff249249; valaddr_reg:x3; val_offset:15534*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15534*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5179:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xff333333; valaddr_reg:x3; val_offset:15537*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15537*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5180:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:15540*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15540*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5181:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:15543*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15543*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5182:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xff444444; valaddr_reg:x3; val_offset:15546*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15546*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5183:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:15549*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15549*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5184:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:15552*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15552*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5185:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xff666666; valaddr_reg:x3; val_offset:15555*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15555*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5186:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:15558*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15558*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5187:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:15561*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15561*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5188:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:15564*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15564*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5189:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c6184 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x14b020 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc6184; op2val:0xc114b020;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:15567*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15567*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5190:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x80000000; valaddr_reg:x3; val_offset:15570*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15570*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5191:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:15573*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15573*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5192:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:15576*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15576*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5193:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:15579*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15579*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5194:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x8000000f; valaddr_reg:x3; val_offset:15582*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15582*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5195:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x8000001f; valaddr_reg:x3; val_offset:15585*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15585*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5196:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x8000003f; valaddr_reg:x3; val_offset:15588*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15588*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5197:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x8000007f; valaddr_reg:x3; val_offset:15591*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15591*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5198:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x800000ff; valaddr_reg:x3; val_offset:15594*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15594*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5199:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x800001ff; valaddr_reg:x3; val_offset:15597*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15597*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5200:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x800003ff; valaddr_reg:x3; val_offset:15600*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15600*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5201:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x800007ff; valaddr_reg:x3; val_offset:15603*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15603*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5202:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x80000fff; valaddr_reg:x3; val_offset:15606*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15606*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5203:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x80001fff; valaddr_reg:x3; val_offset:15609*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15609*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5204:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x80003fff; valaddr_reg:x3; val_offset:15612*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15612*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5205:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x80007fff; valaddr_reg:x3; val_offset:15615*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15615*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5206:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x8000ffff; valaddr_reg:x3; val_offset:15618*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15618*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5207:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x8001ffff; valaddr_reg:x3; val_offset:15621*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15621*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5208:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x8003ffff; valaddr_reg:x3; val_offset:15624*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15624*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5209:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x8007ffff; valaddr_reg:x3; val_offset:15627*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15627*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5210:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x800fffff; valaddr_reg:x3; val_offset:15630*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15630*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5211:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:15633*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15633*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5212:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x801fffff; valaddr_reg:x3; val_offset:15636*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15636*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5213:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:15639*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15639*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5214:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:15642*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15642*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5215:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:15645*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15645*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5216:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:15648*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15648*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5217:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x803fffff; valaddr_reg:x3; val_offset:15651*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15651*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5218:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x80400000; valaddr_reg:x3; val_offset:15654*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15654*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5219:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:15657*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15657*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5220:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:15660*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15660*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5221:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:15663*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15663*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5222:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x80600000; valaddr_reg:x3; val_offset:15666*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15666*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5223:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:15669*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15669*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5224:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:15672*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15672*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5225:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x80700000; valaddr_reg:x3; val_offset:15675*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15675*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5226:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x80780000; valaddr_reg:x3; val_offset:15678*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15678*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5227:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x807c0000; valaddr_reg:x3; val_offset:15681*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15681*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5228:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x807e0000; valaddr_reg:x3; val_offset:15684*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15684*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5229:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x807f0000; valaddr_reg:x3; val_offset:15687*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15687*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5230:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x807f8000; valaddr_reg:x3; val_offset:15690*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15690*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5231:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x807fc000; valaddr_reg:x3; val_offset:15693*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15693*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5232:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x807fe000; valaddr_reg:x3; val_offset:15696*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15696*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5233:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x807ff000; valaddr_reg:x3; val_offset:15699*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15699*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5234:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x807ff800; valaddr_reg:x3; val_offset:15702*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15702*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5235:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x807ffc00; valaddr_reg:x3; val_offset:15705*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15705*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5236:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x807ffe00; valaddr_reg:x3; val_offset:15708*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15708*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5237:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x807fff00; valaddr_reg:x3; val_offset:15711*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15711*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5238:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x807fff80; valaddr_reg:x3; val_offset:15714*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15714*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5239:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x807fffc0; valaddr_reg:x3; val_offset:15717*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15717*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5240:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x807fffe0; valaddr_reg:x3; val_offset:15720*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15720*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5241:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x807ffff0; valaddr_reg:x3; val_offset:15723*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15723*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5242:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:15726*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15726*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5243:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:15729*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15729*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5244:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:15732*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15732*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5245:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x5c95cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ddc95cc; op2val:0x80000000;
op3val:0x807fffff; valaddr_reg:x3; val_offset:15735*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15735*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5246:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:15738*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15738*0 + 3*40*FLEN/8, x4, x1, x2)

inst_5247:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:15741*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15741*0 + 3*40*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2111384204,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146816,32,FLEN)
NAN_BOXED(2111384204,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146880,32,FLEN)
NAN_BOXED(2111384204,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146912,32,FLEN)
NAN_BOXED(2111384204,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146928,32,FLEN)
NAN_BOXED(2111384204,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146936,32,FLEN)
NAN_BOXED(2111384204,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146940,32,FLEN)
NAN_BOXED(2111384204,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146942,32,FLEN)
NAN_BOXED(2111384204,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2248146943,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4034920448,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4034920449,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4034920451,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4034920455,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4034920463,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4034920479,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4034920511,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4034920575,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4034920703,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4034920959,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4034921471,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4034922495,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4034924543,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4034928639,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4034936831,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4034953215,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4034985983,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4035051519,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4035182591,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4035444735,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4035969023,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4037017599,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4039114751,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4039114752,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4041211904,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4042260480,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4042784768,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4043046912,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4043177984,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4043243520,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4043276288,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4043292672,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4043300864,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4043304960,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4043307008,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4043308032,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4043308544,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4043308800,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4043308928,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4043308992,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4043309024,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4043309040,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4043309048,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4043309052,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4043309054,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4043309055,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2111594884,32,FLEN)
NAN_BOXED(3239358496,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483663,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483679,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483711,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483775,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483903,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147484159,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147484671,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147485695,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147487743,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147491839,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147500031,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147516415,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147549183,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147614719,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147745791,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2148007935,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2148532223,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149580799,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151677951,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151677952,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153775104,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154823680,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155347968,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155610112,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155741184,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155806720,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155839488,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155855872,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155864064,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155868160,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155870208,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155871232,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155871744,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872000,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872128,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872192,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872224,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872240,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2111608268,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872255,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
