
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_5248:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:15744*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15744*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5249:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:15747*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15747*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5250:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:15750*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15750*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5251:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:15753*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15753*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5252:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:15756*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15756*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5253:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:15759*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15759*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5254:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:15762*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15762*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5255:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:15765*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15765*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5256:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:15768*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15768*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5257:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:15771*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15771*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5258:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:15774*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15774*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5259:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:15777*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15777*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5260:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:15780*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15780*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5261:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:15783*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15783*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5262:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x8000000; valaddr_reg:x3; val_offset:15786*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15786*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5263:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x8000001; valaddr_reg:x3; val_offset:15789*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15789*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5264:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x8000003; valaddr_reg:x3; val_offset:15792*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15792*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5265:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x8000007; valaddr_reg:x3; val_offset:15795*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15795*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5266:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x800000f; valaddr_reg:x3; val_offset:15798*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15798*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5267:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x800001f; valaddr_reg:x3; val_offset:15801*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15801*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5268:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x800003f; valaddr_reg:x3; val_offset:15804*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15804*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5269:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x800007f; valaddr_reg:x3; val_offset:15807*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15807*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5270:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x80000ff; valaddr_reg:x3; val_offset:15810*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15810*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5271:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x80001ff; valaddr_reg:x3; val_offset:15813*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15813*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5272:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x80003ff; valaddr_reg:x3; val_offset:15816*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15816*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5273:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x80007ff; valaddr_reg:x3; val_offset:15819*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15819*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5274:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x8000fff; valaddr_reg:x3; val_offset:15822*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15822*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5275:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x8001fff; valaddr_reg:x3; val_offset:15825*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15825*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5276:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x8003fff; valaddr_reg:x3; val_offset:15828*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15828*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5277:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x8007fff; valaddr_reg:x3; val_offset:15831*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15831*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5278:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x800ffff; valaddr_reg:x3; val_offset:15834*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15834*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5279:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x801ffff; valaddr_reg:x3; val_offset:15837*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15837*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5280:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x803ffff; valaddr_reg:x3; val_offset:15840*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15840*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5281:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x807ffff; valaddr_reg:x3; val_offset:15843*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15843*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5282:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x80fffff; valaddr_reg:x3; val_offset:15846*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15846*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5283:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x81fffff; valaddr_reg:x3; val_offset:15849*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15849*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5284:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x83fffff; valaddr_reg:x3; val_offset:15852*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15852*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5285:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x8400000; valaddr_reg:x3; val_offset:15855*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15855*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5286:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x8600000; valaddr_reg:x3; val_offset:15858*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15858*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5287:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x8700000; valaddr_reg:x3; val_offset:15861*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15861*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5288:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x8780000; valaddr_reg:x3; val_offset:15864*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15864*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5289:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x87c0000; valaddr_reg:x3; val_offset:15867*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15867*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5290:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x87e0000; valaddr_reg:x3; val_offset:15870*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15870*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5291:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x87f0000; valaddr_reg:x3; val_offset:15873*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15873*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5292:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x87f8000; valaddr_reg:x3; val_offset:15876*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15876*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5293:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x87fc000; valaddr_reg:x3; val_offset:15879*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15879*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5294:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x87fe000; valaddr_reg:x3; val_offset:15882*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15882*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5295:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x87ff000; valaddr_reg:x3; val_offset:15885*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15885*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5296:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x87ff800; valaddr_reg:x3; val_offset:15888*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15888*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5297:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x87ffc00; valaddr_reg:x3; val_offset:15891*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15891*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5298:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x87ffe00; valaddr_reg:x3; val_offset:15894*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15894*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5299:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x87fff00; valaddr_reg:x3; val_offset:15897*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15897*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5300:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x87fff80; valaddr_reg:x3; val_offset:15900*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15900*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5301:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x87fffc0; valaddr_reg:x3; val_offset:15903*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15903*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5302:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x87fffe0; valaddr_reg:x3; val_offset:15906*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15906*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5303:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x87ffff0; valaddr_reg:x3; val_offset:15909*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15909*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5304:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x87ffff8; valaddr_reg:x3; val_offset:15912*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15912*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5305:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x87ffffc; valaddr_reg:x3; val_offset:15915*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15915*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5306:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x87ffffe; valaddr_reg:x3; val_offset:15918*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15918*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5307:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x611bd8 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de11bd8; op2val:0x0;
op3val:0x87fffff; valaddr_reg:x3; val_offset:15921*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15921*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5308:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60800000; valaddr_reg:x3; val_offset:15924*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15924*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5309:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60800001; valaddr_reg:x3; val_offset:15927*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15927*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5310:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60800003; valaddr_reg:x3; val_offset:15930*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15930*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5311:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60800007; valaddr_reg:x3; val_offset:15933*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15933*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5312:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x6080000f; valaddr_reg:x3; val_offset:15936*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15936*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5313:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x6080001f; valaddr_reg:x3; val_offset:15939*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15939*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5314:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x6080003f; valaddr_reg:x3; val_offset:15942*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15942*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5315:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x6080007f; valaddr_reg:x3; val_offset:15945*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15945*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5316:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x608000ff; valaddr_reg:x3; val_offset:15948*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15948*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5317:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x608001ff; valaddr_reg:x3; val_offset:15951*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15951*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5318:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x608003ff; valaddr_reg:x3; val_offset:15954*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15954*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5319:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x608007ff; valaddr_reg:x3; val_offset:15957*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15957*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5320:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60800fff; valaddr_reg:x3; val_offset:15960*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15960*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5321:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60801fff; valaddr_reg:x3; val_offset:15963*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15963*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5322:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60803fff; valaddr_reg:x3; val_offset:15966*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15966*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5323:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60807fff; valaddr_reg:x3; val_offset:15969*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15969*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5324:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x6080ffff; valaddr_reg:x3; val_offset:15972*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15972*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5325:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x6081ffff; valaddr_reg:x3; val_offset:15975*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15975*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5326:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x6083ffff; valaddr_reg:x3; val_offset:15978*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15978*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5327:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x6087ffff; valaddr_reg:x3; val_offset:15981*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15981*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5328:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x608fffff; valaddr_reg:x3; val_offset:15984*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15984*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5329:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x609fffff; valaddr_reg:x3; val_offset:15987*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15987*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5330:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60bfffff; valaddr_reg:x3; val_offset:15990*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15990*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5331:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60c00000; valaddr_reg:x3; val_offset:15993*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15993*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5332:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60e00000; valaddr_reg:x3; val_offset:15996*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15996*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5333:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60f00000; valaddr_reg:x3; val_offset:15999*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15999*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5334:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60f80000; valaddr_reg:x3; val_offset:16002*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16002*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5335:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60fc0000; valaddr_reg:x3; val_offset:16005*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16005*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5336:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60fe0000; valaddr_reg:x3; val_offset:16008*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16008*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5337:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60ff0000; valaddr_reg:x3; val_offset:16011*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16011*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5338:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60ff8000; valaddr_reg:x3; val_offset:16014*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16014*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5339:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60ffc000; valaddr_reg:x3; val_offset:16017*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16017*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5340:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60ffe000; valaddr_reg:x3; val_offset:16020*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16020*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5341:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60fff000; valaddr_reg:x3; val_offset:16023*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16023*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5342:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60fff800; valaddr_reg:x3; val_offset:16026*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16026*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5343:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60fffc00; valaddr_reg:x3; val_offset:16029*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16029*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5344:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60fffe00; valaddr_reg:x3; val_offset:16032*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16032*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5345:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60ffff00; valaddr_reg:x3; val_offset:16035*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16035*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5346:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60ffff80; valaddr_reg:x3; val_offset:16038*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16038*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5347:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60ffffc0; valaddr_reg:x3; val_offset:16041*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16041*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5348:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60ffffe0; valaddr_reg:x3; val_offset:16044*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16044*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5349:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60fffff0; valaddr_reg:x3; val_offset:16047*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16047*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5350:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60fffff8; valaddr_reg:x3; val_offset:16050*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16050*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5351:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60fffffc; valaddr_reg:x3; val_offset:16053*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16053*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5352:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60fffffe; valaddr_reg:x3; val_offset:16056*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16056*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5353:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xc1 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x60ffffff; valaddr_reg:x3; val_offset:16059*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16059*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5354:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x7f000001; valaddr_reg:x3; val_offset:16062*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16062*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5355:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x7f000003; valaddr_reg:x3; val_offset:16065*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16065*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5356:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x7f000007; valaddr_reg:x3; val_offset:16068*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16068*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5357:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x7f199999; valaddr_reg:x3; val_offset:16071*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16071*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5358:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x7f249249; valaddr_reg:x3; val_offset:16074*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16074*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5359:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x7f333333; valaddr_reg:x3; val_offset:16077*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16077*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5360:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:16080*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16080*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5361:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:16083*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16083*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5362:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x7f444444; valaddr_reg:x3; val_offset:16086*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16086*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5363:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:16089*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16089*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5364:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:16092*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16092*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5365:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x7f666666; valaddr_reg:x3; val_offset:16095*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16095*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5366:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:16098*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16098*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5367:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:16101*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16101*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5368:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:16104*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16104*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5369:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68d4b0 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0cbcc4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8d4b0; op2val:0x410cbcc4;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:16107*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16107*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5370:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:16110*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16110*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5371:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:16113*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16113*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5372:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:16116*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16116*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5373:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:16119*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16119*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5374:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:16122*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16122*0 + 3*41*FLEN/8, x4, x1, x2)

inst_5375:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:16125*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16125*0 + 3*41*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217728,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217729,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217731,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217735,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217743,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217759,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217791,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217855,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134217983,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134218239,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134218751,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134219775,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134221823,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134225919,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134234111,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134250495,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134283263,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134348799,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134479871,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(134742015,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(135266303,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(136314879,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(138412031,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(138412032,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(140509184,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(141557760,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142082048,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142344192,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142475264,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142540800,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142573568,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142589952,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142598144,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142602240,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142604288,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142605312,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142605824,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606080,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606208,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606272,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606304,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606320,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606328,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606332,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606334,32,FLEN)
NAN_BOXED(2111904728,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(142606335,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1619001344,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1619001345,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1619001347,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1619001351,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1619001359,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1619001375,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1619001407,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1619001471,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1619001599,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1619001855,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1619002367,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1619003391,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1619005439,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1619009535,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1619017727,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1619034111,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1619066879,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1619132415,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1619263487,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1619525631,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1620049919,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1621098495,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1623195647,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1623195648,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1625292800,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1626341376,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1626865664,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1627127808,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1627258880,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1627324416,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1627357184,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1627373568,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1627381760,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1627385856,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1627387904,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1627388928,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1627389440,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1627389696,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1627389824,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1627389888,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1627389920,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1627389936,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1627389944,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1627389948,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1627389950,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(1627389951,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2112410800,32,FLEN)
NAN_BOXED(1091353796,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
