
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_5376:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:16128*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16128*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5377:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:16131*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16131*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5378:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:16134*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16134*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5379:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:16137*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16137*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5380:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:16140*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16140*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5381:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:16143*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16143*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5382:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:16146*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16146*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5383:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:16149*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16149*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5384:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:16152*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16152*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5385:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:16155*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16155*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5386:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x7000000; valaddr_reg:x3; val_offset:16158*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16158*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5387:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x7000001; valaddr_reg:x3; val_offset:16161*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16161*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5388:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x7000003; valaddr_reg:x3; val_offset:16164*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16164*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5389:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x7000007; valaddr_reg:x3; val_offset:16167*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16167*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5390:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x700000f; valaddr_reg:x3; val_offset:16170*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16170*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5391:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x700001f; valaddr_reg:x3; val_offset:16173*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16173*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5392:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x700003f; valaddr_reg:x3; val_offset:16176*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16176*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5393:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x700007f; valaddr_reg:x3; val_offset:16179*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16179*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5394:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x70000ff; valaddr_reg:x3; val_offset:16182*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16182*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5395:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x70001ff; valaddr_reg:x3; val_offset:16185*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16185*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5396:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x70003ff; valaddr_reg:x3; val_offset:16188*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16188*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5397:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x70007ff; valaddr_reg:x3; val_offset:16191*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16191*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5398:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x7000fff; valaddr_reg:x3; val_offset:16194*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16194*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5399:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x7001fff; valaddr_reg:x3; val_offset:16197*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16197*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5400:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x7003fff; valaddr_reg:x3; val_offset:16200*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16200*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5401:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x7007fff; valaddr_reg:x3; val_offset:16203*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16203*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5402:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x700ffff; valaddr_reg:x3; val_offset:16206*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16206*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5403:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x701ffff; valaddr_reg:x3; val_offset:16209*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16209*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5404:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x703ffff; valaddr_reg:x3; val_offset:16212*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16212*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5405:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x707ffff; valaddr_reg:x3; val_offset:16215*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16215*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5406:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x70fffff; valaddr_reg:x3; val_offset:16218*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16218*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5407:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x71fffff; valaddr_reg:x3; val_offset:16221*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16221*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5408:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x73fffff; valaddr_reg:x3; val_offset:16224*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16224*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5409:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x7400000; valaddr_reg:x3; val_offset:16227*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16227*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5410:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x7600000; valaddr_reg:x3; val_offset:16230*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16230*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5411:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x7700000; valaddr_reg:x3; val_offset:16233*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16233*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5412:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x7780000; valaddr_reg:x3; val_offset:16236*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16236*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5413:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x77c0000; valaddr_reg:x3; val_offset:16239*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16239*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5414:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x77e0000; valaddr_reg:x3; val_offset:16242*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16242*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5415:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x77f0000; valaddr_reg:x3; val_offset:16245*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16245*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5416:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x77f8000; valaddr_reg:x3; val_offset:16248*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16248*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5417:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x77fc000; valaddr_reg:x3; val_offset:16251*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16251*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5418:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x77fe000; valaddr_reg:x3; val_offset:16254*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16254*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5419:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x77ff000; valaddr_reg:x3; val_offset:16257*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16257*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5420:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x77ff800; valaddr_reg:x3; val_offset:16260*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16260*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5421:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x77ffc00; valaddr_reg:x3; val_offset:16263*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16263*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5422:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x77ffe00; valaddr_reg:x3; val_offset:16266*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16266*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5423:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x77fff00; valaddr_reg:x3; val_offset:16269*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16269*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5424:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x77fff80; valaddr_reg:x3; val_offset:16272*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16272*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5425:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x77fffc0; valaddr_reg:x3; val_offset:16275*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16275*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5426:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x77fffe0; valaddr_reg:x3; val_offset:16278*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16278*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5427:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x77ffff0; valaddr_reg:x3; val_offset:16281*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16281*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5428:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x77ffff8; valaddr_reg:x3; val_offset:16284*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16284*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5429:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x77ffffc; valaddr_reg:x3; val_offset:16287*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16287*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5430:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x77ffffe; valaddr_reg:x3; val_offset:16290*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16290*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5431:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x68e457 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de8e457; op2val:0x0;
op3val:0x77fffff; valaddr_reg:x3; val_offset:16293*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16293*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5432:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79800000; valaddr_reg:x3; val_offset:16296*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16296*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5433:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79800001; valaddr_reg:x3; val_offset:16299*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16299*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5434:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79800003; valaddr_reg:x3; val_offset:16302*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16302*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5435:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79800007; valaddr_reg:x3; val_offset:16305*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16305*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5436:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x7980000f; valaddr_reg:x3; val_offset:16308*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16308*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5437:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x7980001f; valaddr_reg:x3; val_offset:16311*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16311*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5438:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x7980003f; valaddr_reg:x3; val_offset:16314*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16314*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5439:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x7980007f; valaddr_reg:x3; val_offset:16317*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16317*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5440:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x798000ff; valaddr_reg:x3; val_offset:16320*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16320*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5441:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x798001ff; valaddr_reg:x3; val_offset:16323*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16323*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5442:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x798003ff; valaddr_reg:x3; val_offset:16326*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16326*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5443:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x798007ff; valaddr_reg:x3; val_offset:16329*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16329*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5444:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79800fff; valaddr_reg:x3; val_offset:16332*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16332*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5445:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79801fff; valaddr_reg:x3; val_offset:16335*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16335*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5446:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79803fff; valaddr_reg:x3; val_offset:16338*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16338*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5447:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79807fff; valaddr_reg:x3; val_offset:16341*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16341*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5448:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x7980ffff; valaddr_reg:x3; val_offset:16344*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16344*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5449:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x7981ffff; valaddr_reg:x3; val_offset:16347*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16347*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5450:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x7983ffff; valaddr_reg:x3; val_offset:16350*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16350*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5451:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x7987ffff; valaddr_reg:x3; val_offset:16353*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16353*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5452:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x798fffff; valaddr_reg:x3; val_offset:16356*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16356*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5453:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x799fffff; valaddr_reg:x3; val_offset:16359*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16359*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5454:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79bfffff; valaddr_reg:x3; val_offset:16362*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16362*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5455:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79c00000; valaddr_reg:x3; val_offset:16365*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16365*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5456:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79e00000; valaddr_reg:x3; val_offset:16368*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16368*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5457:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79f00000; valaddr_reg:x3; val_offset:16371*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16371*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5458:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79f80000; valaddr_reg:x3; val_offset:16374*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16374*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5459:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79fc0000; valaddr_reg:x3; val_offset:16377*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16377*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5460:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79fe0000; valaddr_reg:x3; val_offset:16380*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16380*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5461:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79ff0000; valaddr_reg:x3; val_offset:16383*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16383*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5462:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79ff8000; valaddr_reg:x3; val_offset:16386*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16386*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5463:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79ffc000; valaddr_reg:x3; val_offset:16389*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16389*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5464:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79ffe000; valaddr_reg:x3; val_offset:16392*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16392*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5465:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79fff000; valaddr_reg:x3; val_offset:16395*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16395*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5466:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79fff800; valaddr_reg:x3; val_offset:16398*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16398*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5467:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79fffc00; valaddr_reg:x3; val_offset:16401*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16401*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5468:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79fffe00; valaddr_reg:x3; val_offset:16404*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16404*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5469:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79ffff00; valaddr_reg:x3; val_offset:16407*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16407*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5470:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79ffff80; valaddr_reg:x3; val_offset:16410*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16410*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5471:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79ffffc0; valaddr_reg:x3; val_offset:16413*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16413*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5472:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79ffffe0; valaddr_reg:x3; val_offset:16416*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16416*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5473:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79fffff0; valaddr_reg:x3; val_offset:16419*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16419*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5474:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79fffff8; valaddr_reg:x3; val_offset:16422*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16422*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5475:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79fffffc; valaddr_reg:x3; val_offset:16425*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16425*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5476:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79fffffe; valaddr_reg:x3; val_offset:16428*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16428*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5477:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xf3 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x79ffffff; valaddr_reg:x3; val_offset:16431*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16431*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5478:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x7f000001; valaddr_reg:x3; val_offset:16434*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16434*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5479:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x7f000003; valaddr_reg:x3; val_offset:16437*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16437*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5480:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x7f000007; valaddr_reg:x3; val_offset:16440*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16440*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5481:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x7f199999; valaddr_reg:x3; val_offset:16443*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16443*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5482:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x7f249249; valaddr_reg:x3; val_offset:16446*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16446*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5483:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x7f333333; valaddr_reg:x3; val_offset:16449*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16449*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5484:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:16452*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16452*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5485:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:16455*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16455*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5486:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x7f444444; valaddr_reg:x3; val_offset:16458*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16458*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5487:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:16461*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16461*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5488:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:16464*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16464*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5489:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x7f666666; valaddr_reg:x3; val_offset:16467*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16467*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5490:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:16470*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16470*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5491:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:16473*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16473*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5492:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:16476*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16476*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5493:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6a6860 and fs2 == 0 and fe2 == 0x82 and fm2 == 0x0bca65 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dea6860; op2val:0x410bca65;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:16479*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16479*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5494:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6f9cda and fs2 == 1 and fe2 == 0x02 and fm2 == 0x08c107 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7def9cda; op2val:0x8108c107;
op3val:0xa3000000; valaddr_reg:x3; val_offset:16482*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16482*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5495:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6f9cda and fs2 == 1 and fe2 == 0x02 and fm2 == 0x08c107 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7def9cda; op2val:0x8108c107;
op3val:0xa3000001; valaddr_reg:x3; val_offset:16485*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16485*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5496:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6f9cda and fs2 == 1 and fe2 == 0x02 and fm2 == 0x08c107 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7def9cda; op2val:0x8108c107;
op3val:0xa3000003; valaddr_reg:x3; val_offset:16488*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16488*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5497:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6f9cda and fs2 == 1 and fe2 == 0x02 and fm2 == 0x08c107 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7def9cda; op2val:0x8108c107;
op3val:0xa3000007; valaddr_reg:x3; val_offset:16491*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16491*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5498:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6f9cda and fs2 == 1 and fe2 == 0x02 and fm2 == 0x08c107 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7def9cda; op2val:0x8108c107;
op3val:0xa300000f; valaddr_reg:x3; val_offset:16494*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16494*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5499:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6f9cda and fs2 == 1 and fe2 == 0x02 and fm2 == 0x08c107 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7def9cda; op2val:0x8108c107;
op3val:0xa300001f; valaddr_reg:x3; val_offset:16497*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16497*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5500:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6f9cda and fs2 == 1 and fe2 == 0x02 and fm2 == 0x08c107 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7def9cda; op2val:0x8108c107;
op3val:0xa300003f; valaddr_reg:x3; val_offset:16500*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16500*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5501:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6f9cda and fs2 == 1 and fe2 == 0x02 and fm2 == 0x08c107 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7def9cda; op2val:0x8108c107;
op3val:0xa300007f; valaddr_reg:x3; val_offset:16503*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16503*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5502:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6f9cda and fs2 == 1 and fe2 == 0x02 and fm2 == 0x08c107 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7def9cda; op2val:0x8108c107;
op3val:0xa30000ff; valaddr_reg:x3; val_offset:16506*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16506*0 + 3*42*FLEN/8, x4, x1, x2)

inst_5503:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6f9cda and fs2 == 1 and fe2 == 0x02 and fm2 == 0x08c107 and fs3 == 1 and fe3 == 0x46 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7def9cda; op2val:0x8108c107;
op3val:0xa30001ff; valaddr_reg:x3; val_offset:16509*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16509*0 + 3*42*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440512,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440513,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440515,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440519,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440527,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440543,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440575,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440639,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117440767,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117441023,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117441535,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117442559,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117444607,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117448703,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117456895,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117473279,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117506047,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117571583,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117702655,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(117964799,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(118489087,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(119537663,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(121634815,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(121634816,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(123731968,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(124780544,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125304832,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125566976,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125698048,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125763584,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125796352,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125812736,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125820928,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125825024,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125827072,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125828096,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125828608,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125828864,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125828992,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829056,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829088,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829104,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829112,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829116,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829118,32,FLEN)
NAN_BOXED(2112414807,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(125829119,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2038431744,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2038431745,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2038431747,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2038431751,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2038431759,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2038431775,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2038431807,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2038431871,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2038431999,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2038432255,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2038432767,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2038433791,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2038435839,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2038439935,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2038448127,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2038464511,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2038497279,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2038562815,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2038693887,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2038956031,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2039480319,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2040528895,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2042626047,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2042626048,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2044723200,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2045771776,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2046296064,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2046558208,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2046689280,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2046754816,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2046787584,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2046803968,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2046812160,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2046816256,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2046818304,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2046819328,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2046819840,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2046820096,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2046820224,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2046820288,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2046820320,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2046820336,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2046820344,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2046820348,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2046820350,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2046820351,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2112514144,32,FLEN)
NAN_BOXED(1091291749,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2112855258,32,FLEN)
NAN_BOXED(2164834567,32,FLEN)
NAN_BOXED(2734686208,32,FLEN)
NAN_BOXED(2112855258,32,FLEN)
NAN_BOXED(2164834567,32,FLEN)
NAN_BOXED(2734686209,32,FLEN)
NAN_BOXED(2112855258,32,FLEN)
NAN_BOXED(2164834567,32,FLEN)
NAN_BOXED(2734686211,32,FLEN)
NAN_BOXED(2112855258,32,FLEN)
NAN_BOXED(2164834567,32,FLEN)
NAN_BOXED(2734686215,32,FLEN)
NAN_BOXED(2112855258,32,FLEN)
NAN_BOXED(2164834567,32,FLEN)
NAN_BOXED(2734686223,32,FLEN)
NAN_BOXED(2112855258,32,FLEN)
NAN_BOXED(2164834567,32,FLEN)
NAN_BOXED(2734686239,32,FLEN)
NAN_BOXED(2112855258,32,FLEN)
NAN_BOXED(2164834567,32,FLEN)
NAN_BOXED(2734686271,32,FLEN)
NAN_BOXED(2112855258,32,FLEN)
NAN_BOXED(2164834567,32,FLEN)
NAN_BOXED(2734686335,32,FLEN)
NAN_BOXED(2112855258,32,FLEN)
NAN_BOXED(2164834567,32,FLEN)
NAN_BOXED(2734686463,32,FLEN)
NAN_BOXED(2112855258,32,FLEN)
NAN_BOXED(2164834567,32,FLEN)
NAN_BOXED(2734686719,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
