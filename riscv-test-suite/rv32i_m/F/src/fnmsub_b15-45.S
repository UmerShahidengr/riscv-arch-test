
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_5632:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x27803fff; valaddr_reg:x3; val_offset:16896*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16896*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5633:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x27807fff; valaddr_reg:x3; val_offset:16899*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16899*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5634:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x2780ffff; valaddr_reg:x3; val_offset:16902*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16902*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5635:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x2781ffff; valaddr_reg:x3; val_offset:16905*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16905*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5636:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x2783ffff; valaddr_reg:x3; val_offset:16908*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16908*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5637:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x2787ffff; valaddr_reg:x3; val_offset:16911*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16911*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5638:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x278fffff; valaddr_reg:x3; val_offset:16914*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16914*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5639:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x279fffff; valaddr_reg:x3; val_offset:16917*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16917*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5640:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x27bfffff; valaddr_reg:x3; val_offset:16920*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16920*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5641:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x27c00000; valaddr_reg:x3; val_offset:16923*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16923*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5642:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x27e00000; valaddr_reg:x3; val_offset:16926*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16926*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5643:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x27f00000; valaddr_reg:x3; val_offset:16929*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16929*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5644:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x27f80000; valaddr_reg:x3; val_offset:16932*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16932*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5645:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x27fc0000; valaddr_reg:x3; val_offset:16935*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16935*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5646:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x27fe0000; valaddr_reg:x3; val_offset:16938*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16938*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5647:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x27ff0000; valaddr_reg:x3; val_offset:16941*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16941*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5648:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x27ff8000; valaddr_reg:x3; val_offset:16944*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16944*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5649:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x27ffc000; valaddr_reg:x3; val_offset:16947*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16947*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5650:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x27ffe000; valaddr_reg:x3; val_offset:16950*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16950*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5651:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x27fff000; valaddr_reg:x3; val_offset:16953*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16953*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5652:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x27fff800; valaddr_reg:x3; val_offset:16956*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16956*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5653:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x27fffc00; valaddr_reg:x3; val_offset:16959*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16959*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5654:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x27fffe00; valaddr_reg:x3; val_offset:16962*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16962*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5655:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x27ffff00; valaddr_reg:x3; val_offset:16965*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16965*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5656:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x27ffff80; valaddr_reg:x3; val_offset:16968*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16968*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5657:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x27ffffc0; valaddr_reg:x3; val_offset:16971*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16971*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5658:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x27ffffe0; valaddr_reg:x3; val_offset:16974*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16974*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5659:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x27fffff0; valaddr_reg:x3; val_offset:16977*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16977*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5660:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x27fffff8; valaddr_reg:x3; val_offset:16980*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16980*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5661:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x27fffffc; valaddr_reg:x3; val_offset:16983*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16983*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5662:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x27fffffe; valaddr_reg:x3; val_offset:16986*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16986*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5663:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x4f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x27ffffff; valaddr_reg:x3; val_offset:16989*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16989*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5664:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x3f800001; valaddr_reg:x3; val_offset:16992*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16992*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5665:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x3f800003; valaddr_reg:x3; val_offset:16995*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16995*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5666:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x3f800007; valaddr_reg:x3; val_offset:16998*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16998*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5667:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x3f999999; valaddr_reg:x3; val_offset:17001*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17001*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5668:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:17004*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17004*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5669:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:17007*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17007*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5670:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:17010*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17010*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5671:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:17013*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17013*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5672:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:17016*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17016*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5673:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:17019*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17019*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5674:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:17022*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17022*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5675:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:17025*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17025*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5676:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:17028*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17028*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5677:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:17031*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17031*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5678:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:17034*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17034*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5679:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6febf0 and fs2 == 0 and fe2 == 0x02 and fm2 == 0x0893f2 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7defebf0; op2val:0x10893f2;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:17037*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17037*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5680:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:17040*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17040*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5681:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:17043*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17043*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5682:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:17046*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17046*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5683:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:17049*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17049*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5684:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:17052*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17052*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5685:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:17055*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17055*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5686:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:17058*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17058*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5687:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:17061*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17061*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5688:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:17064*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17064*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5689:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:17067*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17067*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5690:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:17070*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17070*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5691:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:17073*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17073*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5692:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:17076*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17076*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5693:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:17079*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17079*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5694:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:17082*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17082*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5695:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:17085*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17085*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5696:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9800000; valaddr_reg:x3; val_offset:17088*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17088*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5697:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9800001; valaddr_reg:x3; val_offset:17091*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17091*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5698:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9800003; valaddr_reg:x3; val_offset:17094*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17094*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5699:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9800007; valaddr_reg:x3; val_offset:17097*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17097*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5700:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x980000f; valaddr_reg:x3; val_offset:17100*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17100*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5701:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x980001f; valaddr_reg:x3; val_offset:17103*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17103*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5702:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x980003f; valaddr_reg:x3; val_offset:17106*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17106*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5703:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x980007f; valaddr_reg:x3; val_offset:17109*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17109*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5704:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x98000ff; valaddr_reg:x3; val_offset:17112*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17112*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5705:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x98001ff; valaddr_reg:x3; val_offset:17115*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17115*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5706:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x98003ff; valaddr_reg:x3; val_offset:17118*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17118*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5707:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x98007ff; valaddr_reg:x3; val_offset:17121*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17121*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5708:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9800fff; valaddr_reg:x3; val_offset:17124*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17124*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5709:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9801fff; valaddr_reg:x3; val_offset:17127*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17127*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5710:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9803fff; valaddr_reg:x3; val_offset:17130*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17130*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5711:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9807fff; valaddr_reg:x3; val_offset:17133*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17133*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5712:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x980ffff; valaddr_reg:x3; val_offset:17136*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17136*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5713:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x981ffff; valaddr_reg:x3; val_offset:17139*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17139*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5714:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x983ffff; valaddr_reg:x3; val_offset:17142*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17142*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5715:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x987ffff; valaddr_reg:x3; val_offset:17145*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17145*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5716:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x98fffff; valaddr_reg:x3; val_offset:17148*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17148*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5717:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x99fffff; valaddr_reg:x3; val_offset:17151*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17151*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5718:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9bfffff; valaddr_reg:x3; val_offset:17154*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17154*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5719:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9c00000; valaddr_reg:x3; val_offset:17157*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17157*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5720:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9e00000; valaddr_reg:x3; val_offset:17160*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17160*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5721:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9f00000; valaddr_reg:x3; val_offset:17163*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17163*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5722:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9f80000; valaddr_reg:x3; val_offset:17166*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17166*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5723:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9fc0000; valaddr_reg:x3; val_offset:17169*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17169*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5724:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9fe0000; valaddr_reg:x3; val_offset:17172*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17172*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5725:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9ff0000; valaddr_reg:x3; val_offset:17175*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17175*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5726:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9ff8000; valaddr_reg:x3; val_offset:17178*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17178*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5727:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9ffc000; valaddr_reg:x3; val_offset:17181*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17181*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5728:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9ffe000; valaddr_reg:x3; val_offset:17184*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17184*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5729:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9fff000; valaddr_reg:x3; val_offset:17187*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17187*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5730:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9fff800; valaddr_reg:x3; val_offset:17190*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17190*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5731:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9fffc00; valaddr_reg:x3; val_offset:17193*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17193*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5732:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9fffe00; valaddr_reg:x3; val_offset:17196*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17196*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5733:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9ffff00; valaddr_reg:x3; val_offset:17199*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17199*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5734:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9ffff80; valaddr_reg:x3; val_offset:17202*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17202*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5735:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9ffffc0; valaddr_reg:x3; val_offset:17205*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17205*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5736:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9ffffe0; valaddr_reg:x3; val_offset:17208*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17208*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5737:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9fffff0; valaddr_reg:x3; val_offset:17211*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17211*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5738:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9fffff8; valaddr_reg:x3; val_offset:17214*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17214*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5739:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9fffffc; valaddr_reg:x3; val_offset:17217*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17217*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5740:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9fffffe; valaddr_reg:x3; val_offset:17220*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17220*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5741:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74d69a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4d69a; op2val:0x0;
op3val:0x9ffffff; valaddr_reg:x3; val_offset:17223*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17223*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5742:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7705e2 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x04a6d0 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df705e2; op2val:0xc104a6d0;
op3val:0xe6000000; valaddr_reg:x3; val_offset:17226*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17226*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5743:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7705e2 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x04a6d0 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df705e2; op2val:0xc104a6d0;
op3val:0xe6000001; valaddr_reg:x3; val_offset:17229*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17229*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5744:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7705e2 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x04a6d0 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df705e2; op2val:0xc104a6d0;
op3val:0xe6000003; valaddr_reg:x3; val_offset:17232*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17232*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5745:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7705e2 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x04a6d0 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df705e2; op2val:0xc104a6d0;
op3val:0xe6000007; valaddr_reg:x3; val_offset:17235*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17235*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5746:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7705e2 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x04a6d0 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df705e2; op2val:0xc104a6d0;
op3val:0xe600000f; valaddr_reg:x3; val_offset:17238*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17238*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5747:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7705e2 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x04a6d0 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df705e2; op2val:0xc104a6d0;
op3val:0xe600001f; valaddr_reg:x3; val_offset:17241*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17241*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5748:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7705e2 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x04a6d0 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df705e2; op2val:0xc104a6d0;
op3val:0xe600003f; valaddr_reg:x3; val_offset:17244*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17244*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5749:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7705e2 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x04a6d0 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df705e2; op2val:0xc104a6d0;
op3val:0xe600007f; valaddr_reg:x3; val_offset:17247*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17247*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5750:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7705e2 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x04a6d0 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df705e2; op2val:0xc104a6d0;
op3val:0xe60000ff; valaddr_reg:x3; val_offset:17250*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17250*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5751:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7705e2 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x04a6d0 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df705e2; op2val:0xc104a6d0;
op3val:0xe60001ff; valaddr_reg:x3; val_offset:17253*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17253*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5752:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7705e2 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x04a6d0 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df705e2; op2val:0xc104a6d0;
op3val:0xe60003ff; valaddr_reg:x3; val_offset:17256*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17256*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5753:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7705e2 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x04a6d0 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df705e2; op2val:0xc104a6d0;
op3val:0xe60007ff; valaddr_reg:x3; val_offset:17259*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17259*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5754:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7705e2 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x04a6d0 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df705e2; op2val:0xc104a6d0;
op3val:0xe6000fff; valaddr_reg:x3; val_offset:17262*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17262*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5755:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7705e2 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x04a6d0 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df705e2; op2val:0xc104a6d0;
op3val:0xe6001fff; valaddr_reg:x3; val_offset:17265*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17265*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5756:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7705e2 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x04a6d0 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df705e2; op2val:0xc104a6d0;
op3val:0xe6003fff; valaddr_reg:x3; val_offset:17268*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17268*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5757:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7705e2 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x04a6d0 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df705e2; op2val:0xc104a6d0;
op3val:0xe6007fff; valaddr_reg:x3; val_offset:17271*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17271*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5758:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7705e2 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x04a6d0 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df705e2; op2val:0xc104a6d0;
op3val:0xe600ffff; valaddr_reg:x3; val_offset:17274*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17274*0 + 3*44*FLEN/8, x4, x1, x2)

inst_5759:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7705e2 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x04a6d0 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df705e2; op2val:0xc104a6d0;
op3val:0xe601ffff; valaddr_reg:x3; val_offset:17277*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 17277*0 + 3*44*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(662716415,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(662732799,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(662765567,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(662831103,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(662962175,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(663224319,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(663748607,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(664797183,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(666894335,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(666894336,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(668991488,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(670040064,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(670564352,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(670826496,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(670957568,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(671023104,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(671055872,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(671072256,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(671080448,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(671084544,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(671086592,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(671087616,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(671088128,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(671088384,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(671088512,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(671088576,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(671088608,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(671088624,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(671088632,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(671088636,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(671088638,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(671088639,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2112875504,32,FLEN)
NAN_BOXED(17339378,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383552,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383553,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383555,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383559,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383567,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383583,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383615,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383679,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159383807,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159384063,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159384575,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159385599,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159387647,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159391743,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159399935,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159416319,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159449087,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159514623,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159645695,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(159907839,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(160432127,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(161480703,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(163577855,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(163577856,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(165675008,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(166723584,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167247872,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167510016,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167641088,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167706624,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167739392,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167755776,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167763968,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167768064,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167770112,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167771136,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167771648,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167771904,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772032,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772096,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772128,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772144,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772152,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772156,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772158,32,FLEN)
NAN_BOXED(2113197722,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(167772159,32,FLEN)
NAN_BOXED(2113340898,32,FLEN)
NAN_BOXED(3238307536,32,FLEN)
NAN_BOXED(3858759680,32,FLEN)
NAN_BOXED(2113340898,32,FLEN)
NAN_BOXED(3238307536,32,FLEN)
NAN_BOXED(3858759681,32,FLEN)
NAN_BOXED(2113340898,32,FLEN)
NAN_BOXED(3238307536,32,FLEN)
NAN_BOXED(3858759683,32,FLEN)
NAN_BOXED(2113340898,32,FLEN)
NAN_BOXED(3238307536,32,FLEN)
NAN_BOXED(3858759687,32,FLEN)
NAN_BOXED(2113340898,32,FLEN)
NAN_BOXED(3238307536,32,FLEN)
NAN_BOXED(3858759695,32,FLEN)
NAN_BOXED(2113340898,32,FLEN)
NAN_BOXED(3238307536,32,FLEN)
NAN_BOXED(3858759711,32,FLEN)
NAN_BOXED(2113340898,32,FLEN)
NAN_BOXED(3238307536,32,FLEN)
NAN_BOXED(3858759743,32,FLEN)
NAN_BOXED(2113340898,32,FLEN)
NAN_BOXED(3238307536,32,FLEN)
NAN_BOXED(3858759807,32,FLEN)
NAN_BOXED(2113340898,32,FLEN)
NAN_BOXED(3238307536,32,FLEN)
NAN_BOXED(3858759935,32,FLEN)
NAN_BOXED(2113340898,32,FLEN)
NAN_BOXED(3238307536,32,FLEN)
NAN_BOXED(3858760191,32,FLEN)
NAN_BOXED(2113340898,32,FLEN)
NAN_BOXED(3238307536,32,FLEN)
NAN_BOXED(3858760703,32,FLEN)
NAN_BOXED(2113340898,32,FLEN)
NAN_BOXED(3238307536,32,FLEN)
NAN_BOXED(3858761727,32,FLEN)
NAN_BOXED(2113340898,32,FLEN)
NAN_BOXED(3238307536,32,FLEN)
NAN_BOXED(3858763775,32,FLEN)
NAN_BOXED(2113340898,32,FLEN)
NAN_BOXED(3238307536,32,FLEN)
NAN_BOXED(3858767871,32,FLEN)
NAN_BOXED(2113340898,32,FLEN)
NAN_BOXED(3238307536,32,FLEN)
NAN_BOXED(3858776063,32,FLEN)
NAN_BOXED(2113340898,32,FLEN)
NAN_BOXED(3238307536,32,FLEN)
NAN_BOXED(3858792447,32,FLEN)
NAN_BOXED(2113340898,32,FLEN)
NAN_BOXED(3238307536,32,FLEN)
NAN_BOXED(3858825215,32,FLEN)
NAN_BOXED(2113340898,32,FLEN)
NAN_BOXED(3238307536,32,FLEN)
NAN_BOXED(3858890751,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
