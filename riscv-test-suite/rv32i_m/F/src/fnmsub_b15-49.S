
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_6144:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x48803fff; valaddr_reg:x3; val_offset:18432*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18432*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6145:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x48807fff; valaddr_reg:x3; val_offset:18435*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18435*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6146:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x4880ffff; valaddr_reg:x3; val_offset:18438*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18438*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6147:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x4881ffff; valaddr_reg:x3; val_offset:18441*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18441*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6148:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x4883ffff; valaddr_reg:x3; val_offset:18444*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18444*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6149:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x4887ffff; valaddr_reg:x3; val_offset:18447*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18447*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6150:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x488fffff; valaddr_reg:x3; val_offset:18450*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18450*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6151:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x489fffff; valaddr_reg:x3; val_offset:18453*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18453*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6152:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x48bfffff; valaddr_reg:x3; val_offset:18456*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18456*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6153:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x48c00000; valaddr_reg:x3; val_offset:18459*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18459*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6154:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x48e00000; valaddr_reg:x3; val_offset:18462*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18462*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6155:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x48f00000; valaddr_reg:x3; val_offset:18465*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18465*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6156:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x48f80000; valaddr_reg:x3; val_offset:18468*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18468*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6157:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x48fc0000; valaddr_reg:x3; val_offset:18471*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18471*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6158:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x48fe0000; valaddr_reg:x3; val_offset:18474*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18474*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6159:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x48ff0000; valaddr_reg:x3; val_offset:18477*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18477*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6160:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x48ff8000; valaddr_reg:x3; val_offset:18480*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18480*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6161:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x48ffc000; valaddr_reg:x3; val_offset:18483*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18483*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6162:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x48ffe000; valaddr_reg:x3; val_offset:18486*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18486*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6163:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x48fff000; valaddr_reg:x3; val_offset:18489*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18489*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6164:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x48fff800; valaddr_reg:x3; val_offset:18492*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18492*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6165:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x48fffc00; valaddr_reg:x3; val_offset:18495*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18495*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6166:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x48fffe00; valaddr_reg:x3; val_offset:18498*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18498*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6167:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x48ffff00; valaddr_reg:x3; val_offset:18501*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18501*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6168:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x48ffff80; valaddr_reg:x3; val_offset:18504*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18504*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6169:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x48ffffc0; valaddr_reg:x3; val_offset:18507*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18507*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6170:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x48ffffe0; valaddr_reg:x3; val_offset:18510*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18510*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6171:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x48fffff0; valaddr_reg:x3; val_offset:18513*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18513*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6172:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x48fffff8; valaddr_reg:x3; val_offset:18516*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18516*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6173:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x48fffffc; valaddr_reg:x3; val_offset:18519*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18519*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6174:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x48fffffe; valaddr_reg:x3; val_offset:18522*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18522*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6175:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0202a2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x7c0aa6 and fs3 == 0 and fe3 == 0x91 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0202a2; op2val:0xfc0aa6;
op3val:0x48ffffff; valaddr_reg:x3; val_offset:18525*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18525*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6176:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68800000; valaddr_reg:x3; val_offset:18528*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18528*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6177:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68800001; valaddr_reg:x3; val_offset:18531*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18531*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6178:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68800003; valaddr_reg:x3; val_offset:18534*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18534*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6179:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68800007; valaddr_reg:x3; val_offset:18537*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18537*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6180:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x6880000f; valaddr_reg:x3; val_offset:18540*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18540*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6181:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x6880001f; valaddr_reg:x3; val_offset:18543*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18543*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6182:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x6880003f; valaddr_reg:x3; val_offset:18546*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18546*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6183:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x6880007f; valaddr_reg:x3; val_offset:18549*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18549*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6184:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x688000ff; valaddr_reg:x3; val_offset:18552*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18552*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6185:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x688001ff; valaddr_reg:x3; val_offset:18555*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18555*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6186:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x688003ff; valaddr_reg:x3; val_offset:18558*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18558*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6187:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x688007ff; valaddr_reg:x3; val_offset:18561*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18561*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6188:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68800fff; valaddr_reg:x3; val_offset:18564*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18564*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6189:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68801fff; valaddr_reg:x3; val_offset:18567*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18567*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6190:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68803fff; valaddr_reg:x3; val_offset:18570*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18570*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6191:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68807fff; valaddr_reg:x3; val_offset:18573*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18573*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6192:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x6880ffff; valaddr_reg:x3; val_offset:18576*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18576*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6193:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x6881ffff; valaddr_reg:x3; val_offset:18579*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18579*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6194:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x6883ffff; valaddr_reg:x3; val_offset:18582*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18582*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6195:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x6887ffff; valaddr_reg:x3; val_offset:18585*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18585*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6196:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x688fffff; valaddr_reg:x3; val_offset:18588*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18588*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6197:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x689fffff; valaddr_reg:x3; val_offset:18591*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18591*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6198:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68bfffff; valaddr_reg:x3; val_offset:18594*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18594*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6199:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68c00000; valaddr_reg:x3; val_offset:18597*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18597*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6200:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68e00000; valaddr_reg:x3; val_offset:18600*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18600*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6201:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68f00000; valaddr_reg:x3; val_offset:18603*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18603*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6202:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68f80000; valaddr_reg:x3; val_offset:18606*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18606*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6203:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68fc0000; valaddr_reg:x3; val_offset:18609*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18609*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6204:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68fe0000; valaddr_reg:x3; val_offset:18612*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18612*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6205:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68ff0000; valaddr_reg:x3; val_offset:18615*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18615*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6206:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68ff8000; valaddr_reg:x3; val_offset:18618*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18618*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6207:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68ffc000; valaddr_reg:x3; val_offset:18621*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18621*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6208:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68ffe000; valaddr_reg:x3; val_offset:18624*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18624*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6209:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68fff000; valaddr_reg:x3; val_offset:18627*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18627*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6210:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68fff800; valaddr_reg:x3; val_offset:18630*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18630*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6211:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68fffc00; valaddr_reg:x3; val_offset:18633*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18633*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6212:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68fffe00; valaddr_reg:x3; val_offset:18636*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18636*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6213:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68ffff00; valaddr_reg:x3; val_offset:18639*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18639*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6214:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68ffff80; valaddr_reg:x3; val_offset:18642*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18642*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6215:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68ffffc0; valaddr_reg:x3; val_offset:18645*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18645*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6216:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68ffffe0; valaddr_reg:x3; val_offset:18648*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18648*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6217:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68fffff0; valaddr_reg:x3; val_offset:18651*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18651*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6218:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68fffff8; valaddr_reg:x3; val_offset:18654*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18654*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6219:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68fffffc; valaddr_reg:x3; val_offset:18657*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18657*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6220:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68fffffe; valaddr_reg:x3; val_offset:18660*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18660*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6221:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xd1 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x68ffffff; valaddr_reg:x3; val_offset:18663*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18663*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6222:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x7f000001; valaddr_reg:x3; val_offset:18666*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18666*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6223:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x7f000003; valaddr_reg:x3; val_offset:18669*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18669*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6224:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x7f000007; valaddr_reg:x3; val_offset:18672*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18672*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6225:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x7f199999; valaddr_reg:x3; val_offset:18675*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18675*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6226:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x7f249249; valaddr_reg:x3; val_offset:18678*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18678*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6227:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x7f333333; valaddr_reg:x3; val_offset:18681*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18681*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6228:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:18684*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18684*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6229:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:18687*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18687*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6230:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x7f444444; valaddr_reg:x3; val_offset:18690*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18690*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6231:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:18693*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18693*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6232:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:18696*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18696*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6233:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x7f666666; valaddr_reg:x3; val_offset:18699*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18699*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6234:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:18702*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18702*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6235:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:18705*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18705*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6236:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:18708*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18708*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6237:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x02d07f and fs2 == 0 and fe2 == 0x81 and fm2 == 0x7a7e01 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e02d07f; op2val:0x40fa7e01;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:18711*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18711*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6238:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf2800000; valaddr_reg:x3; val_offset:18714*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18714*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6239:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf2800001; valaddr_reg:x3; val_offset:18717*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18717*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6240:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf2800003; valaddr_reg:x3; val_offset:18720*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18720*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6241:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf2800007; valaddr_reg:x3; val_offset:18723*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18723*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6242:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf280000f; valaddr_reg:x3; val_offset:18726*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18726*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6243:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf280001f; valaddr_reg:x3; val_offset:18729*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18729*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6244:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf280003f; valaddr_reg:x3; val_offset:18732*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18732*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6245:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf280007f; valaddr_reg:x3; val_offset:18735*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18735*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6246:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf28000ff; valaddr_reg:x3; val_offset:18738*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18738*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6247:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf28001ff; valaddr_reg:x3; val_offset:18741*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18741*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6248:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf28003ff; valaddr_reg:x3; val_offset:18744*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18744*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6249:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf28007ff; valaddr_reg:x3; val_offset:18747*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18747*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6250:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf2800fff; valaddr_reg:x3; val_offset:18750*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18750*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6251:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf2801fff; valaddr_reg:x3; val_offset:18753*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18753*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6252:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf2803fff; valaddr_reg:x3; val_offset:18756*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18756*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6253:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf2807fff; valaddr_reg:x3; val_offset:18759*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18759*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6254:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf280ffff; valaddr_reg:x3; val_offset:18762*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18762*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6255:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf281ffff; valaddr_reg:x3; val_offset:18765*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18765*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6256:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf283ffff; valaddr_reg:x3; val_offset:18768*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18768*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6257:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf287ffff; valaddr_reg:x3; val_offset:18771*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18771*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6258:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf28fffff; valaddr_reg:x3; val_offset:18774*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18774*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6259:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf29fffff; valaddr_reg:x3; val_offset:18777*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18777*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6260:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf2bfffff; valaddr_reg:x3; val_offset:18780*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18780*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6261:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf2c00000; valaddr_reg:x3; val_offset:18783*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18783*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6262:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf2e00000; valaddr_reg:x3; val_offset:18786*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18786*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6263:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf2f00000; valaddr_reg:x3; val_offset:18789*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18789*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6264:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf2f80000; valaddr_reg:x3; val_offset:18792*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18792*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6265:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf2fc0000; valaddr_reg:x3; val_offset:18795*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18795*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6266:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf2fe0000; valaddr_reg:x3; val_offset:18798*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18798*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6267:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf2ff0000; valaddr_reg:x3; val_offset:18801*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18801*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6268:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf2ff8000; valaddr_reg:x3; val_offset:18804*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18804*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6269:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf2ffc000; valaddr_reg:x3; val_offset:18807*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18807*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6270:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf2ffe000; valaddr_reg:x3; val_offset:18810*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18810*0 + 3*48*FLEN/8, x4, x1, x2)

inst_6271:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03258c and fs2 == 1 and fe2 == 0x81 and fm2 == 0x79db8d and fs3 == 1 and fe3 == 0xe5 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03258c; op2val:0xc0f9db8d;
op3val:0xf2fff000; valaddr_reg:x3; val_offset:18813*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 18813*0 + 3*48*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1216364543,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1216380927,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1216413695,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1216479231,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1216610303,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1216872447,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1217396735,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1218445311,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1220542463,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1220542464,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1222639616,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1223688192,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1224212480,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1224474624,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1224605696,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1224671232,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1224704000,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1224720384,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1224728576,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1224732672,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1224734720,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1224735744,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1224736256,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1224736512,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1224736640,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1224736704,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1224736736,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1224736752,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1224736760,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1224736764,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1224736766,32,FLEN)
NAN_BOXED(2114060962,32,FLEN)
NAN_BOXED(16517798,32,FLEN)
NAN_BOXED(1224736767,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1753219072,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1753219073,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1753219075,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1753219079,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1753219087,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1753219103,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1753219135,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1753219199,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1753219327,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1753219583,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1753220095,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1753221119,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1753223167,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1753227263,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1753235455,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1753251839,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1753284607,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1753350143,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1753481215,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1753743359,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1754267647,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1755316223,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1757413375,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1757413376,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1759510528,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1760559104,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1761083392,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1761345536,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1761476608,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1761542144,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1761574912,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1761591296,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1761599488,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1761603584,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1761605632,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1761606656,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1761607168,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1761607424,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1761607552,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1761607616,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1761607648,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1761607664,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1761607672,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1761607676,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1761607678,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(1761607679,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2114113663,32,FLEN)
NAN_BOXED(1090158081,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4068474880,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4068474881,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4068474883,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4068474887,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4068474895,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4068474911,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4068474943,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4068475007,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4068475135,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4068475391,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4068475903,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4068476927,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4068478975,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4068483071,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4068491263,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4068507647,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4068540415,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4068605951,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4068737023,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4068999167,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4069523455,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4070572031,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4072669183,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4072669184,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4074766336,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4075814912,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4076339200,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4076601344,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4076732416,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4076797952,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4076830720,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4076847104,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4076855296,32,FLEN)
NAN_BOXED(2114135436,32,FLEN)
NAN_BOXED(3237600141,32,FLEN)
NAN_BOXED(4076859392,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
