
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_6400:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03f57f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7851d1 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03f57f; op2val:0x80f851d1;
op3val:0xb1ffff80; valaddr_reg:x3; val_offset:19200*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19200*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6401:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03f57f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7851d1 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03f57f; op2val:0x80f851d1;
op3val:0xb1ffffc0; valaddr_reg:x3; val_offset:19203*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19203*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6402:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03f57f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7851d1 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03f57f; op2val:0x80f851d1;
op3val:0xb1ffffe0; valaddr_reg:x3; val_offset:19206*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19206*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6403:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03f57f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7851d1 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03f57f; op2val:0x80f851d1;
op3val:0xb1fffff0; valaddr_reg:x3; val_offset:19209*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19209*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6404:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03f57f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7851d1 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03f57f; op2val:0x80f851d1;
op3val:0xb1fffff8; valaddr_reg:x3; val_offset:19212*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19212*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6405:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03f57f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7851d1 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03f57f; op2val:0x80f851d1;
op3val:0xb1fffffc; valaddr_reg:x3; val_offset:19215*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19215*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6406:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03f57f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7851d1 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03f57f; op2val:0x80f851d1;
op3val:0xb1fffffe; valaddr_reg:x3; val_offset:19218*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19218*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6407:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03f57f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7851d1 and fs3 == 1 and fe3 == 0x63 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03f57f; op2val:0x80f851d1;
op3val:0xb1ffffff; valaddr_reg:x3; val_offset:19221*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19221*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6408:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03f57f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7851d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03f57f; op2val:0x80f851d1;
op3val:0xbf800001; valaddr_reg:x3; val_offset:19224*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19224*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6409:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03f57f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7851d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03f57f; op2val:0x80f851d1;
op3val:0xbf800003; valaddr_reg:x3; val_offset:19227*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19227*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6410:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03f57f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7851d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03f57f; op2val:0x80f851d1;
op3val:0xbf800007; valaddr_reg:x3; val_offset:19230*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19230*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6411:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03f57f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7851d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03f57f; op2val:0x80f851d1;
op3val:0xbf999999; valaddr_reg:x3; val_offset:19233*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19233*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6412:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03f57f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7851d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03f57f; op2val:0x80f851d1;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:19236*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19236*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6413:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03f57f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7851d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03f57f; op2val:0x80f851d1;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:19239*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19239*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6414:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03f57f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7851d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03f57f; op2val:0x80f851d1;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:19242*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19242*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6415:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03f57f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7851d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03f57f; op2val:0x80f851d1;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:19245*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19245*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6416:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03f57f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7851d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03f57f; op2val:0x80f851d1;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:19248*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19248*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6417:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03f57f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7851d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03f57f; op2val:0x80f851d1;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:19251*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19251*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6418:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03f57f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7851d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03f57f; op2val:0x80f851d1;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:19254*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19254*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6419:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03f57f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7851d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03f57f; op2val:0x80f851d1;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:19257*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19257*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6420:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03f57f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7851d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03f57f; op2val:0x80f851d1;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:19260*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19260*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6421:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03f57f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7851d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03f57f; op2val:0x80f851d1;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:19263*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19263*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6422:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03f57f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7851d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03f57f; op2val:0x80f851d1;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:19266*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19266*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6423:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x03f57f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x7851d1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e03f57f; op2val:0x80f851d1;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:19269*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19269*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6424:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x74000000; valaddr_reg:x3; val_offset:19272*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19272*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6425:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x74000001; valaddr_reg:x3; val_offset:19275*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19275*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6426:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x74000003; valaddr_reg:x3; val_offset:19278*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19278*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6427:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x74000007; valaddr_reg:x3; val_offset:19281*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19281*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6428:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x7400000f; valaddr_reg:x3; val_offset:19284*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19284*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6429:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x7400001f; valaddr_reg:x3; val_offset:19287*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19287*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6430:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x7400003f; valaddr_reg:x3; val_offset:19290*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19290*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6431:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x7400007f; valaddr_reg:x3; val_offset:19293*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19293*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6432:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x740000ff; valaddr_reg:x3; val_offset:19296*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19296*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6433:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x740001ff; valaddr_reg:x3; val_offset:19299*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19299*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6434:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x740003ff; valaddr_reg:x3; val_offset:19302*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19302*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6435:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x740007ff; valaddr_reg:x3; val_offset:19305*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19305*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6436:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x74000fff; valaddr_reg:x3; val_offset:19308*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19308*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6437:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x74001fff; valaddr_reg:x3; val_offset:19311*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19311*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6438:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x74003fff; valaddr_reg:x3; val_offset:19314*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19314*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6439:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x74007fff; valaddr_reg:x3; val_offset:19317*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19317*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6440:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x7400ffff; valaddr_reg:x3; val_offset:19320*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19320*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6441:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x7401ffff; valaddr_reg:x3; val_offset:19323*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19323*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6442:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x7403ffff; valaddr_reg:x3; val_offset:19326*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19326*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6443:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x7407ffff; valaddr_reg:x3; val_offset:19329*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19329*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6444:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x740fffff; valaddr_reg:x3; val_offset:19332*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19332*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6445:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x741fffff; valaddr_reg:x3; val_offset:19335*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19335*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6446:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x743fffff; valaddr_reg:x3; val_offset:19338*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19338*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6447:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x74400000; valaddr_reg:x3; val_offset:19341*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19341*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6448:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x74600000; valaddr_reg:x3; val_offset:19344*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19344*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6449:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x74700000; valaddr_reg:x3; val_offset:19347*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19347*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6450:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x74780000; valaddr_reg:x3; val_offset:19350*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19350*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6451:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x747c0000; valaddr_reg:x3; val_offset:19353*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19353*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6452:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x747e0000; valaddr_reg:x3; val_offset:19356*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19356*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6453:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x747f0000; valaddr_reg:x3; val_offset:19359*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19359*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6454:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x747f8000; valaddr_reg:x3; val_offset:19362*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19362*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6455:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x747fc000; valaddr_reg:x3; val_offset:19365*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19365*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6456:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x747fe000; valaddr_reg:x3; val_offset:19368*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19368*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6457:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x747ff000; valaddr_reg:x3; val_offset:19371*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19371*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6458:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x747ff800; valaddr_reg:x3; val_offset:19374*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19374*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6459:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x747ffc00; valaddr_reg:x3; val_offset:19377*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19377*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6460:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x747ffe00; valaddr_reg:x3; val_offset:19380*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19380*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6461:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x747fff00; valaddr_reg:x3; val_offset:19383*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19383*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6462:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x747fff80; valaddr_reg:x3; val_offset:19386*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19386*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6463:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x747fffc0; valaddr_reg:x3; val_offset:19389*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19389*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6464:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x747fffe0; valaddr_reg:x3; val_offset:19392*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19392*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6465:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x747ffff0; valaddr_reg:x3; val_offset:19395*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19395*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6466:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x747ffff8; valaddr_reg:x3; val_offset:19398*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19398*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6467:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x747ffffc; valaddr_reg:x3; val_offset:19401*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19401*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6468:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x747ffffe; valaddr_reg:x3; val_offset:19404*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19404*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6469:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xe8 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x747fffff; valaddr_reg:x3; val_offset:19407*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19407*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6470:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x7f000001; valaddr_reg:x3; val_offset:19410*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19410*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6471:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x7f000003; valaddr_reg:x3; val_offset:19413*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19413*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6472:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x7f000007; valaddr_reg:x3; val_offset:19416*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19416*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6473:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x7f199999; valaddr_reg:x3; val_offset:19419*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19419*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6474:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x7f249249; valaddr_reg:x3; val_offset:19422*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19422*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6475:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x7f333333; valaddr_reg:x3; val_offset:19425*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19425*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6476:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:19428*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19428*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6477:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:19431*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19431*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6478:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x7f444444; valaddr_reg:x3; val_offset:19434*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19434*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6479:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:19437*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19437*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6480:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:19440*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19440*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6481:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x7f666666; valaddr_reg:x3; val_offset:19443*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19443*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6482:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:19446*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19446*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6483:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:19449*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19449*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6484:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:19452*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19452*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6485:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x04f264 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x767974 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e04f264; op2val:0x40f67974;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:19455*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19455*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6486:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:19458*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19458*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6487:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:19461*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19461*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6488:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:19464*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19464*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6489:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:19467*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19467*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6490:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:19470*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19470*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6491:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:19473*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19473*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6492:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:19476*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19476*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6493:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:19479*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19479*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6494:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:19482*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19482*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6495:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:19485*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19485*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6496:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:19488*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19488*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6497:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:19491*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19491*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6498:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:19494*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19494*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6499:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:19497*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19497*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6500:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:19500*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19500*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6501:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:19503*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19503*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6502:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x89800000; valaddr_reg:x3; val_offset:19506*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19506*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6503:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x89800001; valaddr_reg:x3; val_offset:19509*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19509*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6504:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x89800003; valaddr_reg:x3; val_offset:19512*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19512*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6505:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x89800007; valaddr_reg:x3; val_offset:19515*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19515*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6506:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x8980000f; valaddr_reg:x3; val_offset:19518*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19518*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6507:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x8980001f; valaddr_reg:x3; val_offset:19521*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19521*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6508:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x8980003f; valaddr_reg:x3; val_offset:19524*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19524*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6509:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x8980007f; valaddr_reg:x3; val_offset:19527*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19527*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6510:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x898000ff; valaddr_reg:x3; val_offset:19530*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19530*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6511:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x898001ff; valaddr_reg:x3; val_offset:19533*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19533*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6512:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x898003ff; valaddr_reg:x3; val_offset:19536*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19536*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6513:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x898007ff; valaddr_reg:x3; val_offset:19539*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19539*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6514:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x89800fff; valaddr_reg:x3; val_offset:19542*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19542*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6515:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x89801fff; valaddr_reg:x3; val_offset:19545*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19545*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6516:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x89803fff; valaddr_reg:x3; val_offset:19548*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19548*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6517:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x89807fff; valaddr_reg:x3; val_offset:19551*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19551*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6518:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x8980ffff; valaddr_reg:x3; val_offset:19554*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19554*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6519:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x8981ffff; valaddr_reg:x3; val_offset:19557*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19557*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6520:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x8983ffff; valaddr_reg:x3; val_offset:19560*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19560*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6521:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x8987ffff; valaddr_reg:x3; val_offset:19563*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19563*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6522:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x898fffff; valaddr_reg:x3; val_offset:19566*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19566*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6523:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x899fffff; valaddr_reg:x3; val_offset:19569*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19569*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6524:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x89bfffff; valaddr_reg:x3; val_offset:19572*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19572*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6525:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x89c00000; valaddr_reg:x3; val_offset:19575*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19575*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6526:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x89e00000; valaddr_reg:x3; val_offset:19578*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19578*0 + 3*50*FLEN/8, x4, x1, x2)

inst_6527:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0775f5 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x13 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0775f5; op2val:0x80000000;
op3val:0x89f00000; valaddr_reg:x3; val_offset:19581*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19581*0 + 3*50*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2114188671,32,FLEN)
NAN_BOXED(2163757521,32,FLEN)
NAN_BOXED(2986344320,32,FLEN)
NAN_BOXED(2114188671,32,FLEN)
NAN_BOXED(2163757521,32,FLEN)
NAN_BOXED(2986344384,32,FLEN)
NAN_BOXED(2114188671,32,FLEN)
NAN_BOXED(2163757521,32,FLEN)
NAN_BOXED(2986344416,32,FLEN)
NAN_BOXED(2114188671,32,FLEN)
NAN_BOXED(2163757521,32,FLEN)
NAN_BOXED(2986344432,32,FLEN)
NAN_BOXED(2114188671,32,FLEN)
NAN_BOXED(2163757521,32,FLEN)
NAN_BOXED(2986344440,32,FLEN)
NAN_BOXED(2114188671,32,FLEN)
NAN_BOXED(2163757521,32,FLEN)
NAN_BOXED(2986344444,32,FLEN)
NAN_BOXED(2114188671,32,FLEN)
NAN_BOXED(2163757521,32,FLEN)
NAN_BOXED(2986344446,32,FLEN)
NAN_BOXED(2114188671,32,FLEN)
NAN_BOXED(2163757521,32,FLEN)
NAN_BOXED(2986344447,32,FLEN)
NAN_BOXED(2114188671,32,FLEN)
NAN_BOXED(2163757521,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2114188671,32,FLEN)
NAN_BOXED(2163757521,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2114188671,32,FLEN)
NAN_BOXED(2163757521,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2114188671,32,FLEN)
NAN_BOXED(2163757521,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2114188671,32,FLEN)
NAN_BOXED(2163757521,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2114188671,32,FLEN)
NAN_BOXED(2163757521,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2114188671,32,FLEN)
NAN_BOXED(2163757521,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2114188671,32,FLEN)
NAN_BOXED(2163757521,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2114188671,32,FLEN)
NAN_BOXED(2163757521,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2114188671,32,FLEN)
NAN_BOXED(2163757521,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2114188671,32,FLEN)
NAN_BOXED(2163757521,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2114188671,32,FLEN)
NAN_BOXED(2163757521,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2114188671,32,FLEN)
NAN_BOXED(2163757521,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2114188671,32,FLEN)
NAN_BOXED(2163757521,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2114188671,32,FLEN)
NAN_BOXED(2163757521,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2114188671,32,FLEN)
NAN_BOXED(2163757521,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1946157056,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1946157057,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1946157059,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1946157063,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1946157071,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1946157087,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1946157119,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1946157183,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1946157311,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1946157567,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1946158079,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1946159103,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1946161151,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1946165247,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1946173439,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1946189823,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1946222591,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1946288127,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1946419199,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1946681343,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1947205631,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1948254207,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1950351359,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1950351360,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1952448512,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1953497088,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1954021376,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1954283520,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1954414592,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1954480128,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1954512896,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1954529280,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1954537472,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1954541568,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1954543616,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1954544640,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1954545152,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1954545408,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1954545536,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1954545600,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1954545632,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1954545648,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1954545656,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1954545660,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1954545662,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(1954545663,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2114253412,32,FLEN)
NAN_BOXED(1089894772,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867200,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867201,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867203,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867207,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867215,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867231,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867263,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867327,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867455,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867711,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306868223,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306869247,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306871295,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306875391,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306883583,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306899967,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306932735,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306998271,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2307129343,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2307391487,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2307915775,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2308964351,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2311061503,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2311061504,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2313158656,32,FLEN)
NAN_BOXED(2114418165,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2314207232,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
