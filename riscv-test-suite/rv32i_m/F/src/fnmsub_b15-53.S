
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_6656:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0962fb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x6e8264 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0962fb; op2val:0x40ee8264;
op3val:0x7f000001; valaddr_reg:x3; val_offset:19968*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19968*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6657:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0962fb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x6e8264 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0962fb; op2val:0x40ee8264;
op3val:0x7f000003; valaddr_reg:x3; val_offset:19971*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19971*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6658:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0962fb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x6e8264 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0962fb; op2val:0x40ee8264;
op3val:0x7f000007; valaddr_reg:x3; val_offset:19974*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19974*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6659:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0962fb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x6e8264 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0962fb; op2val:0x40ee8264;
op3val:0x7f199999; valaddr_reg:x3; val_offset:19977*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19977*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6660:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0962fb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x6e8264 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0962fb; op2val:0x40ee8264;
op3val:0x7f249249; valaddr_reg:x3; val_offset:19980*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19980*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6661:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0962fb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x6e8264 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0962fb; op2val:0x40ee8264;
op3val:0x7f333333; valaddr_reg:x3; val_offset:19983*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19983*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6662:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0962fb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x6e8264 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0962fb; op2val:0x40ee8264;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:19986*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19986*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6663:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0962fb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x6e8264 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0962fb; op2val:0x40ee8264;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:19989*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19989*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6664:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0962fb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x6e8264 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0962fb; op2val:0x40ee8264;
op3val:0x7f444444; valaddr_reg:x3; val_offset:19992*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19992*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6665:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0962fb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x6e8264 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0962fb; op2val:0x40ee8264;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:19995*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19995*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6666:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0962fb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x6e8264 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0962fb; op2val:0x40ee8264;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:19998*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 19998*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6667:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0962fb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x6e8264 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0962fb; op2val:0x40ee8264;
op3val:0x7f666666; valaddr_reg:x3; val_offset:20001*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20001*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6668:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0962fb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x6e8264 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0962fb; op2val:0x40ee8264;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:20004*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20004*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6669:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0962fb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x6e8264 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0962fb; op2val:0x40ee8264;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:20007*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20007*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6670:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0962fb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x6e8264 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0962fb; op2val:0x40ee8264;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:20010*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20010*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6671:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0962fb and fs2 == 0 and fe2 == 0x81 and fm2 == 0x6e8264 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0962fb; op2val:0x40ee8264;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:20013*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20013*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6672:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:20016*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20016*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6673:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:20019*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20019*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6674:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:20022*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20022*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6675:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:20025*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20025*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6676:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:20028*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20028*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6677:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:20031*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20031*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6678:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:20034*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20034*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6679:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:20037*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20037*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6680:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:20040*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20040*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6681:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:20043*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20043*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6682:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:20046*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20046*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6683:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:20049*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20049*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6684:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:20052*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20052*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6685:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:20055*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20055*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6686:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:20058*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20058*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6687:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:20061*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20061*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6688:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x83000000; valaddr_reg:x3; val_offset:20064*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20064*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6689:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x83000001; valaddr_reg:x3; val_offset:20067*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20067*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6690:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x83000003; valaddr_reg:x3; val_offset:20070*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20070*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6691:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x83000007; valaddr_reg:x3; val_offset:20073*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20073*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6692:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x8300000f; valaddr_reg:x3; val_offset:20076*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20076*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6693:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x8300001f; valaddr_reg:x3; val_offset:20079*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20079*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6694:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x8300003f; valaddr_reg:x3; val_offset:20082*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20082*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6695:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x8300007f; valaddr_reg:x3; val_offset:20085*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20085*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6696:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x830000ff; valaddr_reg:x3; val_offset:20088*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20088*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6697:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x830001ff; valaddr_reg:x3; val_offset:20091*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20091*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6698:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x830003ff; valaddr_reg:x3; val_offset:20094*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20094*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6699:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x830007ff; valaddr_reg:x3; val_offset:20097*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20097*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6700:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x83000fff; valaddr_reg:x3; val_offset:20100*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20100*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6701:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x83001fff; valaddr_reg:x3; val_offset:20103*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20103*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6702:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x83003fff; valaddr_reg:x3; val_offset:20106*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20106*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6703:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x83007fff; valaddr_reg:x3; val_offset:20109*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20109*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6704:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x8300ffff; valaddr_reg:x3; val_offset:20112*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20112*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6705:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x8301ffff; valaddr_reg:x3; val_offset:20115*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20115*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6706:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x8303ffff; valaddr_reg:x3; val_offset:20118*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20118*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6707:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x8307ffff; valaddr_reg:x3; val_offset:20121*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20121*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6708:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x830fffff; valaddr_reg:x3; val_offset:20124*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20124*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6709:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x831fffff; valaddr_reg:x3; val_offset:20127*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20127*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6710:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x833fffff; valaddr_reg:x3; val_offset:20130*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20130*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6711:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x83400000; valaddr_reg:x3; val_offset:20133*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20133*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6712:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x83600000; valaddr_reg:x3; val_offset:20136*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20136*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6713:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x83700000; valaddr_reg:x3; val_offset:20139*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20139*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6714:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x83780000; valaddr_reg:x3; val_offset:20142*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20142*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6715:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x837c0000; valaddr_reg:x3; val_offset:20145*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20145*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6716:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x837e0000; valaddr_reg:x3; val_offset:20148*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20148*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6717:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x837f0000; valaddr_reg:x3; val_offset:20151*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20151*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6718:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x837f8000; valaddr_reg:x3; val_offset:20154*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20154*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6719:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x837fc000; valaddr_reg:x3; val_offset:20157*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20157*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6720:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x837fe000; valaddr_reg:x3; val_offset:20160*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20160*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6721:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x837ff000; valaddr_reg:x3; val_offset:20163*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20163*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6722:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x837ff800; valaddr_reg:x3; val_offset:20166*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20166*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6723:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x837ffc00; valaddr_reg:x3; val_offset:20169*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20169*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6724:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x837ffe00; valaddr_reg:x3; val_offset:20172*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20172*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6725:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x837fff00; valaddr_reg:x3; val_offset:20175*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20175*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6726:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x837fff80; valaddr_reg:x3; val_offset:20178*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20178*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6727:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x837fffc0; valaddr_reg:x3; val_offset:20181*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20181*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6728:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x837fffe0; valaddr_reg:x3; val_offset:20184*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20184*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6729:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x837ffff0; valaddr_reg:x3; val_offset:20187*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20187*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6730:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x837ffff8; valaddr_reg:x3; val_offset:20190*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20190*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6731:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x837ffffc; valaddr_reg:x3; val_offset:20193*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20193*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6732:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x837ffffe; valaddr_reg:x3; val_offset:20196*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20196*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6733:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x098d5c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e098d5c; op2val:0x80000000;
op3val:0x837fffff; valaddr_reg:x3; val_offset:20199*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20199*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6734:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:20202*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20202*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6735:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:20205*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20205*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6736:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:20208*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20208*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6737:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:20211*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20211*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6738:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:20214*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20214*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6739:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:20217*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20217*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6740:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:20220*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20220*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6741:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:20223*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20223*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6742:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:20226*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20226*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6743:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:20229*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20229*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6744:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:20232*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20232*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6745:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:20235*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20235*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6746:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:20238*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20238*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6747:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:20241*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20241*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6748:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:20244*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20244*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6749:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:20247*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20247*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6750:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a000000; valaddr_reg:x3; val_offset:20250*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20250*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6751:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a000001; valaddr_reg:x3; val_offset:20253*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20253*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6752:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a000003; valaddr_reg:x3; val_offset:20256*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20256*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6753:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a000007; valaddr_reg:x3; val_offset:20259*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20259*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6754:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a00000f; valaddr_reg:x3; val_offset:20262*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20262*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6755:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a00001f; valaddr_reg:x3; val_offset:20265*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20265*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6756:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a00003f; valaddr_reg:x3; val_offset:20268*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20268*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6757:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a00007f; valaddr_reg:x3; val_offset:20271*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20271*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6758:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a0000ff; valaddr_reg:x3; val_offset:20274*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20274*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6759:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a0001ff; valaddr_reg:x3; val_offset:20277*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20277*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6760:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a0003ff; valaddr_reg:x3; val_offset:20280*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20280*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6761:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a0007ff; valaddr_reg:x3; val_offset:20283*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20283*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6762:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a000fff; valaddr_reg:x3; val_offset:20286*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20286*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6763:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a001fff; valaddr_reg:x3; val_offset:20289*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20289*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6764:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a003fff; valaddr_reg:x3; val_offset:20292*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20292*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6765:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a007fff; valaddr_reg:x3; val_offset:20295*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20295*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6766:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a00ffff; valaddr_reg:x3; val_offset:20298*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20298*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6767:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a01ffff; valaddr_reg:x3; val_offset:20301*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20301*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6768:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a03ffff; valaddr_reg:x3; val_offset:20304*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20304*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6769:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a07ffff; valaddr_reg:x3; val_offset:20307*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20307*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6770:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a0fffff; valaddr_reg:x3; val_offset:20310*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20310*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6771:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a1fffff; valaddr_reg:x3; val_offset:20313*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20313*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6772:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a3fffff; valaddr_reg:x3; val_offset:20316*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20316*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6773:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a400000; valaddr_reg:x3; val_offset:20319*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20319*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6774:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a600000; valaddr_reg:x3; val_offset:20322*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20322*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6775:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a700000; valaddr_reg:x3; val_offset:20325*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20325*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6776:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a780000; valaddr_reg:x3; val_offset:20328*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20328*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6777:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a7c0000; valaddr_reg:x3; val_offset:20331*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20331*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6778:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a7e0000; valaddr_reg:x3; val_offset:20334*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20334*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6779:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a7f0000; valaddr_reg:x3; val_offset:20337*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20337*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6780:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a7f8000; valaddr_reg:x3; val_offset:20340*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20340*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6781:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a7fc000; valaddr_reg:x3; val_offset:20343*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20343*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6782:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a7fe000; valaddr_reg:x3; val_offset:20346*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20346*0 + 3*52*FLEN/8, x4, x1, x2)

inst_6783:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0a10b2 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0a10b2; op2val:0x80000000;
op3val:0x8a7ff000; valaddr_reg:x3; val_offset:20349*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 20349*0 + 3*52*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2114544379,32,FLEN)
NAN_BOXED(1089372772,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2114544379,32,FLEN)
NAN_BOXED(1089372772,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2114544379,32,FLEN)
NAN_BOXED(1089372772,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2114544379,32,FLEN)
NAN_BOXED(1089372772,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2114544379,32,FLEN)
NAN_BOXED(1089372772,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2114544379,32,FLEN)
NAN_BOXED(1089372772,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2114544379,32,FLEN)
NAN_BOXED(1089372772,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2114544379,32,FLEN)
NAN_BOXED(1089372772,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2114544379,32,FLEN)
NAN_BOXED(1089372772,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2114544379,32,FLEN)
NAN_BOXED(1089372772,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2114544379,32,FLEN)
NAN_BOXED(1089372772,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2114544379,32,FLEN)
NAN_BOXED(1089372772,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2114544379,32,FLEN)
NAN_BOXED(1089372772,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2114544379,32,FLEN)
NAN_BOXED(1089372772,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2114544379,32,FLEN)
NAN_BOXED(1089372772,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2114544379,32,FLEN)
NAN_BOXED(1089372772,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815296,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815297,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815299,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815303,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815311,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815327,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815359,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815423,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815551,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197815807,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197816319,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197817343,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197819391,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197823487,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197831679,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197848063,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197880831,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2197946367,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2198077439,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2198339583,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2198863871,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2199912447,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2202009599,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2202009600,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2204106752,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2205155328,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2205679616,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2205941760,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206072832,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206138368,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206171136,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206187520,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206195712,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206199808,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206201856,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206202880,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203392,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203648,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203776,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203840,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203872,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203888,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203896,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203900,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203902,32,FLEN)
NAN_BOXED(2114555228,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2206203903,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255808,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255809,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255811,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255815,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255823,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255839,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255871,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315255935,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315256063,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315256319,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315256831,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315257855,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315259903,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315263999,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315272191,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315288575,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315321343,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315386879,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315517951,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2315780095,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2316304383,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2317352959,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2319450111,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2319450112,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2321547264,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2322595840,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323120128,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323382272,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323513344,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323578880,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323611648,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323628032,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323636224,32,FLEN)
NAN_BOXED(2114588850,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2323640320,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
