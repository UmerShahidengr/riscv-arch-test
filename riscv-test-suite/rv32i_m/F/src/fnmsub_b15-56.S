
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_7040:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0fc236 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0fc236; op2val:0x80000000;
op3val:0x8c7ffff8; valaddr_reg:x3; val_offset:21120*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21120*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7041:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0fc236 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0fc236; op2val:0x80000000;
op3val:0x8c7ffffc; valaddr_reg:x3; val_offset:21123*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21123*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7042:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0fc236 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0fc236; op2val:0x80000000;
op3val:0x8c7ffffe; valaddr_reg:x3; val_offset:21126*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21126*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7043:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0fc236 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0fc236; op2val:0x80000000;
op3val:0x8c7fffff; valaddr_reg:x3; val_offset:21129*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21129*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7044:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x3f800001; valaddr_reg:x3; val_offset:21132*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21132*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7045:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x3f800003; valaddr_reg:x3; val_offset:21135*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21135*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7046:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x3f800007; valaddr_reg:x3; val_offset:21138*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21138*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7047:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x3f999999; valaddr_reg:x3; val_offset:21141*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21141*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7048:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:21144*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21144*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7049:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:21147*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21147*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7050:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:21150*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21150*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7051:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:21153*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21153*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7052:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:21156*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21156*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7053:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:21159*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21159*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7054:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:21162*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21162*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7055:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:21165*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21165*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7056:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:21168*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21168*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7057:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:21171*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21171*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7058:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:21174*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21174*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7059:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:21177*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21177*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7060:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x44000000; valaddr_reg:x3; val_offset:21180*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21180*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7061:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x44000001; valaddr_reg:x3; val_offset:21183*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21183*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7062:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x44000003; valaddr_reg:x3; val_offset:21186*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21186*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7063:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x44000007; valaddr_reg:x3; val_offset:21189*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21189*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7064:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x4400000f; valaddr_reg:x3; val_offset:21192*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21192*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7065:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x4400001f; valaddr_reg:x3; val_offset:21195*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21195*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7066:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x4400003f; valaddr_reg:x3; val_offset:21198*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21198*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7067:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x4400007f; valaddr_reg:x3; val_offset:21201*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21201*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7068:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x440000ff; valaddr_reg:x3; val_offset:21204*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21204*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7069:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x440001ff; valaddr_reg:x3; val_offset:21207*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21207*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7070:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x440003ff; valaddr_reg:x3; val_offset:21210*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21210*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7071:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x440007ff; valaddr_reg:x3; val_offset:21213*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21213*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7072:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x44000fff; valaddr_reg:x3; val_offset:21216*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21216*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7073:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x44001fff; valaddr_reg:x3; val_offset:21219*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21219*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7074:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x44003fff; valaddr_reg:x3; val_offset:21222*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21222*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7075:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x44007fff; valaddr_reg:x3; val_offset:21225*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21225*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7076:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x4400ffff; valaddr_reg:x3; val_offset:21228*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21228*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7077:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x4401ffff; valaddr_reg:x3; val_offset:21231*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21231*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7078:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x4403ffff; valaddr_reg:x3; val_offset:21234*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21234*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7079:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x4407ffff; valaddr_reg:x3; val_offset:21237*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21237*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7080:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x440fffff; valaddr_reg:x3; val_offset:21240*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21240*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7081:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x441fffff; valaddr_reg:x3; val_offset:21243*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21243*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7082:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x443fffff; valaddr_reg:x3; val_offset:21246*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21246*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7083:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x44400000; valaddr_reg:x3; val_offset:21249*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21249*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7084:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x44600000; valaddr_reg:x3; val_offset:21252*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21252*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7085:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x44700000; valaddr_reg:x3; val_offset:21255*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21255*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7086:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x44780000; valaddr_reg:x3; val_offset:21258*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21258*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7087:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x447c0000; valaddr_reg:x3; val_offset:21261*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21261*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7088:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x447e0000; valaddr_reg:x3; val_offset:21264*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21264*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7089:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x447f0000; valaddr_reg:x3; val_offset:21267*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21267*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7090:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x447f8000; valaddr_reg:x3; val_offset:21270*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21270*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7091:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x447fc000; valaddr_reg:x3; val_offset:21273*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21273*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7092:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x447fe000; valaddr_reg:x3; val_offset:21276*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21276*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7093:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x447ff000; valaddr_reg:x3; val_offset:21279*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21279*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7094:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x447ff800; valaddr_reg:x3; val_offset:21282*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21282*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7095:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x447ffc00; valaddr_reg:x3; val_offset:21285*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21285*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7096:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x447ffe00; valaddr_reg:x3; val_offset:21288*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21288*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7097:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x447fff00; valaddr_reg:x3; val_offset:21291*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21291*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7098:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x447fff80; valaddr_reg:x3; val_offset:21294*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21294*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7099:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x447fffc0; valaddr_reg:x3; val_offset:21297*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21297*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7100:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x447fffe0; valaddr_reg:x3; val_offset:21300*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21300*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7101:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x447ffff0; valaddr_reg:x3; val_offset:21303*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21303*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7102:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x447ffff8; valaddr_reg:x3; val_offset:21306*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21306*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7103:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x447ffffc; valaddr_reg:x3; val_offset:21309*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21309*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7104:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x447ffffe; valaddr_reg:x3; val_offset:21312*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21312*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7105:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0feb39 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x63af11 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0feb39; op2val:0xe3af11;
op3val:0x447fffff; valaddr_reg:x3; val_offset:21315*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21315*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7106:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:21318*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21318*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7107:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:21321*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21321*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7108:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:21324*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21324*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7109:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:21327*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21327*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7110:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:21330*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21330*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7111:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:21333*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21333*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7112:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:21336*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21336*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7113:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:21339*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21339*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7114:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:21342*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21342*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7115:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:21345*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21345*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7116:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:21348*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21348*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7117:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:21351*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21351*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7118:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:21354*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21354*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7119:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:21357*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21357*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7120:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:21360*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21360*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7121:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:21363*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21363*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7122:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b000000; valaddr_reg:x3; val_offset:21366*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21366*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7123:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b000001; valaddr_reg:x3; val_offset:21369*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21369*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7124:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b000003; valaddr_reg:x3; val_offset:21372*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21372*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7125:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b000007; valaddr_reg:x3; val_offset:21375*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21375*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7126:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b00000f; valaddr_reg:x3; val_offset:21378*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21378*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7127:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b00001f; valaddr_reg:x3; val_offset:21381*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21381*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7128:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b00003f; valaddr_reg:x3; val_offset:21384*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21384*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7129:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b00007f; valaddr_reg:x3; val_offset:21387*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21387*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7130:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b0000ff; valaddr_reg:x3; val_offset:21390*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21390*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7131:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b0001ff; valaddr_reg:x3; val_offset:21393*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21393*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7132:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b0003ff; valaddr_reg:x3; val_offset:21396*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21396*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7133:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b0007ff; valaddr_reg:x3; val_offset:21399*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21399*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7134:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b000fff; valaddr_reg:x3; val_offset:21402*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21402*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7135:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b001fff; valaddr_reg:x3; val_offset:21405*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21405*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7136:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b003fff; valaddr_reg:x3; val_offset:21408*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21408*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7137:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b007fff; valaddr_reg:x3; val_offset:21411*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21411*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7138:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b00ffff; valaddr_reg:x3; val_offset:21414*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21414*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7139:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b01ffff; valaddr_reg:x3; val_offset:21417*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21417*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7140:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b03ffff; valaddr_reg:x3; val_offset:21420*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21420*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7141:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b07ffff; valaddr_reg:x3; val_offset:21423*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21423*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7142:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b0fffff; valaddr_reg:x3; val_offset:21426*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21426*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7143:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b1fffff; valaddr_reg:x3; val_offset:21429*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21429*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7144:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b3fffff; valaddr_reg:x3; val_offset:21432*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21432*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7145:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b400000; valaddr_reg:x3; val_offset:21435*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21435*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7146:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b600000; valaddr_reg:x3; val_offset:21438*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21438*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7147:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b700000; valaddr_reg:x3; val_offset:21441*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21441*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7148:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b780000; valaddr_reg:x3; val_offset:21444*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21444*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7149:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b7c0000; valaddr_reg:x3; val_offset:21447*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21447*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7150:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b7e0000; valaddr_reg:x3; val_offset:21450*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21450*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7151:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b7f0000; valaddr_reg:x3; val_offset:21453*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21453*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7152:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b7f8000; valaddr_reg:x3; val_offset:21456*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21456*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7153:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b7fc000; valaddr_reg:x3; val_offset:21459*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21459*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7154:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b7fe000; valaddr_reg:x3; val_offset:21462*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21462*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7155:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b7ff000; valaddr_reg:x3; val_offset:21465*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21465*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7156:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b7ff800; valaddr_reg:x3; val_offset:21468*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21468*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7157:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b7ffc00; valaddr_reg:x3; val_offset:21471*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21471*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7158:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b7ffe00; valaddr_reg:x3; val_offset:21474*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21474*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7159:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b7fff00; valaddr_reg:x3; val_offset:21477*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21477*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7160:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b7fff80; valaddr_reg:x3; val_offset:21480*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21480*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7161:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b7fffc0; valaddr_reg:x3; val_offset:21483*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21483*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7162:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b7fffe0; valaddr_reg:x3; val_offset:21486*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21486*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7163:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b7ffff0; valaddr_reg:x3; val_offset:21489*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21489*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7164:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b7ffff8; valaddr_reg:x3; val_offset:21492*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21492*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7165:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b7ffffc; valaddr_reg:x3; val_offset:21495*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21495*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7166:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b7ffffe; valaddr_reg:x3; val_offset:21498*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21498*0 + 3*55*FLEN/8, x4, x1, x2)

inst_7167:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x11a16e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e11a16e; op2val:0x80000000;
op3val:0x8b7fffff; valaddr_reg:x3; val_offset:21501*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21501*0 + 3*55*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2114961974,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198840,32,FLEN)
NAN_BOXED(2114961974,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198844,32,FLEN)
NAN_BOXED(2114961974,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198846,32,FLEN)
NAN_BOXED(2114961974,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2357198847,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1140850688,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1140850689,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1140850691,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1140850695,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1140850703,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1140850719,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1140850751,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1140850815,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1140850943,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1140851199,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1140851711,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1140852735,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1140854783,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1140858879,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1140867071,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1140883455,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1140916223,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1140981759,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1141112831,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1141374975,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1141899263,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1142947839,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1145044991,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1145044992,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1147142144,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1148190720,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1148715008,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1148977152,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1149108224,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1149173760,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1149206528,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1149222912,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1149231104,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1149235200,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1149237248,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1149238272,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1149238784,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1149239040,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1149239168,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1149239232,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1149239264,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1149239280,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1149239288,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1149239292,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1149239294,32,FLEN)
NAN_BOXED(2114972473,32,FLEN)
NAN_BOXED(14921489,32,FLEN)
NAN_BOXED(1149239295,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033024,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033025,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033027,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033031,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033039,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033055,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033087,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033151,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033279,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332033535,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332034047,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332035071,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332037119,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332041215,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332049407,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332065791,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332098559,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332164095,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332295167,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2332557311,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2333081599,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2334130175,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2336227327,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2336227328,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2338324480,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2339373056,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2339897344,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340159488,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340290560,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340356096,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340388864,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340405248,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340413440,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340417536,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340419584,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340420608,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421120,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421376,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421504,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421568,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421600,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421616,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421624,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421628,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421630,32,FLEN)
NAN_BOXED(2115084654,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2340421631,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
