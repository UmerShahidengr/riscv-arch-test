
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_7168:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71800000; valaddr_reg:x3; val_offset:21504*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21504*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7169:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71800001; valaddr_reg:x3; val_offset:21507*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21507*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7170:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71800003; valaddr_reg:x3; val_offset:21510*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21510*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7171:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71800007; valaddr_reg:x3; val_offset:21513*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21513*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7172:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x7180000f; valaddr_reg:x3; val_offset:21516*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21516*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7173:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x7180001f; valaddr_reg:x3; val_offset:21519*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21519*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7174:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x7180003f; valaddr_reg:x3; val_offset:21522*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21522*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7175:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x7180007f; valaddr_reg:x3; val_offset:21525*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21525*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7176:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x718000ff; valaddr_reg:x3; val_offset:21528*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21528*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7177:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x718001ff; valaddr_reg:x3; val_offset:21531*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21531*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7178:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x718003ff; valaddr_reg:x3; val_offset:21534*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21534*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7179:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x718007ff; valaddr_reg:x3; val_offset:21537*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21537*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7180:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71800fff; valaddr_reg:x3; val_offset:21540*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21540*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7181:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71801fff; valaddr_reg:x3; val_offset:21543*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21543*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7182:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71803fff; valaddr_reg:x3; val_offset:21546*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21546*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7183:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71807fff; valaddr_reg:x3; val_offset:21549*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21549*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7184:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x7180ffff; valaddr_reg:x3; val_offset:21552*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21552*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7185:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x7181ffff; valaddr_reg:x3; val_offset:21555*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21555*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7186:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x7183ffff; valaddr_reg:x3; val_offset:21558*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21558*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7187:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x7187ffff; valaddr_reg:x3; val_offset:21561*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21561*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7188:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x718fffff; valaddr_reg:x3; val_offset:21564*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21564*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7189:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x719fffff; valaddr_reg:x3; val_offset:21567*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21567*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7190:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71bfffff; valaddr_reg:x3; val_offset:21570*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21570*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7191:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71c00000; valaddr_reg:x3; val_offset:21573*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21573*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7192:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71e00000; valaddr_reg:x3; val_offset:21576*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21576*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7193:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71f00000; valaddr_reg:x3; val_offset:21579*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21579*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7194:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71f80000; valaddr_reg:x3; val_offset:21582*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21582*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7195:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71fc0000; valaddr_reg:x3; val_offset:21585*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21585*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7196:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71fe0000; valaddr_reg:x3; val_offset:21588*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21588*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7197:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71ff0000; valaddr_reg:x3; val_offset:21591*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21591*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7198:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71ff8000; valaddr_reg:x3; val_offset:21594*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21594*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7199:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71ffc000; valaddr_reg:x3; val_offset:21597*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21597*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7200:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71ffe000; valaddr_reg:x3; val_offset:21600*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21600*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7201:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71fff000; valaddr_reg:x3; val_offset:21603*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21603*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7202:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71fff800; valaddr_reg:x3; val_offset:21606*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21606*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7203:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71fffc00; valaddr_reg:x3; val_offset:21609*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21609*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7204:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71fffe00; valaddr_reg:x3; val_offset:21612*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21612*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7205:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71ffff00; valaddr_reg:x3; val_offset:21615*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21615*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7206:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71ffff80; valaddr_reg:x3; val_offset:21618*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21618*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7207:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71ffffc0; valaddr_reg:x3; val_offset:21621*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21621*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7208:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71ffffe0; valaddr_reg:x3; val_offset:21624*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21624*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7209:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71fffff0; valaddr_reg:x3; val_offset:21627*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21627*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7210:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71fffff8; valaddr_reg:x3; val_offset:21630*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21630*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7211:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71fffffc; valaddr_reg:x3; val_offset:21633*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21633*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7212:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71fffffe; valaddr_reg:x3; val_offset:21636*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21636*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7213:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xe3 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x71ffffff; valaddr_reg:x3; val_offset:21639*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21639*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7214:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x7f000001; valaddr_reg:x3; val_offset:21642*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21642*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7215:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x7f000003; valaddr_reg:x3; val_offset:21645*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21645*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7216:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x7f000007; valaddr_reg:x3; val_offset:21648*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21648*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7217:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x7f199999; valaddr_reg:x3; val_offset:21651*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21651*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7218:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x7f249249; valaddr_reg:x3; val_offset:21654*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21654*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7219:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x7f333333; valaddr_reg:x3; val_offset:21657*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21657*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7220:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:21660*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21660*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7221:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:21663*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21663*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7222:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x7f444444; valaddr_reg:x3; val_offset:21666*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21666*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7223:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:21669*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21669*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7224:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:21672*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21672*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7225:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x7f666666; valaddr_reg:x3; val_offset:21675*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21675*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7226:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:21678*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21678*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7227:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:21681*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21681*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7228:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:21684*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21684*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7229:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x124aee and fs2 == 0 and fe2 == 0x81 and fm2 == 0x5ffd41 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e124aee; op2val:0x40dffd41;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:21687*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21687*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7230:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x3f800001; valaddr_reg:x3; val_offset:21690*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21690*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7231:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x3f800003; valaddr_reg:x3; val_offset:21693*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21693*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7232:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x3f800007; valaddr_reg:x3; val_offset:21696*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21696*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7233:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x3f999999; valaddr_reg:x3; val_offset:21699*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21699*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7234:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:21702*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21702*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7235:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:21705*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21705*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7236:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:21708*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21708*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7237:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:21711*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21711*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7238:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:21714*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21714*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7239:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:21717*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21717*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7240:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:21720*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21720*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7241:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:21723*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21723*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7242:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:21726*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21726*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7243:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:21729*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21729*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7244:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:21732*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21732*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7245:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:21735*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21735*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7246:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4c800000; valaddr_reg:x3; val_offset:21738*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21738*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7247:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4c800001; valaddr_reg:x3; val_offset:21741*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21741*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7248:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4c800003; valaddr_reg:x3; val_offset:21744*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21744*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7249:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4c800007; valaddr_reg:x3; val_offset:21747*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21747*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7250:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4c80000f; valaddr_reg:x3; val_offset:21750*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21750*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7251:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4c80001f; valaddr_reg:x3; val_offset:21753*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21753*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7252:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4c80003f; valaddr_reg:x3; val_offset:21756*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21756*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7253:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4c80007f; valaddr_reg:x3; val_offset:21759*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21759*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7254:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4c8000ff; valaddr_reg:x3; val_offset:21762*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21762*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7255:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4c8001ff; valaddr_reg:x3; val_offset:21765*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21765*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7256:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4c8003ff; valaddr_reg:x3; val_offset:21768*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21768*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7257:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4c8007ff; valaddr_reg:x3; val_offset:21771*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21771*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7258:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4c800fff; valaddr_reg:x3; val_offset:21774*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21774*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7259:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4c801fff; valaddr_reg:x3; val_offset:21777*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21777*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7260:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4c803fff; valaddr_reg:x3; val_offset:21780*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21780*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7261:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4c807fff; valaddr_reg:x3; val_offset:21783*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21783*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7262:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4c80ffff; valaddr_reg:x3; val_offset:21786*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21786*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7263:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4c81ffff; valaddr_reg:x3; val_offset:21789*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21789*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7264:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4c83ffff; valaddr_reg:x3; val_offset:21792*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21792*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7265:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4c87ffff; valaddr_reg:x3; val_offset:21795*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21795*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7266:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4c8fffff; valaddr_reg:x3; val_offset:21798*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21798*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7267:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4c9fffff; valaddr_reg:x3; val_offset:21801*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21801*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7268:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4cbfffff; valaddr_reg:x3; val_offset:21804*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21804*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7269:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4cc00000; valaddr_reg:x3; val_offset:21807*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21807*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7270:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4ce00000; valaddr_reg:x3; val_offset:21810*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21810*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7271:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4cf00000; valaddr_reg:x3; val_offset:21813*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21813*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7272:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4cf80000; valaddr_reg:x3; val_offset:21816*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21816*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7273:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4cfc0000; valaddr_reg:x3; val_offset:21819*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21819*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7274:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4cfe0000; valaddr_reg:x3; val_offset:21822*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21822*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7275:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4cff0000; valaddr_reg:x3; val_offset:21825*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21825*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7276:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4cff8000; valaddr_reg:x3; val_offset:21828*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21828*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7277:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4cffc000; valaddr_reg:x3; val_offset:21831*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21831*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7278:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4cffe000; valaddr_reg:x3; val_offset:21834*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21834*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7279:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4cfff000; valaddr_reg:x3; val_offset:21837*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21837*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7280:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4cfff800; valaddr_reg:x3; val_offset:21840*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21840*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7281:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4cfffc00; valaddr_reg:x3; val_offset:21843*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21843*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7282:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4cfffe00; valaddr_reg:x3; val_offset:21846*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21846*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7283:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4cffff00; valaddr_reg:x3; val_offset:21849*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21849*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7284:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4cffff80; valaddr_reg:x3; val_offset:21852*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21852*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7285:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4cffffc0; valaddr_reg:x3; val_offset:21855*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21855*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7286:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4cffffe0; valaddr_reg:x3; val_offset:21858*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21858*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7287:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4cfffff0; valaddr_reg:x3; val_offset:21861*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21861*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7288:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4cfffff8; valaddr_reg:x3; val_offset:21864*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21864*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7289:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4cfffffc; valaddr_reg:x3; val_offset:21867*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21867*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7290:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4cfffffe; valaddr_reg:x3; val_offset:21870*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21870*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7291:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12898d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x5f9d8a and fs3 == 0 and fe3 == 0x99 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12898d; op2val:0xdf9d8a;
op3val:0x4cffffff; valaddr_reg:x3; val_offset:21873*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21873*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7292:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xbf800001; valaddr_reg:x3; val_offset:21876*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21876*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7293:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xbf800003; valaddr_reg:x3; val_offset:21879*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21879*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7294:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xbf800007; valaddr_reg:x3; val_offset:21882*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21882*0 + 3*56*FLEN/8, x4, x1, x2)

inst_7295:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xbf999999; valaddr_reg:x3; val_offset:21885*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21885*0 + 3*56*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1904214016,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1904214017,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1904214019,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1904214023,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1904214031,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1904214047,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1904214079,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1904214143,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1904214271,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1904214527,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1904215039,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1904216063,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1904218111,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1904222207,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1904230399,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1904246783,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1904279551,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1904345087,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1904476159,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1904738303,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1905262591,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1906311167,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1908408319,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1908408320,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1910505472,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1911554048,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1912078336,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1912340480,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1912471552,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1912537088,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1912569856,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1912586240,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1912594432,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1912598528,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1912600576,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1912601600,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1912602112,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1912602368,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1912602496,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1912602560,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1912602592,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1912602608,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1912602616,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1912602620,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1912602622,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(1912602623,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2115128046,32,FLEN)
NAN_BOXED(1088421185,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1283457024,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1283457025,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1283457027,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1283457031,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1283457039,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1283457055,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1283457087,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1283457151,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1283457279,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1283457535,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1283458047,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1283459071,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1283461119,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1283465215,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1283473407,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1283489791,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1283522559,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1283588095,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1283719167,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1283981311,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1284505599,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1285554175,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1287651327,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1287651328,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1289748480,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1290797056,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1291321344,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1291583488,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1291714560,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1291780096,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1291812864,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1291829248,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1291837440,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1291841536,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1291843584,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1291844608,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1291845120,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1291845376,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1291845504,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1291845568,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1291845600,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1291845616,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1291845624,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1291845628,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1291845630,32,FLEN)
NAN_BOXED(2115144077,32,FLEN)
NAN_BOXED(14654858,32,FLEN)
NAN_BOXED(1291845631,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
