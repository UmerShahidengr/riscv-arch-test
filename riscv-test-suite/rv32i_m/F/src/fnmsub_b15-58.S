
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_7296:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:21888*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21888*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7297:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:21891*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21891*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7298:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:21894*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21894*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7299:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:21897*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21897*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7300:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:21900*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21900*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7301:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:21903*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21903*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7302:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:21906*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21906*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7303:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:21909*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21909*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7304:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:21912*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21912*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7305:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:21915*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21915*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7306:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:21918*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21918*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7307:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:21921*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21921*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7308:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8800000; valaddr_reg:x3; val_offset:21924*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21924*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7309:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8800001; valaddr_reg:x3; val_offset:21927*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21927*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7310:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8800003; valaddr_reg:x3; val_offset:21930*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21930*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7311:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8800007; valaddr_reg:x3; val_offset:21933*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21933*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7312:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc880000f; valaddr_reg:x3; val_offset:21936*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21936*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7313:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc880001f; valaddr_reg:x3; val_offset:21939*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21939*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7314:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc880003f; valaddr_reg:x3; val_offset:21942*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21942*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7315:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc880007f; valaddr_reg:x3; val_offset:21945*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21945*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7316:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc88000ff; valaddr_reg:x3; val_offset:21948*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21948*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7317:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc88001ff; valaddr_reg:x3; val_offset:21951*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21951*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7318:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc88003ff; valaddr_reg:x3; val_offset:21954*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21954*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7319:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc88007ff; valaddr_reg:x3; val_offset:21957*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21957*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7320:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8800fff; valaddr_reg:x3; val_offset:21960*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21960*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7321:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8801fff; valaddr_reg:x3; val_offset:21963*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21963*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7322:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8803fff; valaddr_reg:x3; val_offset:21966*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21966*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7323:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8807fff; valaddr_reg:x3; val_offset:21969*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21969*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7324:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc880ffff; valaddr_reg:x3; val_offset:21972*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21972*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7325:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc881ffff; valaddr_reg:x3; val_offset:21975*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21975*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7326:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc883ffff; valaddr_reg:x3; val_offset:21978*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21978*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7327:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc887ffff; valaddr_reg:x3; val_offset:21981*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21981*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7328:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc88fffff; valaddr_reg:x3; val_offset:21984*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21984*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7329:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc89fffff; valaddr_reg:x3; val_offset:21987*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21987*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7330:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8bfffff; valaddr_reg:x3; val_offset:21990*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21990*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7331:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8c00000; valaddr_reg:x3; val_offset:21993*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21993*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7332:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8e00000; valaddr_reg:x3; val_offset:21996*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21996*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7333:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8f00000; valaddr_reg:x3; val_offset:21999*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 21999*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7334:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8f80000; valaddr_reg:x3; val_offset:22002*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22002*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7335:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8fc0000; valaddr_reg:x3; val_offset:22005*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22005*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7336:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8fe0000; valaddr_reg:x3; val_offset:22008*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22008*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7337:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8ff0000; valaddr_reg:x3; val_offset:22011*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22011*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7338:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8ff8000; valaddr_reg:x3; val_offset:22014*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22014*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7339:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8ffc000; valaddr_reg:x3; val_offset:22017*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22017*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7340:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8ffe000; valaddr_reg:x3; val_offset:22020*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22020*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7341:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8fff000; valaddr_reg:x3; val_offset:22023*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22023*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7342:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8fff800; valaddr_reg:x3; val_offset:22026*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22026*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7343:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8fffc00; valaddr_reg:x3; val_offset:22029*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22029*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7344:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8fffe00; valaddr_reg:x3; val_offset:22032*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22032*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7345:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8ffff00; valaddr_reg:x3; val_offset:22035*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22035*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7346:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8ffff80; valaddr_reg:x3; val_offset:22038*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22038*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7347:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8ffffc0; valaddr_reg:x3; val_offset:22041*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22041*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7348:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8ffffe0; valaddr_reg:x3; val_offset:22044*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22044*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7349:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8fffff0; valaddr_reg:x3; val_offset:22047*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22047*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7350:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8fffff8; valaddr_reg:x3; val_offset:22050*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22050*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7351:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8fffffc; valaddr_reg:x3; val_offset:22053*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22053*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7352:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8fffffe; valaddr_reg:x3; val_offset:22056*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22056*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7353:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x12c03f and fs2 == 1 and fe2 == 0x01 and fm2 == 0x5f4a32 and fs3 == 1 and fe3 == 0x91 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e12c03f; op2val:0x80df4a32;
op3val:0xc8ffffff; valaddr_reg:x3; val_offset:22059*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22059*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7354:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:22062*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22062*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7355:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:22065*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22065*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7356:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:22068*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22068*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7357:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:22071*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22071*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7358:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:22074*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22074*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7359:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:22077*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22077*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7360:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:22080*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22080*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7361:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:22083*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22083*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7362:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:22086*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22086*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7363:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:22089*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22089*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7364:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:22092*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22092*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7365:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:22095*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22095*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7366:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:22098*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22098*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7367:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:22101*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22101*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7368:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:22104*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22104*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7369:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:22107*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22107*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7370:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3800000; valaddr_reg:x3; val_offset:22110*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22110*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7371:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3800001; valaddr_reg:x3; val_offset:22113*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22113*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7372:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3800003; valaddr_reg:x3; val_offset:22116*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22116*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7373:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3800007; valaddr_reg:x3; val_offset:22119*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22119*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7374:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x380000f; valaddr_reg:x3; val_offset:22122*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22122*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7375:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x380001f; valaddr_reg:x3; val_offset:22125*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22125*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7376:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x380003f; valaddr_reg:x3; val_offset:22128*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22128*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7377:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x380007f; valaddr_reg:x3; val_offset:22131*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22131*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7378:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x38000ff; valaddr_reg:x3; val_offset:22134*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22134*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7379:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x38001ff; valaddr_reg:x3; val_offset:22137*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22137*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7380:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x38003ff; valaddr_reg:x3; val_offset:22140*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22140*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7381:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x38007ff; valaddr_reg:x3; val_offset:22143*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22143*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7382:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3800fff; valaddr_reg:x3; val_offset:22146*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22146*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7383:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3801fff; valaddr_reg:x3; val_offset:22149*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22149*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7384:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3803fff; valaddr_reg:x3; val_offset:22152*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22152*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7385:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3807fff; valaddr_reg:x3; val_offset:22155*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22155*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7386:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x380ffff; valaddr_reg:x3; val_offset:22158*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22158*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7387:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x381ffff; valaddr_reg:x3; val_offset:22161*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22161*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7388:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x383ffff; valaddr_reg:x3; val_offset:22164*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22164*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7389:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x387ffff; valaddr_reg:x3; val_offset:22167*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22167*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7390:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x38fffff; valaddr_reg:x3; val_offset:22170*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22170*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7391:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x39fffff; valaddr_reg:x3; val_offset:22173*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22173*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7392:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3bfffff; valaddr_reg:x3; val_offset:22176*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22176*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7393:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3c00000; valaddr_reg:x3; val_offset:22179*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22179*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7394:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3e00000; valaddr_reg:x3; val_offset:22182*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22182*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7395:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3f00000; valaddr_reg:x3; val_offset:22185*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22185*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7396:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3f80000; valaddr_reg:x3; val_offset:22188*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22188*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7397:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3fc0000; valaddr_reg:x3; val_offset:22191*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22191*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7398:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3fe0000; valaddr_reg:x3; val_offset:22194*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22194*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7399:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3ff0000; valaddr_reg:x3; val_offset:22197*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22197*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7400:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3ff8000; valaddr_reg:x3; val_offset:22200*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22200*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7401:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3ffc000; valaddr_reg:x3; val_offset:22203*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22203*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7402:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3ffe000; valaddr_reg:x3; val_offset:22206*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22206*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7403:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3fff000; valaddr_reg:x3; val_offset:22209*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22209*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7404:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3fff800; valaddr_reg:x3; val_offset:22212*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22212*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7405:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3fffc00; valaddr_reg:x3; val_offset:22215*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22215*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7406:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3fffe00; valaddr_reg:x3; val_offset:22218*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22218*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7407:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3ffff00; valaddr_reg:x3; val_offset:22221*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22221*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7408:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3ffff80; valaddr_reg:x3; val_offset:22224*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22224*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7409:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3ffffc0; valaddr_reg:x3; val_offset:22227*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22227*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7410:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3ffffe0; valaddr_reg:x3; val_offset:22230*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22230*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7411:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3fffff0; valaddr_reg:x3; val_offset:22233*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22233*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7412:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3fffff8; valaddr_reg:x3; val_offset:22236*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22236*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7413:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3fffffc; valaddr_reg:x3; val_offset:22239*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22239*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7414:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3fffffe; valaddr_reg:x3; val_offset:22242*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22242*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7415:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x13426c and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x07 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e13426c; op2val:0x0;
op3val:0x3ffffff; valaddr_reg:x3; val_offset:22245*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22245*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7416:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x15fd73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5a77c3 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e15fd73; op2val:0xc0da77c3;
op3val:0xf1800000; valaddr_reg:x3; val_offset:22248*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22248*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7417:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x15fd73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5a77c3 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e15fd73; op2val:0xc0da77c3;
op3val:0xf1800001; valaddr_reg:x3; val_offset:22251*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22251*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7418:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x15fd73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5a77c3 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e15fd73; op2val:0xc0da77c3;
op3val:0xf1800003; valaddr_reg:x3; val_offset:22254*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22254*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7419:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x15fd73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5a77c3 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e15fd73; op2val:0xc0da77c3;
op3val:0xf1800007; valaddr_reg:x3; val_offset:22257*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22257*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7420:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x15fd73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5a77c3 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e15fd73; op2val:0xc0da77c3;
op3val:0xf180000f; valaddr_reg:x3; val_offset:22260*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22260*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7421:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x15fd73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5a77c3 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e15fd73; op2val:0xc0da77c3;
op3val:0xf180001f; valaddr_reg:x3; val_offset:22263*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22263*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7422:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x15fd73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5a77c3 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e15fd73; op2val:0xc0da77c3;
op3val:0xf180003f; valaddr_reg:x3; val_offset:22266*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22266*0 + 3*57*FLEN/8, x4, x1, x2)

inst_7423:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x15fd73 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5a77c3 and fs3 == 1 and fe3 == 0xe3 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e15fd73; op2val:0xc0da77c3;
op3val:0xf180007f; valaddr_reg:x3; val_offset:22269*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 22269*0 + 3*57*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3363831808,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3363831809,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3363831811,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3363831815,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3363831823,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3363831839,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3363831871,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3363831935,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3363832063,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3363832319,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3363832831,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3363833855,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3363835903,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3363839999,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3363848191,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3363864575,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3363897343,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3363962879,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3364093951,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3364356095,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3364880383,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3365928959,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3368026111,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3368026112,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3370123264,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3371171840,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3371696128,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3371958272,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3372089344,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3372154880,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3372187648,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3372204032,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3372212224,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3372216320,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3372218368,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3372219392,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3372219904,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3372220160,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3372220288,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3372220352,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3372220384,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3372220400,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3372220408,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3372220412,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3372220414,32,FLEN)
NAN_BOXED(2115158079,32,FLEN)
NAN_BOXED(2162117170,32,FLEN)
NAN_BOXED(3372220415,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720256,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720257,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720259,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720263,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720271,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720287,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720319,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720383,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720511,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720767,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58721279,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58722303,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58724351,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58728447,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58736639,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58753023,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58785791,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58851327,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58982399,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(59244543,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(59768831,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(60817407,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(62914559,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(62914560,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(65011712,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(66060288,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(66584576,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(66846720,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(66977792,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67043328,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67076096,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67092480,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67100672,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67104768,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67106816,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67107840,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108352,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108608,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108736,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108800,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108832,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108848,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108856,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108860,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108862,32,FLEN)
NAN_BOXED(2115191404,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(67108863,32,FLEN)
NAN_BOXED(2115370355,32,FLEN)
NAN_BOXED(3235542979,32,FLEN)
NAN_BOXED(4051697664,32,FLEN)
NAN_BOXED(2115370355,32,FLEN)
NAN_BOXED(3235542979,32,FLEN)
NAN_BOXED(4051697665,32,FLEN)
NAN_BOXED(2115370355,32,FLEN)
NAN_BOXED(3235542979,32,FLEN)
NAN_BOXED(4051697667,32,FLEN)
NAN_BOXED(2115370355,32,FLEN)
NAN_BOXED(3235542979,32,FLEN)
NAN_BOXED(4051697671,32,FLEN)
NAN_BOXED(2115370355,32,FLEN)
NAN_BOXED(3235542979,32,FLEN)
NAN_BOXED(4051697679,32,FLEN)
NAN_BOXED(2115370355,32,FLEN)
NAN_BOXED(3235542979,32,FLEN)
NAN_BOXED(4051697695,32,FLEN)
NAN_BOXED(2115370355,32,FLEN)
NAN_BOXED(3235542979,32,FLEN)
NAN_BOXED(4051697727,32,FLEN)
NAN_BOXED(2115370355,32,FLEN)
NAN_BOXED(3235542979,32,FLEN)
NAN_BOXED(4051697791,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
