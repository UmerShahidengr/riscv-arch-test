
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_7680:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe580ffff; valaddr_reg:x3; val_offset:23040*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23040*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7681:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe581ffff; valaddr_reg:x3; val_offset:23043*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23043*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7682:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe583ffff; valaddr_reg:x3; val_offset:23046*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23046*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7683:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe587ffff; valaddr_reg:x3; val_offset:23049*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23049*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7684:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe58fffff; valaddr_reg:x3; val_offset:23052*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23052*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7685:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe59fffff; valaddr_reg:x3; val_offset:23055*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23055*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7686:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe5bfffff; valaddr_reg:x3; val_offset:23058*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23058*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7687:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe5c00000; valaddr_reg:x3; val_offset:23061*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23061*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7688:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe5e00000; valaddr_reg:x3; val_offset:23064*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23064*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7689:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe5f00000; valaddr_reg:x3; val_offset:23067*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23067*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7690:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe5f80000; valaddr_reg:x3; val_offset:23070*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23070*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7691:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe5fc0000; valaddr_reg:x3; val_offset:23073*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23073*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7692:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe5fe0000; valaddr_reg:x3; val_offset:23076*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23076*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7693:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe5ff0000; valaddr_reg:x3; val_offset:23079*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23079*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7694:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe5ff8000; valaddr_reg:x3; val_offset:23082*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23082*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7695:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe5ffc000; valaddr_reg:x3; val_offset:23085*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23085*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7696:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe5ffe000; valaddr_reg:x3; val_offset:23088*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23088*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7697:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe5fff000; valaddr_reg:x3; val_offset:23091*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23091*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7698:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe5fff800; valaddr_reg:x3; val_offset:23094*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23094*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7699:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe5fffc00; valaddr_reg:x3; val_offset:23097*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23097*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7700:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe5fffe00; valaddr_reg:x3; val_offset:23100*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23100*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7701:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe5ffff00; valaddr_reg:x3; val_offset:23103*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23103*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7702:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe5ffff80; valaddr_reg:x3; val_offset:23106*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23106*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7703:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe5ffffc0; valaddr_reg:x3; val_offset:23109*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23109*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7704:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe5ffffe0; valaddr_reg:x3; val_offset:23112*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23112*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7705:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe5fffff0; valaddr_reg:x3; val_offset:23115*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23115*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7706:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe5fffff8; valaddr_reg:x3; val_offset:23118*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23118*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7707:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe5fffffc; valaddr_reg:x3; val_offset:23121*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23121*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7708:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe5fffffe; valaddr_reg:x3; val_offset:23124*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23124*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7709:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xcb and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xe5ffffff; valaddr_reg:x3; val_offset:23127*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23127*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7710:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xff000001; valaddr_reg:x3; val_offset:23130*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23130*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7711:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xff000003; valaddr_reg:x3; val_offset:23133*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23133*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7712:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xff000007; valaddr_reg:x3; val_offset:23136*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23136*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7713:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xff199999; valaddr_reg:x3; val_offset:23139*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23139*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7714:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xff249249; valaddr_reg:x3; val_offset:23142*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23142*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7715:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xff333333; valaddr_reg:x3; val_offset:23145*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23145*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7716:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:23148*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23148*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7717:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:23151*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23151*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7718:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xff444444; valaddr_reg:x3; val_offset:23154*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23154*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7719:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:23157*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23157*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7720:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:23160*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23160*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7721:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xff666666; valaddr_reg:x3; val_offset:23163*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23163*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7722:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:23166*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23166*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7723:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:23169*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23169*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7724:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:23172*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23172*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7725:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x19d51f and fs2 == 1 and fe2 == 0x81 and fm2 == 0x5502c8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e19d51f; op2val:0xc0d502c8;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:23175*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23175*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7726:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:23178*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23178*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7727:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:23181*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23181*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7728:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:23184*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23184*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7729:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:23187*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23187*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7730:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:23190*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23190*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7731:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:23193*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23193*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7732:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:23196*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23196*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7733:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:23199*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23199*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7734:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:23202*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23202*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7735:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:23205*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23205*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7736:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:23208*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23208*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7737:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:23211*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23211*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7738:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:23214*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23214*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7739:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:23217*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23217*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7740:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:23220*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23220*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7741:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:23223*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23223*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7742:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xf800000; valaddr_reg:x3; val_offset:23226*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23226*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7743:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xf800001; valaddr_reg:x3; val_offset:23229*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23229*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7744:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xf800003; valaddr_reg:x3; val_offset:23232*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23232*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7745:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xf800007; valaddr_reg:x3; val_offset:23235*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23235*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7746:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xf80000f; valaddr_reg:x3; val_offset:23238*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23238*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7747:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xf80001f; valaddr_reg:x3; val_offset:23241*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23241*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7748:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xf80003f; valaddr_reg:x3; val_offset:23244*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23244*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7749:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xf80007f; valaddr_reg:x3; val_offset:23247*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23247*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7750:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xf8000ff; valaddr_reg:x3; val_offset:23250*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23250*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7751:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xf8001ff; valaddr_reg:x3; val_offset:23253*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23253*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7752:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xf8003ff; valaddr_reg:x3; val_offset:23256*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23256*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7753:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xf8007ff; valaddr_reg:x3; val_offset:23259*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23259*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7754:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xf800fff; valaddr_reg:x3; val_offset:23262*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23262*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7755:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xf801fff; valaddr_reg:x3; val_offset:23265*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23265*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7756:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xf803fff; valaddr_reg:x3; val_offset:23268*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23268*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7757:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xf807fff; valaddr_reg:x3; val_offset:23271*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23271*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7758:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xf80ffff; valaddr_reg:x3; val_offset:23274*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23274*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7759:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xf81ffff; valaddr_reg:x3; val_offset:23277*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23277*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7760:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xf83ffff; valaddr_reg:x3; val_offset:23280*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23280*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7761:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xf87ffff; valaddr_reg:x3; val_offset:23283*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23283*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7762:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xf8fffff; valaddr_reg:x3; val_offset:23286*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23286*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7763:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xf9fffff; valaddr_reg:x3; val_offset:23289*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23289*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7764:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xfbfffff; valaddr_reg:x3; val_offset:23292*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23292*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7765:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xfc00000; valaddr_reg:x3; val_offset:23295*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23295*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7766:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xfe00000; valaddr_reg:x3; val_offset:23298*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23298*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7767:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xff00000; valaddr_reg:x3; val_offset:23301*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23301*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7768:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xff80000; valaddr_reg:x3; val_offset:23304*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23304*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7769:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xffc0000; valaddr_reg:x3; val_offset:23307*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23307*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7770:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xffe0000; valaddr_reg:x3; val_offset:23310*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23310*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7771:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xfff0000; valaddr_reg:x3; val_offset:23313*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23313*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7772:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xfff8000; valaddr_reg:x3; val_offset:23316*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23316*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7773:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xfffc000; valaddr_reg:x3; val_offset:23319*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23319*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7774:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xfffe000; valaddr_reg:x3; val_offset:23322*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23322*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7775:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xffff000; valaddr_reg:x3; val_offset:23325*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23325*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7776:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xffff800; valaddr_reg:x3; val_offset:23328*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23328*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7777:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xffffc00; valaddr_reg:x3; val_offset:23331*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23331*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7778:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xffffe00; valaddr_reg:x3; val_offset:23334*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23334*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7779:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xfffff00; valaddr_reg:x3; val_offset:23337*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23337*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7780:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xfffff80; valaddr_reg:x3; val_offset:23340*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23340*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7781:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xfffffc0; valaddr_reg:x3; val_offset:23343*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23343*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7782:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xfffffe0; valaddr_reg:x3; val_offset:23346*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23346*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7783:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xffffff0; valaddr_reg:x3; val_offset:23349*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23349*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7784:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xffffff8; valaddr_reg:x3; val_offset:23352*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23352*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7785:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xffffffc; valaddr_reg:x3; val_offset:23355*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23355*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7786:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xffffffe; valaddr_reg:x3; val_offset:23358*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23358*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7787:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1a1452 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1a1452; op2val:0x0;
op3val:0xfffffff; valaddr_reg:x3; val_offset:23361*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23361*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7788:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x208219 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x4c26cc and fs3 == 1 and fe3 == 0xdf and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e208219; op2val:0xc0cc26cc;
op3val:0xef800000; valaddr_reg:x3; val_offset:23364*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23364*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7789:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x208219 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x4c26cc and fs3 == 1 and fe3 == 0xdf and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e208219; op2val:0xc0cc26cc;
op3val:0xef800001; valaddr_reg:x3; val_offset:23367*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23367*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7790:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x208219 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x4c26cc and fs3 == 1 and fe3 == 0xdf and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e208219; op2val:0xc0cc26cc;
op3val:0xef800003; valaddr_reg:x3; val_offset:23370*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23370*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7791:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x208219 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x4c26cc and fs3 == 1 and fe3 == 0xdf and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e208219; op2val:0xc0cc26cc;
op3val:0xef800007; valaddr_reg:x3; val_offset:23373*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23373*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7792:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x208219 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x4c26cc and fs3 == 1 and fe3 == 0xdf and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e208219; op2val:0xc0cc26cc;
op3val:0xef80000f; valaddr_reg:x3; val_offset:23376*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23376*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7793:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x208219 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x4c26cc and fs3 == 1 and fe3 == 0xdf and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e208219; op2val:0xc0cc26cc;
op3val:0xef80001f; valaddr_reg:x3; val_offset:23379*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23379*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7794:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x208219 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x4c26cc and fs3 == 1 and fe3 == 0xdf and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e208219; op2val:0xc0cc26cc;
op3val:0xef80003f; valaddr_reg:x3; val_offset:23382*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23382*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7795:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x208219 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x4c26cc and fs3 == 1 and fe3 == 0xdf and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e208219; op2val:0xc0cc26cc;
op3val:0xef80007f; valaddr_reg:x3; val_offset:23385*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23385*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7796:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x208219 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x4c26cc and fs3 == 1 and fe3 == 0xdf and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e208219; op2val:0xc0cc26cc;
op3val:0xef8000ff; valaddr_reg:x3; val_offset:23388*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23388*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7797:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x208219 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x4c26cc and fs3 == 1 and fe3 == 0xdf and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e208219; op2val:0xc0cc26cc;
op3val:0xef8001ff; valaddr_reg:x3; val_offset:23391*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23391*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7798:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x208219 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x4c26cc and fs3 == 1 and fe3 == 0xdf and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e208219; op2val:0xc0cc26cc;
op3val:0xef8003ff; valaddr_reg:x3; val_offset:23394*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23394*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7799:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x208219 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x4c26cc and fs3 == 1 and fe3 == 0xdf and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e208219; op2val:0xc0cc26cc;
op3val:0xef8007ff; valaddr_reg:x3; val_offset:23397*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23397*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7800:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x208219 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x4c26cc and fs3 == 1 and fe3 == 0xdf and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e208219; op2val:0xc0cc26cc;
op3val:0xef800fff; valaddr_reg:x3; val_offset:23400*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23400*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7801:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x208219 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x4c26cc and fs3 == 1 and fe3 == 0xdf and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e208219; op2val:0xc0cc26cc;
op3val:0xef801fff; valaddr_reg:x3; val_offset:23403*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23403*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7802:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x208219 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x4c26cc and fs3 == 1 and fe3 == 0xdf and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e208219; op2val:0xc0cc26cc;
op3val:0xef803fff; valaddr_reg:x3; val_offset:23406*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23406*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7803:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x208219 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x4c26cc and fs3 == 1 and fe3 == 0xdf and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e208219; op2val:0xc0cc26cc;
op3val:0xef807fff; valaddr_reg:x3; val_offset:23409*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23409*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7804:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x208219 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x4c26cc and fs3 == 1 and fe3 == 0xdf and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e208219; op2val:0xc0cc26cc;
op3val:0xef80ffff; valaddr_reg:x3; val_offset:23412*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23412*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7805:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x208219 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x4c26cc and fs3 == 1 and fe3 == 0xdf and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e208219; op2val:0xc0cc26cc;
op3val:0xef81ffff; valaddr_reg:x3; val_offset:23415*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23415*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7806:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x208219 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x4c26cc and fs3 == 1 and fe3 == 0xdf and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e208219; op2val:0xc0cc26cc;
op3val:0xef83ffff; valaddr_reg:x3; val_offset:23418*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23418*0 + 3*60*FLEN/8, x4, x1, x2)

inst_7807:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x208219 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x4c26cc and fs3 == 1 and fe3 == 0xdf and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e208219; op2val:0xc0cc26cc;
op3val:0xef87ffff; valaddr_reg:x3; val_offset:23421*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 23421*0 + 3*60*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3850436607,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3850502143,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3850633215,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3850895359,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3851419647,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3852468223,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3854565375,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3854565376,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3856662528,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3857711104,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3858235392,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3858497536,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3858628608,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3858694144,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3858726912,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3858743296,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3858751488,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3858755584,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3858757632,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3858758656,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3858759168,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3858759424,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3858759552,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3858759616,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3858759648,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3858759664,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3858759672,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3858759676,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3858759678,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(3858759679,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(4278190081,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(4278190083,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(4278190087,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(4279867801,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(4280586825,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(4281545523,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(4281785197,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(4282104763,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(4282664004,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(4283223244,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(4284181942,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(4284900966,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(4285380315,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(4286578680,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(4286578684,32,FLEN)
NAN_BOXED(2115622175,32,FLEN)
NAN_BOXED(3235185352,32,FLEN)
NAN_BOXED(4286578686,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046848,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046849,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046851,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046855,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046863,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046879,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046911,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260046975,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260047103,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260047359,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260047871,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260048895,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260050943,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260055039,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260063231,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260079615,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260112383,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260177919,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260308991,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(260571135,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(261095423,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(262143999,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(264241151,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(264241152,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(266338304,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(267386880,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(267911168,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268173312,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268304384,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268369920,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268402688,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268419072,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268427264,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268431360,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268433408,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268434432,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268434944,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435200,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435328,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435392,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435424,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435440,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435448,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435452,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435454,32,FLEN)
NAN_BOXED(2115638354,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(268435455,32,FLEN)
NAN_BOXED(2116059673,32,FLEN)
NAN_BOXED(3234604748,32,FLEN)
NAN_BOXED(4018143232,32,FLEN)
NAN_BOXED(2116059673,32,FLEN)
NAN_BOXED(3234604748,32,FLEN)
NAN_BOXED(4018143233,32,FLEN)
NAN_BOXED(2116059673,32,FLEN)
NAN_BOXED(3234604748,32,FLEN)
NAN_BOXED(4018143235,32,FLEN)
NAN_BOXED(2116059673,32,FLEN)
NAN_BOXED(3234604748,32,FLEN)
NAN_BOXED(4018143239,32,FLEN)
NAN_BOXED(2116059673,32,FLEN)
NAN_BOXED(3234604748,32,FLEN)
NAN_BOXED(4018143247,32,FLEN)
NAN_BOXED(2116059673,32,FLEN)
NAN_BOXED(3234604748,32,FLEN)
NAN_BOXED(4018143263,32,FLEN)
NAN_BOXED(2116059673,32,FLEN)
NAN_BOXED(3234604748,32,FLEN)
NAN_BOXED(4018143295,32,FLEN)
NAN_BOXED(2116059673,32,FLEN)
NAN_BOXED(3234604748,32,FLEN)
NAN_BOXED(4018143359,32,FLEN)
NAN_BOXED(2116059673,32,FLEN)
NAN_BOXED(3234604748,32,FLEN)
NAN_BOXED(4018143487,32,FLEN)
NAN_BOXED(2116059673,32,FLEN)
NAN_BOXED(3234604748,32,FLEN)
NAN_BOXED(4018143743,32,FLEN)
NAN_BOXED(2116059673,32,FLEN)
NAN_BOXED(3234604748,32,FLEN)
NAN_BOXED(4018144255,32,FLEN)
NAN_BOXED(2116059673,32,FLEN)
NAN_BOXED(3234604748,32,FLEN)
NAN_BOXED(4018145279,32,FLEN)
NAN_BOXED(2116059673,32,FLEN)
NAN_BOXED(3234604748,32,FLEN)
NAN_BOXED(4018147327,32,FLEN)
NAN_BOXED(2116059673,32,FLEN)
NAN_BOXED(3234604748,32,FLEN)
NAN_BOXED(4018151423,32,FLEN)
NAN_BOXED(2116059673,32,FLEN)
NAN_BOXED(3234604748,32,FLEN)
NAN_BOXED(4018159615,32,FLEN)
NAN_BOXED(2116059673,32,FLEN)
NAN_BOXED(3234604748,32,FLEN)
NAN_BOXED(4018175999,32,FLEN)
NAN_BOXED(2116059673,32,FLEN)
NAN_BOXED(3234604748,32,FLEN)
NAN_BOXED(4018208767,32,FLEN)
NAN_BOXED(2116059673,32,FLEN)
NAN_BOXED(3234604748,32,FLEN)
NAN_BOXED(4018274303,32,FLEN)
NAN_BOXED(2116059673,32,FLEN)
NAN_BOXED(3234604748,32,FLEN)
NAN_BOXED(4018405375,32,FLEN)
NAN_BOXED(2116059673,32,FLEN)
NAN_BOXED(3234604748,32,FLEN)
NAN_BOXED(4018667519,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
