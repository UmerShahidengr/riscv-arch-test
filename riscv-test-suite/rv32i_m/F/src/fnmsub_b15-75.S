
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_9472:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3b3fffff; valaddr_reg:x3; val_offset:28416*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28416*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9473:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3b400000; valaddr_reg:x3; val_offset:28419*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28419*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9474:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3b600000; valaddr_reg:x3; val_offset:28422*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28422*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9475:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3b700000; valaddr_reg:x3; val_offset:28425*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28425*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9476:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3b780000; valaddr_reg:x3; val_offset:28428*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28428*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9477:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3b7c0000; valaddr_reg:x3; val_offset:28431*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28431*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9478:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3b7e0000; valaddr_reg:x3; val_offset:28434*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28434*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9479:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3b7f0000; valaddr_reg:x3; val_offset:28437*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28437*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9480:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3b7f8000; valaddr_reg:x3; val_offset:28440*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28440*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9481:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3b7fc000; valaddr_reg:x3; val_offset:28443*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28443*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9482:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3b7fe000; valaddr_reg:x3; val_offset:28446*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28446*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9483:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3b7ff000; valaddr_reg:x3; val_offset:28449*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28449*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9484:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3b7ff800; valaddr_reg:x3; val_offset:28452*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28452*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9485:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3b7ffc00; valaddr_reg:x3; val_offset:28455*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28455*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9486:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3b7ffe00; valaddr_reg:x3; val_offset:28458*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28458*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9487:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3b7fff00; valaddr_reg:x3; val_offset:28461*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28461*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9488:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3b7fff80; valaddr_reg:x3; val_offset:28464*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28464*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9489:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3b7fffc0; valaddr_reg:x3; val_offset:28467*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28467*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9490:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3b7fffe0; valaddr_reg:x3; val_offset:28470*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28470*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9491:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3b7ffff0; valaddr_reg:x3; val_offset:28473*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28473*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9492:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3b7ffff8; valaddr_reg:x3; val_offset:28476*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28476*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9493:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3b7ffffc; valaddr_reg:x3; val_offset:28479*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28479*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9494:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3b7ffffe; valaddr_reg:x3; val_offset:28482*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28482*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9495:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x76 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3b7fffff; valaddr_reg:x3; val_offset:28485*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28485*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9496:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3f800001; valaddr_reg:x3; val_offset:28488*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28488*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9497:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3f800003; valaddr_reg:x3; val_offset:28491*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28491*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9498:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3f800007; valaddr_reg:x3; val_offset:28494*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28494*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9499:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3f999999; valaddr_reg:x3; val_offset:28497*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28497*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9500:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:28500*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28500*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9501:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:28503*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28503*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9502:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:28506*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28506*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9503:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:28509*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28509*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9504:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:28512*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28512*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9505:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:28515*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28515*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9506:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:28518*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28518*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9507:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:28521*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28521*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9508:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:28524*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28524*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9509:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:28527*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28527*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9510:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:28530*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28530*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9511:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40dca5 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x29e769 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40dca5; op2val:0xa9e769;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:28533*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28533*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9512:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5800000; valaddr_reg:x3; val_offset:28536*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28536*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9513:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5800001; valaddr_reg:x3; val_offset:28539*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28539*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9514:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5800003; valaddr_reg:x3; val_offset:28542*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28542*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9515:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5800007; valaddr_reg:x3; val_offset:28545*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28545*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9516:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb580000f; valaddr_reg:x3; val_offset:28548*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28548*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9517:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb580001f; valaddr_reg:x3; val_offset:28551*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28551*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9518:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb580003f; valaddr_reg:x3; val_offset:28554*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28554*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9519:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb580007f; valaddr_reg:x3; val_offset:28557*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28557*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9520:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb58000ff; valaddr_reg:x3; val_offset:28560*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28560*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9521:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb58001ff; valaddr_reg:x3; val_offset:28563*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28563*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9522:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb58003ff; valaddr_reg:x3; val_offset:28566*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28566*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9523:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb58007ff; valaddr_reg:x3; val_offset:28569*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28569*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9524:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5800fff; valaddr_reg:x3; val_offset:28572*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28572*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9525:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5801fff; valaddr_reg:x3; val_offset:28575*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28575*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9526:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5803fff; valaddr_reg:x3; val_offset:28578*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28578*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9527:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5807fff; valaddr_reg:x3; val_offset:28581*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28581*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9528:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb580ffff; valaddr_reg:x3; val_offset:28584*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28584*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9529:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb581ffff; valaddr_reg:x3; val_offset:28587*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28587*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9530:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb583ffff; valaddr_reg:x3; val_offset:28590*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28590*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9531:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb587ffff; valaddr_reg:x3; val_offset:28593*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28593*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9532:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb58fffff; valaddr_reg:x3; val_offset:28596*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28596*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9533:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb59fffff; valaddr_reg:x3; val_offset:28599*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28599*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9534:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5bfffff; valaddr_reg:x3; val_offset:28602*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28602*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9535:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5c00000; valaddr_reg:x3; val_offset:28605*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28605*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9536:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5e00000; valaddr_reg:x3; val_offset:28608*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28608*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9537:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5f00000; valaddr_reg:x3; val_offset:28611*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28611*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9538:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5f80000; valaddr_reg:x3; val_offset:28614*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28614*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9539:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5fc0000; valaddr_reg:x3; val_offset:28617*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28617*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9540:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5fe0000; valaddr_reg:x3; val_offset:28620*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28620*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9541:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5ff0000; valaddr_reg:x3; val_offset:28623*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28623*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9542:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5ff8000; valaddr_reg:x3; val_offset:28626*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28626*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9543:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5ffc000; valaddr_reg:x3; val_offset:28629*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28629*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9544:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5ffe000; valaddr_reg:x3; val_offset:28632*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28632*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9545:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5fff000; valaddr_reg:x3; val_offset:28635*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28635*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9546:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5fff800; valaddr_reg:x3; val_offset:28638*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28638*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9547:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5fffc00; valaddr_reg:x3; val_offset:28641*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28641*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9548:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5fffe00; valaddr_reg:x3; val_offset:28644*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28644*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9549:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5ffff00; valaddr_reg:x3; val_offset:28647*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28647*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9550:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5ffff80; valaddr_reg:x3; val_offset:28650*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28650*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9551:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5ffffc0; valaddr_reg:x3; val_offset:28653*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28653*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9552:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5ffffe0; valaddr_reg:x3; val_offset:28656*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28656*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9553:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5fffff0; valaddr_reg:x3; val_offset:28659*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28659*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9554:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5fffff8; valaddr_reg:x3; val_offset:28662*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28662*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9555:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5fffffc; valaddr_reg:x3; val_offset:28665*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28665*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9556:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5fffffe; valaddr_reg:x3; val_offset:28668*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28668*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9557:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x6b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xb5ffffff; valaddr_reg:x3; val_offset:28671*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28671*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9558:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xbf800001; valaddr_reg:x3; val_offset:28674*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28674*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9559:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xbf800003; valaddr_reg:x3; val_offset:28677*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28677*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9560:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xbf800007; valaddr_reg:x3; val_offset:28680*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28680*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9561:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xbf999999; valaddr_reg:x3; val_offset:28683*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28683*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9562:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:28686*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28686*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9563:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:28689*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28689*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9564:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:28692*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28692*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9565:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:28695*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28695*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9566:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:28698*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28698*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9567:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:28701*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28701*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9568:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:28704*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28704*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9569:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:28707*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28707*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9570:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:28710*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28710*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9571:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:28713*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28713*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9572:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:28716*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28716*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9573:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x41e692 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x28fe65 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e41e692; op2val:0x80a8fe65;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:28719*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28719*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9574:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43d898 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e43d898; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:28722*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28722*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9575:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43d898 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e43d898; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:28725*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28725*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9576:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43d898 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e43d898; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:28728*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28728*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9577:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43d898 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e43d898; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:28731*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28731*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9578:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43d898 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e43d898; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:28734*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28734*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9579:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43d898 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e43d898; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:28737*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28737*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9580:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43d898 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e43d898; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:28740*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28740*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9581:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43d898 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e43d898; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:28743*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28743*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9582:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43d898 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e43d898; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:28746*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28746*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9583:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43d898 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e43d898; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:28749*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28749*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9584:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43d898 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e43d898; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:28752*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28752*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9585:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43d898 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e43d898; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:28755*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28755*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9586:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43d898 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e43d898; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:28758*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28758*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9587:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43d898 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e43d898; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:28761*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28761*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9588:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43d898 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e43d898; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:28764*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28764*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9589:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43d898 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e43d898; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:28767*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28767*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9590:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43d898 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e43d898; op2val:0x80000000;
op3val:0x8e000000; valaddr_reg:x3; val_offset:28770*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28770*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9591:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43d898 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e43d898; op2val:0x80000000;
op3val:0x8e000001; valaddr_reg:x3; val_offset:28773*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28773*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9592:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43d898 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e43d898; op2val:0x80000000;
op3val:0x8e000003; valaddr_reg:x3; val_offset:28776*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28776*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9593:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43d898 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e43d898; op2val:0x80000000;
op3val:0x8e000007; valaddr_reg:x3; val_offset:28779*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28779*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9594:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43d898 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e43d898; op2val:0x80000000;
op3val:0x8e00000f; valaddr_reg:x3; val_offset:28782*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28782*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9595:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43d898 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e43d898; op2val:0x80000000;
op3val:0x8e00001f; valaddr_reg:x3; val_offset:28785*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28785*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9596:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43d898 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e43d898; op2val:0x80000000;
op3val:0x8e00003f; valaddr_reg:x3; val_offset:28788*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28788*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9597:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43d898 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e43d898; op2val:0x80000000;
op3val:0x8e00007f; valaddr_reg:x3; val_offset:28791*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28791*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9598:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43d898 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e43d898; op2val:0x80000000;
op3val:0x8e0000ff; valaddr_reg:x3; val_offset:28794*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28794*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9599:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x43d898 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e43d898; op2val:0x80000000;
op3val:0x8e0001ff; valaddr_reg:x3; val_offset:28797*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28797*0 + 3*74*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(994050047,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(994050048,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(996147200,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(997195776,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(997720064,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(997982208,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(998113280,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(998178816,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(998211584,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(998227968,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(998236160,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(998240256,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(998242304,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(998243328,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(998243840,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(998244096,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(998244224,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(998244288,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(998244320,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(998244336,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(998244344,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(998244348,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(998244350,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(998244351,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2118180005,32,FLEN)
NAN_BOXED(11134825,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3045064704,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3045064705,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3045064707,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3045064711,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3045064719,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3045064735,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3045064767,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3045064831,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3045064959,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3045065215,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3045065727,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3045066751,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3045068799,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3045072895,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3045081087,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3045097471,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3045130239,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3045195775,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3045326847,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3045588991,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3046113279,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3047161855,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3049259007,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3049259008,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3051356160,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3052404736,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3052929024,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3053191168,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3053322240,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3053387776,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3053420544,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3053436928,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3053445120,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3053449216,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3053451264,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3053452288,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3053452800,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3053453056,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3053453184,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3053453248,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3053453280,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3053453296,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3053453304,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3053453308,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3053453310,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3053453311,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2118248082,32,FLEN)
NAN_BOXED(2158558821,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2118375576,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2118375576,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2118375576,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2118375576,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2118375576,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2118375576,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2118375576,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2118375576,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2118375576,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2118375576,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2118375576,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2118375576,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2118375576,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2118375576,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2118375576,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2118375576,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2118375576,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364672,32,FLEN)
NAN_BOXED(2118375576,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364673,32,FLEN)
NAN_BOXED(2118375576,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364675,32,FLEN)
NAN_BOXED(2118375576,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364679,32,FLEN)
NAN_BOXED(2118375576,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364687,32,FLEN)
NAN_BOXED(2118375576,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364703,32,FLEN)
NAN_BOXED(2118375576,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364735,32,FLEN)
NAN_BOXED(2118375576,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364799,32,FLEN)
NAN_BOXED(2118375576,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382364927,32,FLEN)
NAN_BOXED(2118375576,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2382365183,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
