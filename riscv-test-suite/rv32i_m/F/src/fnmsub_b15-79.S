
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_9984:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4eec6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4eec6b; op2val:0x0;
op3val:0xc3fffff; valaddr_reg:x3; val_offset:29952*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29952*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9985:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4eec6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4eec6b; op2val:0x0;
op3val:0xc400000; valaddr_reg:x3; val_offset:29955*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29955*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9986:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4eec6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4eec6b; op2val:0x0;
op3val:0xc600000; valaddr_reg:x3; val_offset:29958*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29958*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9987:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4eec6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4eec6b; op2val:0x0;
op3val:0xc700000; valaddr_reg:x3; val_offset:29961*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29961*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9988:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4eec6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4eec6b; op2val:0x0;
op3val:0xc780000; valaddr_reg:x3; val_offset:29964*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29964*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9989:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4eec6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4eec6b; op2val:0x0;
op3val:0xc7c0000; valaddr_reg:x3; val_offset:29967*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29967*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9990:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4eec6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4eec6b; op2val:0x0;
op3val:0xc7e0000; valaddr_reg:x3; val_offset:29970*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29970*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9991:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4eec6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4eec6b; op2val:0x0;
op3val:0xc7f0000; valaddr_reg:x3; val_offset:29973*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29973*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9992:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4eec6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4eec6b; op2val:0x0;
op3val:0xc7f8000; valaddr_reg:x3; val_offset:29976*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29976*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9993:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4eec6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4eec6b; op2val:0x0;
op3val:0xc7fc000; valaddr_reg:x3; val_offset:29979*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29979*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9994:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4eec6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4eec6b; op2val:0x0;
op3val:0xc7fe000; valaddr_reg:x3; val_offset:29982*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29982*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9995:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4eec6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4eec6b; op2val:0x0;
op3val:0xc7ff000; valaddr_reg:x3; val_offset:29985*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29985*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9996:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4eec6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4eec6b; op2val:0x0;
op3val:0xc7ff800; valaddr_reg:x3; val_offset:29988*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29988*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9997:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4eec6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4eec6b; op2val:0x0;
op3val:0xc7ffc00; valaddr_reg:x3; val_offset:29991*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29991*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9998:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4eec6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4eec6b; op2val:0x0;
op3val:0xc7ffe00; valaddr_reg:x3; val_offset:29994*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29994*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9999:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4eec6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4eec6b; op2val:0x0;
op3val:0xc7fff00; valaddr_reg:x3; val_offset:29997*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29997*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10000:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4eec6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4eec6b; op2val:0x0;
op3val:0xc7fff80; valaddr_reg:x3; val_offset:30000*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30000*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10001:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4eec6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4eec6b; op2val:0x0;
op3val:0xc7fffc0; valaddr_reg:x3; val_offset:30003*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30003*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10002:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4eec6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4eec6b; op2val:0x0;
op3val:0xc7fffe0; valaddr_reg:x3; val_offset:30006*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30006*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10003:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4eec6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4eec6b; op2val:0x0;
op3val:0xc7ffff0; valaddr_reg:x3; val_offset:30009*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30009*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10004:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4eec6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4eec6b; op2val:0x0;
op3val:0xc7ffff8; valaddr_reg:x3; val_offset:30012*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30012*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10005:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4eec6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4eec6b; op2val:0x0;
op3val:0xc7ffffc; valaddr_reg:x3; val_offset:30015*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30015*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10006:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4eec6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4eec6b; op2val:0x0;
op3val:0xc7ffffe; valaddr_reg:x3; val_offset:30018*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30018*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10007:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4eec6b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4eec6b; op2val:0x0;
op3val:0xc7fffff; valaddr_reg:x3; val_offset:30021*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30021*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10008:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:30024*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30024*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10009:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:30027*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30027*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10010:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:30030*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30030*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10011:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:30033*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30033*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10012:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:30036*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30036*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10013:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:30039*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30039*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10014:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:30042*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30042*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10015:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:30045*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30045*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10016:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:30048*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30048*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10017:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:30051*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30051*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10018:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:30054*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30054*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10019:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:30057*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30057*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10020:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:30060*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30060*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10021:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:30063*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30063*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10022:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:30066*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30066*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10023:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:30069*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30069*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10024:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2800000; valaddr_reg:x3; val_offset:30072*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30072*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10025:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2800001; valaddr_reg:x3; val_offset:30075*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30075*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10026:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2800003; valaddr_reg:x3; val_offset:30078*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30078*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10027:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2800007; valaddr_reg:x3; val_offset:30081*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30081*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10028:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x280000f; valaddr_reg:x3; val_offset:30084*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30084*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10029:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x280001f; valaddr_reg:x3; val_offset:30087*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30087*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10030:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x280003f; valaddr_reg:x3; val_offset:30090*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30090*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10031:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x280007f; valaddr_reg:x3; val_offset:30093*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30093*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10032:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x28000ff; valaddr_reg:x3; val_offset:30096*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30096*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10033:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x28001ff; valaddr_reg:x3; val_offset:30099*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30099*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10034:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x28003ff; valaddr_reg:x3; val_offset:30102*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30102*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10035:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x28007ff; valaddr_reg:x3; val_offset:30105*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30105*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10036:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2800fff; valaddr_reg:x3; val_offset:30108*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30108*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10037:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2801fff; valaddr_reg:x3; val_offset:30111*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30111*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10038:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2803fff; valaddr_reg:x3; val_offset:30114*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30114*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10039:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2807fff; valaddr_reg:x3; val_offset:30117*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30117*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10040:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x280ffff; valaddr_reg:x3; val_offset:30120*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30120*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10041:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x281ffff; valaddr_reg:x3; val_offset:30123*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30123*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10042:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x283ffff; valaddr_reg:x3; val_offset:30126*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30126*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10043:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x287ffff; valaddr_reg:x3; val_offset:30129*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30129*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10044:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x28fffff; valaddr_reg:x3; val_offset:30132*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30132*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10045:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x29fffff; valaddr_reg:x3; val_offset:30135*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30135*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10046:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2bfffff; valaddr_reg:x3; val_offset:30138*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30138*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10047:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2c00000; valaddr_reg:x3; val_offset:30141*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30141*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10048:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2e00000; valaddr_reg:x3; val_offset:30144*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30144*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10049:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2f00000; valaddr_reg:x3; val_offset:30147*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30147*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10050:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2f80000; valaddr_reg:x3; val_offset:30150*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30150*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10051:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2fc0000; valaddr_reg:x3; val_offset:30153*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30153*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10052:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2fe0000; valaddr_reg:x3; val_offset:30156*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30156*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10053:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2ff0000; valaddr_reg:x3; val_offset:30159*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30159*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10054:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2ff8000; valaddr_reg:x3; val_offset:30162*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30162*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10055:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2ffc000; valaddr_reg:x3; val_offset:30165*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30165*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10056:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2ffe000; valaddr_reg:x3; val_offset:30168*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30168*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10057:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2fff000; valaddr_reg:x3; val_offset:30171*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30171*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10058:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2fff800; valaddr_reg:x3; val_offset:30174*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30174*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10059:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2fffc00; valaddr_reg:x3; val_offset:30177*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30177*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10060:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2fffe00; valaddr_reg:x3; val_offset:30180*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30180*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10061:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2ffff00; valaddr_reg:x3; val_offset:30183*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30183*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10062:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2ffff80; valaddr_reg:x3; val_offset:30186*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30186*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10063:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2ffffc0; valaddr_reg:x3; val_offset:30189*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30189*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10064:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2ffffe0; valaddr_reg:x3; val_offset:30192*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30192*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10065:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2fffff0; valaddr_reg:x3; val_offset:30195*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30195*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10066:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2fffff8; valaddr_reg:x3; val_offset:30198*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30198*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10067:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2fffffc; valaddr_reg:x3; val_offset:30201*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30201*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10068:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2fffffe; valaddr_reg:x3; val_offset:30204*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30204*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10069:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x4f6e00 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e4f6e00; op2val:0x0;
op3val:0x2ffffff; valaddr_reg:x3; val_offset:30207*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30207*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10070:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa0000000; valaddr_reg:x3; val_offset:30210*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30210*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10071:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa0000001; valaddr_reg:x3; val_offset:30213*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30213*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10072:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa0000003; valaddr_reg:x3; val_offset:30216*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30216*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10073:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa0000007; valaddr_reg:x3; val_offset:30219*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30219*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10074:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa000000f; valaddr_reg:x3; val_offset:30222*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30222*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10075:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa000001f; valaddr_reg:x3; val_offset:30225*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30225*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10076:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa000003f; valaddr_reg:x3; val_offset:30228*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30228*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10077:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa000007f; valaddr_reg:x3; val_offset:30231*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30231*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10078:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa00000ff; valaddr_reg:x3; val_offset:30234*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30234*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10079:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa00001ff; valaddr_reg:x3; val_offset:30237*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30237*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10080:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa00003ff; valaddr_reg:x3; val_offset:30240*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30240*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10081:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa00007ff; valaddr_reg:x3; val_offset:30243*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30243*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10082:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa0000fff; valaddr_reg:x3; val_offset:30246*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30246*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10083:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa0001fff; valaddr_reg:x3; val_offset:30249*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30249*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10084:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa0003fff; valaddr_reg:x3; val_offset:30252*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30252*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10085:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa0007fff; valaddr_reg:x3; val_offset:30255*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30255*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10086:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa000ffff; valaddr_reg:x3; val_offset:30258*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30258*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10087:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa001ffff; valaddr_reg:x3; val_offset:30261*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30261*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10088:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa003ffff; valaddr_reg:x3; val_offset:30264*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30264*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10089:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa007ffff; valaddr_reg:x3; val_offset:30267*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30267*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10090:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa00fffff; valaddr_reg:x3; val_offset:30270*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30270*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10091:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa01fffff; valaddr_reg:x3; val_offset:30273*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30273*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10092:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa03fffff; valaddr_reg:x3; val_offset:30276*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30276*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10093:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa0400000; valaddr_reg:x3; val_offset:30279*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30279*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10094:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa0600000; valaddr_reg:x3; val_offset:30282*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30282*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10095:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa0700000; valaddr_reg:x3; val_offset:30285*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30285*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10096:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa0780000; valaddr_reg:x3; val_offset:30288*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30288*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10097:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa07c0000; valaddr_reg:x3; val_offset:30291*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30291*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10098:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa07e0000; valaddr_reg:x3; val_offset:30294*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30294*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10099:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa07f0000; valaddr_reg:x3; val_offset:30297*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30297*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10100:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa07f8000; valaddr_reg:x3; val_offset:30300*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30300*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10101:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa07fc000; valaddr_reg:x3; val_offset:30303*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30303*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10102:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa07fe000; valaddr_reg:x3; val_offset:30306*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30306*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10103:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa07ff000; valaddr_reg:x3; val_offset:30309*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30309*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10104:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa07ff800; valaddr_reg:x3; val_offset:30312*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30312*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10105:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa07ffc00; valaddr_reg:x3; val_offset:30315*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30315*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10106:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa07ffe00; valaddr_reg:x3; val_offset:30318*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30318*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10107:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa07fff00; valaddr_reg:x3; val_offset:30321*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30321*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10108:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa07fff80; valaddr_reg:x3; val_offset:30324*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30324*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10109:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa07fffc0; valaddr_reg:x3; val_offset:30327*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30327*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10110:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa07fffe0; valaddr_reg:x3; val_offset:30330*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30330*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10111:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa07ffff0; valaddr_reg:x3; val_offset:30333*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30333*0 + 3*78*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2119101547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(205520895,32,FLEN)
NAN_BOXED(2119101547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(205520896,32,FLEN)
NAN_BOXED(2119101547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(207618048,32,FLEN)
NAN_BOXED(2119101547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(208666624,32,FLEN)
NAN_BOXED(2119101547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209190912,32,FLEN)
NAN_BOXED(2119101547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209453056,32,FLEN)
NAN_BOXED(2119101547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209584128,32,FLEN)
NAN_BOXED(2119101547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209649664,32,FLEN)
NAN_BOXED(2119101547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209682432,32,FLEN)
NAN_BOXED(2119101547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209698816,32,FLEN)
NAN_BOXED(2119101547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209707008,32,FLEN)
NAN_BOXED(2119101547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209711104,32,FLEN)
NAN_BOXED(2119101547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209713152,32,FLEN)
NAN_BOXED(2119101547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209714176,32,FLEN)
NAN_BOXED(2119101547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209714688,32,FLEN)
NAN_BOXED(2119101547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209714944,32,FLEN)
NAN_BOXED(2119101547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715072,32,FLEN)
NAN_BOXED(2119101547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715136,32,FLEN)
NAN_BOXED(2119101547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715168,32,FLEN)
NAN_BOXED(2119101547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715184,32,FLEN)
NAN_BOXED(2119101547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715192,32,FLEN)
NAN_BOXED(2119101547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715196,32,FLEN)
NAN_BOXED(2119101547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715198,32,FLEN)
NAN_BOXED(2119101547,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(209715199,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943040,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943041,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943043,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943047,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943055,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943071,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943103,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943167,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943295,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41943551,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41944063,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41945087,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41947135,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41951231,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41959423,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(41975807,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42008575,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42074111,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42205183,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42467327,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(42991615,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(44040191,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(46137343,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(46137344,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(48234496,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(49283072,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(49807360,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50069504,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50200576,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50266112,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50298880,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50315264,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50323456,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50327552,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50329600,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50330624,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331136,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331392,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331520,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331584,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331616,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331632,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331640,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331644,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331646,32,FLEN)
NAN_BOXED(2119134720,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331647,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2684354560,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2684354561,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2684354563,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2684354567,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2684354575,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2684354591,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2684354623,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2684354687,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2684354815,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2684355071,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2684355583,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2684356607,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2684358655,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2684362751,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2684370943,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2684387327,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2684420095,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2684485631,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2684616703,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2684878847,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2685403135,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2686451711,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2688548863,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2688548864,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2690646016,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2691694592,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2692218880,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2692481024,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2692612096,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2692677632,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2692710400,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2692726784,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2692734976,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2692739072,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2692741120,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2692742144,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2692742656,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2692742912,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2692743040,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2692743104,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2692743136,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2692743152,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
