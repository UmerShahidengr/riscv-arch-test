
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_10112:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa07ffff8; valaddr_reg:x3; val_offset:30336*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30336*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10113:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa07ffffc; valaddr_reg:x3; val_offset:30339*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30339*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10114:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa07ffffe; valaddr_reg:x3; val_offset:30342*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30342*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10115:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x40 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xa07fffff; valaddr_reg:x3; val_offset:30345*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30345*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10116:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xbf800001; valaddr_reg:x3; val_offset:30348*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30348*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10117:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xbf800003; valaddr_reg:x3; val_offset:30351*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30351*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10118:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xbf800007; valaddr_reg:x3; val_offset:30354*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30354*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10119:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xbf999999; valaddr_reg:x3; val_offset:30357*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30357*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10120:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:30360*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30360*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10121:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:30363*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30363*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10122:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:30366*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30366*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10123:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:30369*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30369*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10124:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:30372*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30372*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10125:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:30375*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30375*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10126:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:30378*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30378*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10127:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:30381*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30381*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10128:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:30384*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30384*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10129:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:30387*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30387*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10130:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:30390*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30390*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10131:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x504312 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d571c and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e504312; op2val:0x809d571c;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:30393*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30393*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10132:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe000000; valaddr_reg:x3; val_offset:30396*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30396*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10133:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe000001; valaddr_reg:x3; val_offset:30399*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30399*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10134:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe000003; valaddr_reg:x3; val_offset:30402*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30402*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10135:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe000007; valaddr_reg:x3; val_offset:30405*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30405*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10136:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe00000f; valaddr_reg:x3; val_offset:30408*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30408*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10137:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe00001f; valaddr_reg:x3; val_offset:30411*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30411*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10138:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe00003f; valaddr_reg:x3; val_offset:30414*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30414*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10139:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe00007f; valaddr_reg:x3; val_offset:30417*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30417*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10140:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe0000ff; valaddr_reg:x3; val_offset:30420*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30420*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10141:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe0001ff; valaddr_reg:x3; val_offset:30423*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30423*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10142:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe0003ff; valaddr_reg:x3; val_offset:30426*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30426*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10143:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe0007ff; valaddr_reg:x3; val_offset:30429*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30429*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10144:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe000fff; valaddr_reg:x3; val_offset:30432*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30432*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10145:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe001fff; valaddr_reg:x3; val_offset:30435*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30435*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10146:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe003fff; valaddr_reg:x3; val_offset:30438*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30438*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10147:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe007fff; valaddr_reg:x3; val_offset:30441*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30441*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10148:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe00ffff; valaddr_reg:x3; val_offset:30444*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30444*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10149:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe01ffff; valaddr_reg:x3; val_offset:30447*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30447*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10150:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe03ffff; valaddr_reg:x3; val_offset:30450*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30450*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10151:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe07ffff; valaddr_reg:x3; val_offset:30453*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30453*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10152:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe0fffff; valaddr_reg:x3; val_offset:30456*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30456*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10153:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe1fffff; valaddr_reg:x3; val_offset:30459*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30459*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10154:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe3fffff; valaddr_reg:x3; val_offset:30462*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30462*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10155:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe400000; valaddr_reg:x3; val_offset:30465*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30465*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10156:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe600000; valaddr_reg:x3; val_offset:30468*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30468*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10157:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe700000; valaddr_reg:x3; val_offset:30471*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30471*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10158:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe780000; valaddr_reg:x3; val_offset:30474*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30474*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10159:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe7c0000; valaddr_reg:x3; val_offset:30477*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30477*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10160:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe7e0000; valaddr_reg:x3; val_offset:30480*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30480*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10161:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe7f0000; valaddr_reg:x3; val_offset:30483*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30483*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10162:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe7f8000; valaddr_reg:x3; val_offset:30486*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30486*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10163:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe7fc000; valaddr_reg:x3; val_offset:30489*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30489*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10164:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe7fe000; valaddr_reg:x3; val_offset:30492*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30492*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10165:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe7ff000; valaddr_reg:x3; val_offset:30495*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30495*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10166:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe7ff800; valaddr_reg:x3; val_offset:30498*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30498*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10167:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe7ffc00; valaddr_reg:x3; val_offset:30501*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30501*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10168:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe7ffe00; valaddr_reg:x3; val_offset:30504*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30504*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10169:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe7fff00; valaddr_reg:x3; val_offset:30507*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30507*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10170:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe7fff80; valaddr_reg:x3; val_offset:30510*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30510*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10171:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe7fffc0; valaddr_reg:x3; val_offset:30513*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30513*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10172:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe7fffe0; valaddr_reg:x3; val_offset:30516*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30516*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10173:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe7ffff0; valaddr_reg:x3; val_offset:30519*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30519*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10174:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe7ffff8; valaddr_reg:x3; val_offset:30522*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30522*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10175:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe7ffffc; valaddr_reg:x3; val_offset:30525*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30525*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10176:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe7ffffe; valaddr_reg:x3; val_offset:30528*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30528*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10177:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbe7fffff; valaddr_reg:x3; val_offset:30531*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30531*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10178:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbf800001; valaddr_reg:x3; val_offset:30534*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30534*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10179:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbf800003; valaddr_reg:x3; val_offset:30537*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30537*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10180:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbf800007; valaddr_reg:x3; val_offset:30540*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30540*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10181:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbf999999; valaddr_reg:x3; val_offset:30543*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30543*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10182:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:30546*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30546*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10183:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:30549*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30549*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10184:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:30552*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30552*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10185:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:30555*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30555*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10186:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:30558*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30558*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10187:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:30561*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30561*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10188:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:30564*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30564*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10189:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:30567*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30567*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10190:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:30570*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30570*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10191:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:30573*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30573*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10192:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:30576*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30576*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10193:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x506ed3 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1d3614 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e506ed3; op2val:0x809d3614;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:30579*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30579*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10194:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x3f800001; valaddr_reg:x3; val_offset:30582*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30582*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10195:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x3f800003; valaddr_reg:x3; val_offset:30585*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30585*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10196:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x3f800007; valaddr_reg:x3; val_offset:30588*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30588*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10197:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x3f999999; valaddr_reg:x3; val_offset:30591*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30591*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10198:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:30594*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30594*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10199:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:30597*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30597*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10200:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:30600*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30600*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10201:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:30603*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30603*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10202:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:30606*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30606*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10203:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:30609*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30609*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10204:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:30612*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30612*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10205:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:30615*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30615*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10206:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:30618*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30618*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10207:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:30621*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30621*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10208:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:30624*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30624*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10209:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:30627*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30627*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10210:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4e800000; valaddr_reg:x3; val_offset:30630*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30630*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10211:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4e800001; valaddr_reg:x3; val_offset:30633*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30633*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10212:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4e800003; valaddr_reg:x3; val_offset:30636*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30636*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10213:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4e800007; valaddr_reg:x3; val_offset:30639*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30639*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10214:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4e80000f; valaddr_reg:x3; val_offset:30642*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30642*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10215:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4e80001f; valaddr_reg:x3; val_offset:30645*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30645*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10216:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4e80003f; valaddr_reg:x3; val_offset:30648*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30648*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10217:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4e80007f; valaddr_reg:x3; val_offset:30651*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30651*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10218:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4e8000ff; valaddr_reg:x3; val_offset:30654*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30654*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10219:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4e8001ff; valaddr_reg:x3; val_offset:30657*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30657*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10220:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4e8003ff; valaddr_reg:x3; val_offset:30660*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30660*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10221:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4e8007ff; valaddr_reg:x3; val_offset:30663*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30663*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10222:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4e800fff; valaddr_reg:x3; val_offset:30666*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30666*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10223:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4e801fff; valaddr_reg:x3; val_offset:30669*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30669*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10224:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4e803fff; valaddr_reg:x3; val_offset:30672*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30672*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10225:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4e807fff; valaddr_reg:x3; val_offset:30675*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30675*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10226:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4e80ffff; valaddr_reg:x3; val_offset:30678*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30678*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10227:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4e81ffff; valaddr_reg:x3; val_offset:30681*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30681*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10228:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4e83ffff; valaddr_reg:x3; val_offset:30684*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30684*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10229:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4e87ffff; valaddr_reg:x3; val_offset:30687*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30687*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10230:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4e8fffff; valaddr_reg:x3; val_offset:30690*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30690*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10231:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4e9fffff; valaddr_reg:x3; val_offset:30693*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30693*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10232:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4ebfffff; valaddr_reg:x3; val_offset:30696*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30696*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10233:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4ec00000; valaddr_reg:x3; val_offset:30699*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30699*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10234:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4ee00000; valaddr_reg:x3; val_offset:30702*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30702*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10235:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4ef00000; valaddr_reg:x3; val_offset:30705*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30705*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10236:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4ef80000; valaddr_reg:x3; val_offset:30708*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30708*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10237:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4efc0000; valaddr_reg:x3; val_offset:30711*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30711*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10238:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4efe0000; valaddr_reg:x3; val_offset:30714*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30714*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10239:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x55f571 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x1926a8 and fs3 == 0 and fe3 == 0x9d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e55f571; op2val:0x9926a8;
op3val:0x4eff0000; valaddr_reg:x3; val_offset:30717*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 30717*0 + 3*79*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2692743160,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2692743164,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2692743166,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(2692743167,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2119189266,32,FLEN)
NAN_BOXED(2157795100,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3187671040,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3187671041,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3187671043,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3187671047,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3187671055,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3187671071,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3187671103,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3187671167,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3187671295,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3187671551,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3187672063,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3187673087,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3187675135,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3187679231,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3187687423,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3187703807,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3187736575,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3187802111,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3187933183,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3188195327,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3188719615,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3189768191,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3191865343,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3191865344,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3193962496,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3195011072,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3195535360,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3195797504,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3195928576,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3195994112,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3196026880,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3196043264,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3196051456,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3196055552,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3196057600,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3196058624,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3196059136,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3196059392,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3196059520,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3196059584,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3196059616,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3196059632,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3196059640,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3196059644,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3196059646,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3196059647,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2119200467,32,FLEN)
NAN_BOXED(2157786644,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1317011456,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1317011457,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1317011459,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1317011463,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1317011471,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1317011487,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1317011519,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1317011583,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1317011711,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1317011967,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1317012479,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1317013503,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1317015551,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1317019647,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1317027839,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1317044223,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1317076991,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1317142527,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1317273599,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1317535743,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1318060031,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1319108607,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1321205759,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1321205760,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1323302912,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1324351488,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1324875776,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1325137920,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1325268992,32,FLEN)
NAN_BOXED(2119562609,32,FLEN)
NAN_BOXED(10036904,32,FLEN)
NAN_BOXED(1325334528,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
