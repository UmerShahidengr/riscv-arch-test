
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_10368:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ad8ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ad8ea; op2val:0x80000000;
op3val:0x8d7ff800; valaddr_reg:x3; val_offset:31104*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31104*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10369:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ad8ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ad8ea; op2val:0x80000000;
op3val:0x8d7ffc00; valaddr_reg:x3; val_offset:31107*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31107*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10370:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ad8ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ad8ea; op2val:0x80000000;
op3val:0x8d7ffe00; valaddr_reg:x3; val_offset:31110*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31110*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10371:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ad8ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ad8ea; op2val:0x80000000;
op3val:0x8d7fff00; valaddr_reg:x3; val_offset:31113*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31113*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10372:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ad8ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ad8ea; op2val:0x80000000;
op3val:0x8d7fff80; valaddr_reg:x3; val_offset:31116*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31116*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10373:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ad8ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ad8ea; op2val:0x80000000;
op3val:0x8d7fffc0; valaddr_reg:x3; val_offset:31119*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31119*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10374:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ad8ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ad8ea; op2val:0x80000000;
op3val:0x8d7fffe0; valaddr_reg:x3; val_offset:31122*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31122*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10375:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ad8ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ad8ea; op2val:0x80000000;
op3val:0x8d7ffff0; valaddr_reg:x3; val_offset:31125*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31125*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10376:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ad8ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ad8ea; op2val:0x80000000;
op3val:0x8d7ffff8; valaddr_reg:x3; val_offset:31128*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31128*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10377:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ad8ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ad8ea; op2val:0x80000000;
op3val:0x8d7ffffc; valaddr_reg:x3; val_offset:31131*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31131*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10378:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ad8ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ad8ea; op2val:0x80000000;
op3val:0x8d7ffffe; valaddr_reg:x3; val_offset:31134*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31134*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10379:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ad8ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ad8ea; op2val:0x80000000;
op3val:0x8d7fffff; valaddr_reg:x3; val_offset:31137*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31137*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10380:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac000000; valaddr_reg:x3; val_offset:31140*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31140*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10381:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac000001; valaddr_reg:x3; val_offset:31143*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31143*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10382:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac000003; valaddr_reg:x3; val_offset:31146*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31146*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10383:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac000007; valaddr_reg:x3; val_offset:31149*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31149*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10384:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac00000f; valaddr_reg:x3; val_offset:31152*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31152*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10385:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac00001f; valaddr_reg:x3; val_offset:31155*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31155*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10386:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac00003f; valaddr_reg:x3; val_offset:31158*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31158*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10387:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac00007f; valaddr_reg:x3; val_offset:31161*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31161*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10388:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac0000ff; valaddr_reg:x3; val_offset:31164*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31164*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10389:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac0001ff; valaddr_reg:x3; val_offset:31167*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31167*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10390:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac0003ff; valaddr_reg:x3; val_offset:31170*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31170*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10391:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac0007ff; valaddr_reg:x3; val_offset:31173*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31173*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10392:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac000fff; valaddr_reg:x3; val_offset:31176*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31176*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10393:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac001fff; valaddr_reg:x3; val_offset:31179*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31179*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10394:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac003fff; valaddr_reg:x3; val_offset:31182*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31182*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10395:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac007fff; valaddr_reg:x3; val_offset:31185*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31185*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10396:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac00ffff; valaddr_reg:x3; val_offset:31188*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31188*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10397:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac01ffff; valaddr_reg:x3; val_offset:31191*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31191*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10398:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac03ffff; valaddr_reg:x3; val_offset:31194*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31194*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10399:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac07ffff; valaddr_reg:x3; val_offset:31197*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31197*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10400:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac0fffff; valaddr_reg:x3; val_offset:31200*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31200*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10401:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac1fffff; valaddr_reg:x3; val_offset:31203*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31203*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10402:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac3fffff; valaddr_reg:x3; val_offset:31206*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31206*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10403:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac400000; valaddr_reg:x3; val_offset:31209*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31209*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10404:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac600000; valaddr_reg:x3; val_offset:31212*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31212*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10405:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac700000; valaddr_reg:x3; val_offset:31215*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31215*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10406:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac780000; valaddr_reg:x3; val_offset:31218*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31218*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10407:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac7c0000; valaddr_reg:x3; val_offset:31221*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31221*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10408:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac7e0000; valaddr_reg:x3; val_offset:31224*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31224*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10409:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac7f0000; valaddr_reg:x3; val_offset:31227*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31227*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10410:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac7f8000; valaddr_reg:x3; val_offset:31230*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31230*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10411:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac7fc000; valaddr_reg:x3; val_offset:31233*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31233*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10412:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac7fe000; valaddr_reg:x3; val_offset:31236*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31236*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10413:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac7ff000; valaddr_reg:x3; val_offset:31239*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31239*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10414:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac7ff800; valaddr_reg:x3; val_offset:31242*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31242*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10415:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac7ffc00; valaddr_reg:x3; val_offset:31245*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31245*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10416:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac7ffe00; valaddr_reg:x3; val_offset:31248*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31248*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10417:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac7fff00; valaddr_reg:x3; val_offset:31251*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31251*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10418:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac7fff80; valaddr_reg:x3; val_offset:31254*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31254*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10419:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac7fffc0; valaddr_reg:x3; val_offset:31257*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31257*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10420:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac7fffe0; valaddr_reg:x3; val_offset:31260*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31260*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10421:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac7ffff0; valaddr_reg:x3; val_offset:31263*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31263*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10422:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac7ffff8; valaddr_reg:x3; val_offset:31266*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31266*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10423:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac7ffffc; valaddr_reg:x3; val_offset:31269*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31269*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10424:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac7ffffe; valaddr_reg:x3; val_offset:31272*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31272*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10425:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x58 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xac7fffff; valaddr_reg:x3; val_offset:31275*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31275*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10426:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xbf800001; valaddr_reg:x3; val_offset:31278*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31278*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10427:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xbf800003; valaddr_reg:x3; val_offset:31281*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31281*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10428:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xbf800007; valaddr_reg:x3; val_offset:31284*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31284*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10429:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xbf999999; valaddr_reg:x3; val_offset:31287*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31287*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10430:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:31290*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31290*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10431:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:31293*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31293*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10432:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:31296*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31296*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10433:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:31299*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31299*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10434:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:31302*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31302*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10435:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:31305*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31305*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10436:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:31308*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31308*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10437:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:31311*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31311*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10438:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:31314*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31314*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10439:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:31317*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31317*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10440:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:31320*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31320*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10441:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5c6cb0 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x14a897 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5c6cb0; op2val:0x8094a897;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:31323*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31323*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10442:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9800000; valaddr_reg:x3; val_offset:31326*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31326*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10443:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9800001; valaddr_reg:x3; val_offset:31329*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31329*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10444:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9800003; valaddr_reg:x3; val_offset:31332*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31332*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10445:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9800007; valaddr_reg:x3; val_offset:31335*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31335*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10446:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa980000f; valaddr_reg:x3; val_offset:31338*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31338*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10447:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa980001f; valaddr_reg:x3; val_offset:31341*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31341*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10448:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa980003f; valaddr_reg:x3; val_offset:31344*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31344*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10449:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa980007f; valaddr_reg:x3; val_offset:31347*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31347*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10450:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa98000ff; valaddr_reg:x3; val_offset:31350*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31350*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10451:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa98001ff; valaddr_reg:x3; val_offset:31353*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31353*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10452:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa98003ff; valaddr_reg:x3; val_offset:31356*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31356*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10453:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa98007ff; valaddr_reg:x3; val_offset:31359*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31359*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10454:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9800fff; valaddr_reg:x3; val_offset:31362*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31362*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10455:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9801fff; valaddr_reg:x3; val_offset:31365*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31365*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10456:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9803fff; valaddr_reg:x3; val_offset:31368*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31368*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10457:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9807fff; valaddr_reg:x3; val_offset:31371*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31371*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10458:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa980ffff; valaddr_reg:x3; val_offset:31374*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31374*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10459:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa981ffff; valaddr_reg:x3; val_offset:31377*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31377*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10460:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa983ffff; valaddr_reg:x3; val_offset:31380*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31380*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10461:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa987ffff; valaddr_reg:x3; val_offset:31383*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31383*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10462:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa98fffff; valaddr_reg:x3; val_offset:31386*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31386*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10463:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa99fffff; valaddr_reg:x3; val_offset:31389*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31389*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10464:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9bfffff; valaddr_reg:x3; val_offset:31392*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31392*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10465:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9c00000; valaddr_reg:x3; val_offset:31395*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31395*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10466:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9e00000; valaddr_reg:x3; val_offset:31398*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31398*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10467:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9f00000; valaddr_reg:x3; val_offset:31401*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31401*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10468:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9f80000; valaddr_reg:x3; val_offset:31404*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31404*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10469:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9fc0000; valaddr_reg:x3; val_offset:31407*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31407*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10470:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9fe0000; valaddr_reg:x3; val_offset:31410*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31410*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10471:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9ff0000; valaddr_reg:x3; val_offset:31413*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31413*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10472:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9ff8000; valaddr_reg:x3; val_offset:31416*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31416*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10473:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9ffc000; valaddr_reg:x3; val_offset:31419*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31419*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10474:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9ffe000; valaddr_reg:x3; val_offset:31422*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31422*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10475:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9fff000; valaddr_reg:x3; val_offset:31425*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31425*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10476:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9fff800; valaddr_reg:x3; val_offset:31428*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31428*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10477:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9fffc00; valaddr_reg:x3; val_offset:31431*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31431*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10478:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9fffe00; valaddr_reg:x3; val_offset:31434*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31434*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10479:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9ffff00; valaddr_reg:x3; val_offset:31437*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31437*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10480:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9ffff80; valaddr_reg:x3; val_offset:31440*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31440*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10481:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9ffffc0; valaddr_reg:x3; val_offset:31443*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31443*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10482:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9ffffe0; valaddr_reg:x3; val_offset:31446*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31446*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10483:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9fffff0; valaddr_reg:x3; val_offset:31449*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31449*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10484:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9fffff8; valaddr_reg:x3; val_offset:31452*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31452*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10485:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9fffffc; valaddr_reg:x3; val_offset:31455*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31455*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10486:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9fffffe; valaddr_reg:x3; val_offset:31458*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31458*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10487:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x53 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xa9ffffff; valaddr_reg:x3; val_offset:31461*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31461*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10488:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xbf800001; valaddr_reg:x3; val_offset:31464*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31464*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10489:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xbf800003; valaddr_reg:x3; val_offset:31467*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31467*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10490:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xbf800007; valaddr_reg:x3; val_offset:31470*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31470*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10491:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xbf999999; valaddr_reg:x3; val_offset:31473*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31473*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10492:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:31476*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31476*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10493:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:31479*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31479*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10494:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:31482*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31482*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10495:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:31485*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31485*0 + 3*81*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2119882986,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373974016,32,FLEN)
NAN_BOXED(2119882986,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975040,32,FLEN)
NAN_BOXED(2119882986,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975552,32,FLEN)
NAN_BOXED(2119882986,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975808,32,FLEN)
NAN_BOXED(2119882986,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373975936,32,FLEN)
NAN_BOXED(2119882986,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976000,32,FLEN)
NAN_BOXED(2119882986,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976032,32,FLEN)
NAN_BOXED(2119882986,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976048,32,FLEN)
NAN_BOXED(2119882986,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976056,32,FLEN)
NAN_BOXED(2119882986,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976060,32,FLEN)
NAN_BOXED(2119882986,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976062,32,FLEN)
NAN_BOXED(2119882986,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2373976063,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2885681152,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2885681153,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2885681155,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2885681159,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2885681167,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2885681183,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2885681215,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2885681279,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2885681407,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2885681663,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2885682175,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2885683199,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2885685247,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2885689343,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2885697535,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2885713919,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2885746687,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2885812223,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2885943295,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2886205439,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2886729727,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2887778303,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2889875455,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2889875456,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2891972608,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2893021184,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2893545472,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2893807616,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2893938688,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2894004224,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2894036992,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2894053376,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2894061568,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2894065664,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2894067712,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2894068736,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2894069248,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2894069504,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2894069632,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2894069696,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2894069728,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2894069744,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2894069752,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2894069756,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2894069758,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(2894069759,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2119986352,32,FLEN)
NAN_BOXED(2157226135,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2843738112,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2843738113,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2843738115,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2843738119,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2843738127,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2843738143,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2843738175,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2843738239,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2843738367,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2843738623,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2843739135,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2843740159,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2843742207,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2843746303,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2843754495,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2843770879,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2843803647,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2843869183,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2844000255,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2844262399,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2844786687,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2845835263,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2847932415,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2847932416,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2850029568,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2851078144,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2851602432,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2851864576,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2851995648,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2852061184,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2852093952,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2852110336,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2852118528,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2852122624,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2852124672,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2852125696,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2852126208,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2852126464,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2852126592,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2852126656,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2852126688,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2852126704,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2852126712,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2852126716,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2852126718,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(2852126719,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
