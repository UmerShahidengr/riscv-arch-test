
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_10496:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:31488*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31488*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10497:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:31491*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31491*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10498:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:31494*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31494*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10499:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:31497*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31497*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10500:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:31500*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31500*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10501:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:31503*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31503*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10502:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:31506*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31506*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10503:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5dfbef and fs2 == 1 and fe2 == 0x01 and fm2 == 0x139d39 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5dfbef; op2val:0x80939d39;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:31509*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31509*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10504:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f000000; valaddr_reg:x3; val_offset:31512*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31512*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10505:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f000001; valaddr_reg:x3; val_offset:31515*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31515*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10506:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f000003; valaddr_reg:x3; val_offset:31518*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31518*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10507:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f000007; valaddr_reg:x3; val_offset:31521*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31521*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10508:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f00000f; valaddr_reg:x3; val_offset:31524*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31524*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10509:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f00001f; valaddr_reg:x3; val_offset:31527*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31527*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10510:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f00003f; valaddr_reg:x3; val_offset:31530*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31530*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10511:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f00007f; valaddr_reg:x3; val_offset:31533*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31533*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10512:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f0000ff; valaddr_reg:x3; val_offset:31536*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31536*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10513:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f0001ff; valaddr_reg:x3; val_offset:31539*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31539*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10514:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f0003ff; valaddr_reg:x3; val_offset:31542*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31542*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10515:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f0007ff; valaddr_reg:x3; val_offset:31545*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31545*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10516:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f000fff; valaddr_reg:x3; val_offset:31548*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31548*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10517:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f001fff; valaddr_reg:x3; val_offset:31551*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31551*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10518:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f003fff; valaddr_reg:x3; val_offset:31554*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31554*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10519:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f007fff; valaddr_reg:x3; val_offset:31557*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31557*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10520:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f00ffff; valaddr_reg:x3; val_offset:31560*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31560*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10521:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f01ffff; valaddr_reg:x3; val_offset:31563*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31563*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10522:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f03ffff; valaddr_reg:x3; val_offset:31566*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31566*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10523:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f07ffff; valaddr_reg:x3; val_offset:31569*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31569*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10524:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f0fffff; valaddr_reg:x3; val_offset:31572*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31572*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10525:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f1fffff; valaddr_reg:x3; val_offset:31575*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31575*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10526:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f3fffff; valaddr_reg:x3; val_offset:31578*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31578*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10527:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f400000; valaddr_reg:x3; val_offset:31581*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31581*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10528:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f600000; valaddr_reg:x3; val_offset:31584*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31584*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10529:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f700000; valaddr_reg:x3; val_offset:31587*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31587*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10530:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f780000; valaddr_reg:x3; val_offset:31590*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31590*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10531:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f7c0000; valaddr_reg:x3; val_offset:31593*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31593*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10532:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f7e0000; valaddr_reg:x3; val_offset:31596*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31596*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10533:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f7f0000; valaddr_reg:x3; val_offset:31599*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31599*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10534:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f7f8000; valaddr_reg:x3; val_offset:31602*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31602*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10535:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f7fc000; valaddr_reg:x3; val_offset:31605*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31605*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10536:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f7fe000; valaddr_reg:x3; val_offset:31608*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31608*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10537:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f7ff000; valaddr_reg:x3; val_offset:31611*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31611*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10538:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f7ff800; valaddr_reg:x3; val_offset:31614*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31614*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10539:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f7ffc00; valaddr_reg:x3; val_offset:31617*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31617*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10540:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f7ffe00; valaddr_reg:x3; val_offset:31620*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31620*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10541:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f7fff00; valaddr_reg:x3; val_offset:31623*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31623*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10542:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f7fff80; valaddr_reg:x3; val_offset:31626*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31626*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10543:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f7fffc0; valaddr_reg:x3; val_offset:31629*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31629*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10544:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f7fffe0; valaddr_reg:x3; val_offset:31632*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31632*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10545:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f7ffff0; valaddr_reg:x3; val_offset:31635*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31635*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10546:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f7ffff8; valaddr_reg:x3; val_offset:31638*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31638*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10547:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f7ffffc; valaddr_reg:x3; val_offset:31641*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31641*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10548:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f7ffffe; valaddr_reg:x3; val_offset:31644*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31644*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10549:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0x9f7fffff; valaddr_reg:x3; val_offset:31647*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31647*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10550:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0xbf800001; valaddr_reg:x3; val_offset:31650*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31650*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10551:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0xbf800003; valaddr_reg:x3; val_offset:31653*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31653*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10552:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0xbf800007; valaddr_reg:x3; val_offset:31656*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31656*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10553:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0xbf999999; valaddr_reg:x3; val_offset:31659*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31659*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10554:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:31662*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31662*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10555:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:31665*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31665*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10556:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:31668*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31668*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10557:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:31671*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31671*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10558:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:31674*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31674*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10559:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:31677*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31677*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10560:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:31680*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31680*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10561:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:31683*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31683*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10562:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:31686*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31686*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10563:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:31689*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31689*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10564:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:31692*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31692*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10565:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60364e and fs2 == 1 and fe2 == 0x01 and fm2 == 0x1225b6 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60364e; op2val:0x809225b6;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:31695*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31695*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10566:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6a800000; valaddr_reg:x3; val_offset:31698*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31698*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10567:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6a800001; valaddr_reg:x3; val_offset:31701*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31701*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10568:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6a800003; valaddr_reg:x3; val_offset:31704*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31704*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10569:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6a800007; valaddr_reg:x3; val_offset:31707*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31707*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10570:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6a80000f; valaddr_reg:x3; val_offset:31710*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31710*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10571:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6a80001f; valaddr_reg:x3; val_offset:31713*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31713*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10572:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6a80003f; valaddr_reg:x3; val_offset:31716*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31716*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10573:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6a80007f; valaddr_reg:x3; val_offset:31719*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31719*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10574:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6a8000ff; valaddr_reg:x3; val_offset:31722*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31722*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10575:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6a8001ff; valaddr_reg:x3; val_offset:31725*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31725*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10576:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6a8003ff; valaddr_reg:x3; val_offset:31728*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31728*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10577:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6a8007ff; valaddr_reg:x3; val_offset:31731*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31731*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10578:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6a800fff; valaddr_reg:x3; val_offset:31734*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31734*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10579:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6a801fff; valaddr_reg:x3; val_offset:31737*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31737*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10580:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6a803fff; valaddr_reg:x3; val_offset:31740*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31740*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10581:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6a807fff; valaddr_reg:x3; val_offset:31743*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31743*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10582:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6a80ffff; valaddr_reg:x3; val_offset:31746*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31746*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10583:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6a81ffff; valaddr_reg:x3; val_offset:31749*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31749*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10584:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6a83ffff; valaddr_reg:x3; val_offset:31752*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31752*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10585:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6a87ffff; valaddr_reg:x3; val_offset:31755*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31755*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10586:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6a8fffff; valaddr_reg:x3; val_offset:31758*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31758*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10587:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6a9fffff; valaddr_reg:x3; val_offset:31761*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31761*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10588:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6abfffff; valaddr_reg:x3; val_offset:31764*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31764*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10589:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6ac00000; valaddr_reg:x3; val_offset:31767*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31767*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10590:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6ae00000; valaddr_reg:x3; val_offset:31770*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31770*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10591:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6af00000; valaddr_reg:x3; val_offset:31773*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31773*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10592:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6af80000; valaddr_reg:x3; val_offset:31776*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31776*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10593:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6afc0000; valaddr_reg:x3; val_offset:31779*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31779*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10594:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6afe0000; valaddr_reg:x3; val_offset:31782*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31782*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10595:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6aff0000; valaddr_reg:x3; val_offset:31785*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31785*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10596:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6aff8000; valaddr_reg:x3; val_offset:31788*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31788*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10597:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6affc000; valaddr_reg:x3; val_offset:31791*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31791*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10598:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6affe000; valaddr_reg:x3; val_offset:31794*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31794*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10599:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6afff000; valaddr_reg:x3; val_offset:31797*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31797*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10600:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6afff800; valaddr_reg:x3; val_offset:31800*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31800*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10601:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6afffc00; valaddr_reg:x3; val_offset:31803*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31803*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10602:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6afffe00; valaddr_reg:x3; val_offset:31806*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31806*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10603:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6affff00; valaddr_reg:x3; val_offset:31809*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31809*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10604:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6affff80; valaddr_reg:x3; val_offset:31812*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31812*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10605:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6affffc0; valaddr_reg:x3; val_offset:31815*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31815*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10606:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6affffe0; valaddr_reg:x3; val_offset:31818*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31818*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10607:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6afffff0; valaddr_reg:x3; val_offset:31821*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31821*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10608:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6afffff8; valaddr_reg:x3; val_offset:31824*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31824*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10609:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6afffffc; valaddr_reg:x3; val_offset:31827*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31827*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10610:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6afffffe; valaddr_reg:x3; val_offset:31830*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31830*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10611:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x6affffff; valaddr_reg:x3; val_offset:31833*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31833*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10612:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x7f000001; valaddr_reg:x3; val_offset:31836*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31836*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10613:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x7f000003; valaddr_reg:x3; val_offset:31839*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31839*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10614:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x7f000007; valaddr_reg:x3; val_offset:31842*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31842*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10615:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x7f199999; valaddr_reg:x3; val_offset:31845*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31845*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10616:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x7f249249; valaddr_reg:x3; val_offset:31848*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31848*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10617:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x7f333333; valaddr_reg:x3; val_offset:31851*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31851*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10618:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:31854*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31854*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10619:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:31857*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31857*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10620:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x7f444444; valaddr_reg:x3; val_offset:31860*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31860*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10621:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:31863*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31863*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10622:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:31866*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31866*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10623:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x61098a and fs2 == 0 and fe2 == 0x81 and fm2 == 0x119c86 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e61098a; op2val:0x40919c86;
op3val:0x7f666666; valaddr_reg:x3; val_offset:31869*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 31869*0 + 3*82*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2120088559,32,FLEN)
NAN_BOXED(2157157689,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2667577344,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2667577345,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2667577347,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2667577351,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2667577359,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2667577375,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2667577407,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2667577471,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2667577599,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2667577855,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2667578367,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2667579391,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2667581439,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2667585535,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2667593727,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2667610111,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2667642879,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2667708415,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2667839487,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2668101631,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2668625919,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2669674495,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2671771647,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2671771648,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2673868800,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2674917376,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2675441664,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2675703808,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2675834880,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2675900416,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2675933184,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2675949568,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2675957760,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2675961856,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2675963904,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2675964928,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2675965440,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2675965696,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2675965824,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2675965888,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2675965920,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2675965936,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2675965944,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2675965948,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2675965950,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(2675965951,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2120234574,32,FLEN)
NAN_BOXED(2157061558,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1786773504,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1786773505,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1786773507,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1786773511,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1786773519,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1786773535,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1786773567,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1786773631,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1786773759,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1786774015,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1786774527,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1786775551,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1786777599,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1786781695,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1786789887,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1786806271,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1786839039,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1786904575,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1787035647,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1787297791,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1787822079,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1788870655,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1790967807,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1790967808,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1793064960,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1794113536,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1794637824,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1794899968,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1795031040,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1795096576,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1795129344,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1795145728,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1795153920,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1795158016,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1795160064,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1795161088,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1795161600,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1795161856,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1795161984,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1795162048,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1795162080,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1795162096,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1795162104,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1795162108,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1795162110,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(1795162111,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2120288650,32,FLEN)
NAN_BOXED(1083284614,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
