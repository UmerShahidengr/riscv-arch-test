
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_11008:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e0000ff; valaddr_reg:x3; val_offset:33024*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33024*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11009:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e0001ff; valaddr_reg:x3; val_offset:33027*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33027*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11010:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e0003ff; valaddr_reg:x3; val_offset:33030*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33030*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11011:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e0007ff; valaddr_reg:x3; val_offset:33033*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33033*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11012:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e000fff; valaddr_reg:x3; val_offset:33036*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33036*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11013:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e001fff; valaddr_reg:x3; val_offset:33039*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33039*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11014:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e003fff; valaddr_reg:x3; val_offset:33042*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33042*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11015:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e007fff; valaddr_reg:x3; val_offset:33045*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33045*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11016:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e00ffff; valaddr_reg:x3; val_offset:33048*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33048*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11017:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e01ffff; valaddr_reg:x3; val_offset:33051*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33051*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11018:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e03ffff; valaddr_reg:x3; val_offset:33054*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33054*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11019:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e07ffff; valaddr_reg:x3; val_offset:33057*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33057*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11020:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e0fffff; valaddr_reg:x3; val_offset:33060*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33060*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11021:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e1fffff; valaddr_reg:x3; val_offset:33063*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33063*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11022:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e3fffff; valaddr_reg:x3; val_offset:33066*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33066*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11023:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e400000; valaddr_reg:x3; val_offset:33069*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33069*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11024:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e600000; valaddr_reg:x3; val_offset:33072*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33072*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11025:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e700000; valaddr_reg:x3; val_offset:33075*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33075*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11026:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e780000; valaddr_reg:x3; val_offset:33078*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33078*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11027:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e7c0000; valaddr_reg:x3; val_offset:33081*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33081*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11028:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e7e0000; valaddr_reg:x3; val_offset:33084*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33084*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11029:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e7f0000; valaddr_reg:x3; val_offset:33087*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33087*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11030:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e7f8000; valaddr_reg:x3; val_offset:33090*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33090*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11031:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e7fc000; valaddr_reg:x3; val_offset:33093*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33093*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11032:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e7fe000; valaddr_reg:x3; val_offset:33096*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33096*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11033:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e7ff000; valaddr_reg:x3; val_offset:33099*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33099*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11034:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e7ff800; valaddr_reg:x3; val_offset:33102*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33102*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11035:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e7ffc00; valaddr_reg:x3; val_offset:33105*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33105*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11036:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e7ffe00; valaddr_reg:x3; val_offset:33108*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33108*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11037:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e7fff00; valaddr_reg:x3; val_offset:33111*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33111*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11038:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e7fff80; valaddr_reg:x3; val_offset:33114*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33114*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11039:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e7fffc0; valaddr_reg:x3; val_offset:33117*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33117*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11040:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e7fffe0; valaddr_reg:x3; val_offset:33120*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33120*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11041:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e7ffff0; valaddr_reg:x3; val_offset:33123*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33123*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11042:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e7ffff8; valaddr_reg:x3; val_offset:33126*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33126*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11043:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e7ffffc; valaddr_reg:x3; val_offset:33129*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33129*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11044:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e7ffffe; valaddr_reg:x3; val_offset:33132*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33132*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11045:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xdc and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x6e7fffff; valaddr_reg:x3; val_offset:33135*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33135*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11046:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x7f000001; valaddr_reg:x3; val_offset:33138*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33138*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11047:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x7f000003; valaddr_reg:x3; val_offset:33141*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33141*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11048:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x7f000007; valaddr_reg:x3; val_offset:33144*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33144*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11049:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x7f199999; valaddr_reg:x3; val_offset:33147*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33147*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11050:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x7f249249; valaddr_reg:x3; val_offset:33150*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33150*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11051:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x7f333333; valaddr_reg:x3; val_offset:33153*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33153*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11052:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:33156*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33156*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11053:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:33159*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33159*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11054:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x7f444444; valaddr_reg:x3; val_offset:33162*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33162*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11055:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:33165*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33165*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11056:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:33168*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33168*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11057:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x7f666666; valaddr_reg:x3; val_offset:33171*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33171*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11058:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:33174*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33174*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11059:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:33177*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33177*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11060:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:33180*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33180*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11061:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dc6d1 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x09cf5c and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dc6d1; op2val:0x4089cf5c;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:33183*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33183*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11062:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x24000000; valaddr_reg:x3; val_offset:33186*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33186*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11063:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x24000001; valaddr_reg:x3; val_offset:33189*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33189*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11064:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x24000003; valaddr_reg:x3; val_offset:33192*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33192*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11065:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x24000007; valaddr_reg:x3; val_offset:33195*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33195*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11066:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x2400000f; valaddr_reg:x3; val_offset:33198*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33198*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11067:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x2400001f; valaddr_reg:x3; val_offset:33201*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33201*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11068:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x2400003f; valaddr_reg:x3; val_offset:33204*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33204*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11069:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x2400007f; valaddr_reg:x3; val_offset:33207*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33207*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11070:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x240000ff; valaddr_reg:x3; val_offset:33210*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33210*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11071:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x240001ff; valaddr_reg:x3; val_offset:33213*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33213*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11072:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x240003ff; valaddr_reg:x3; val_offset:33216*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33216*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11073:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x240007ff; valaddr_reg:x3; val_offset:33219*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33219*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11074:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x24000fff; valaddr_reg:x3; val_offset:33222*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33222*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11075:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x24001fff; valaddr_reg:x3; val_offset:33225*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33225*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11076:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x24003fff; valaddr_reg:x3; val_offset:33228*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33228*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11077:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x24007fff; valaddr_reg:x3; val_offset:33231*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33231*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11078:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x2400ffff; valaddr_reg:x3; val_offset:33234*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33234*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11079:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x2401ffff; valaddr_reg:x3; val_offset:33237*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33237*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11080:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x2403ffff; valaddr_reg:x3; val_offset:33240*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33240*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11081:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x2407ffff; valaddr_reg:x3; val_offset:33243*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33243*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11082:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x240fffff; valaddr_reg:x3; val_offset:33246*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33246*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11083:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x241fffff; valaddr_reg:x3; val_offset:33249*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33249*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11084:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x243fffff; valaddr_reg:x3; val_offset:33252*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33252*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11085:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x24400000; valaddr_reg:x3; val_offset:33255*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33255*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11086:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x24600000; valaddr_reg:x3; val_offset:33258*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33258*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11087:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x24700000; valaddr_reg:x3; val_offset:33261*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33261*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11088:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x24780000; valaddr_reg:x3; val_offset:33264*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33264*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11089:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x247c0000; valaddr_reg:x3; val_offset:33267*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33267*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11090:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x247e0000; valaddr_reg:x3; val_offset:33270*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33270*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11091:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x247f0000; valaddr_reg:x3; val_offset:33273*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33273*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11092:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x247f8000; valaddr_reg:x3; val_offset:33276*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33276*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11093:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x247fc000; valaddr_reg:x3; val_offset:33279*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33279*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11094:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x247fe000; valaddr_reg:x3; val_offset:33282*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33282*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11095:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x247ff000; valaddr_reg:x3; val_offset:33285*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33285*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11096:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x247ff800; valaddr_reg:x3; val_offset:33288*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33288*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11097:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x247ffc00; valaddr_reg:x3; val_offset:33291*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33291*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11098:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x247ffe00; valaddr_reg:x3; val_offset:33294*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33294*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11099:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x247fff00; valaddr_reg:x3; val_offset:33297*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33297*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11100:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x247fff80; valaddr_reg:x3; val_offset:33300*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33300*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11101:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x247fffc0; valaddr_reg:x3; val_offset:33303*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33303*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11102:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x247fffe0; valaddr_reg:x3; val_offset:33306*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33306*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11103:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x247ffff0; valaddr_reg:x3; val_offset:33309*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33309*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11104:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x247ffff8; valaddr_reg:x3; val_offset:33312*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33312*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11105:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x247ffffc; valaddr_reg:x3; val_offset:33315*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33315*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11106:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x247ffffe; valaddr_reg:x3; val_offset:33318*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33318*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11107:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x48 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x247fffff; valaddr_reg:x3; val_offset:33321*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33321*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11108:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x3f800001; valaddr_reg:x3; val_offset:33324*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33324*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11109:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x3f800003; valaddr_reg:x3; val_offset:33327*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33327*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11110:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x3f800007; valaddr_reg:x3; val_offset:33330*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33330*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11111:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x3f999999; valaddr_reg:x3; val_offset:33333*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33333*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11112:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:33336*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33336*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11113:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:33339*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33339*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11114:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:33342*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33342*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11115:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:33345*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33345*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11116:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:33348*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33348*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11117:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:33351*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33351*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11118:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:33354*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33354*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11119:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:33357*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33357*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11120:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:33360*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33360*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11121:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:33363*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33363*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11122:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:33366*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33366*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11123:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6dd39b and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09c7f3 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6dd39b; op2val:0x89c7f3;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:33369*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33369*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11124:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x3f800001; valaddr_reg:x3; val_offset:33372*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33372*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11125:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x3f800003; valaddr_reg:x3; val_offset:33375*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33375*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11126:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x3f800007; valaddr_reg:x3; val_offset:33378*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33378*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11127:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x3f999999; valaddr_reg:x3; val_offset:33381*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33381*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11128:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:33384*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33384*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11129:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:33387*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33387*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11130:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:33390*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33390*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11131:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:33393*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33393*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11132:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:33396*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33396*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11133:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:33399*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33399*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11134:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:33402*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33402*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11135:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:33405*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33405*0 + 3*86*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1845494015,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1845494271,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1845494783,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1845495807,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1845497855,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1845501951,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1845510143,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1845526527,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1845559295,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1845624831,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1845755903,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1846018047,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1846542335,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1847590911,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1849688063,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1849688064,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1851785216,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1852833792,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1853358080,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1853620224,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1853751296,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1853816832,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1853849600,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1853865984,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1853874176,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1853878272,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1853880320,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1853881344,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1853881856,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1853882112,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1853882240,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1853882304,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1853882336,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1853882352,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1853882360,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1853882364,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1853882366,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(1853882367,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(2130706433,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(2130706435,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(2130706439,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(2132384153,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(2133103177,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(2134061875,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(2134301549,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(2134621115,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(2135180356,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(2135739596,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(2136698294,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(2137417318,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(2137896667,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(2139095032,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(2139095036,32,FLEN)
NAN_BOXED(2121123537,32,FLEN)
NAN_BOXED(1082773340,32,FLEN)
NAN_BOXED(2139095038,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(603979776,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(603979777,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(603979779,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(603979783,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(603979791,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(603979807,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(603979839,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(603979903,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(603980031,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(603980287,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(603980799,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(603981823,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(603983871,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(603987967,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(603996159,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(604012543,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(604045311,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(604110847,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(604241919,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(604504063,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(605028351,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(606076927,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(608174079,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(608174080,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(610271232,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(611319808,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(611844096,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(612106240,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(612237312,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(612302848,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(612335616,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(612352000,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(612360192,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(612364288,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(612366336,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(612367360,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(612367872,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(612368128,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(612368256,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(612368320,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(612368352,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(612368368,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(612368376,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(612368380,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(612368382,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(612368383,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2121126811,32,FLEN)
NAN_BOXED(9029619,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
