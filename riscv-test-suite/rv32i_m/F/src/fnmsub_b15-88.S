
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_11136:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:33408*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33408*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11137:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:33411*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33411*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11138:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:33414*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33414*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11139:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:33417*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33417*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11140:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x42000000; valaddr_reg:x3; val_offset:33420*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33420*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11141:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x42000001; valaddr_reg:x3; val_offset:33423*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33423*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11142:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x42000003; valaddr_reg:x3; val_offset:33426*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33426*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11143:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x42000007; valaddr_reg:x3; val_offset:33429*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33429*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11144:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x4200000f; valaddr_reg:x3; val_offset:33432*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33432*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11145:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x4200001f; valaddr_reg:x3; val_offset:33435*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33435*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11146:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x4200003f; valaddr_reg:x3; val_offset:33438*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33438*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11147:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x4200007f; valaddr_reg:x3; val_offset:33441*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33441*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11148:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x420000ff; valaddr_reg:x3; val_offset:33444*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33444*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11149:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x420001ff; valaddr_reg:x3; val_offset:33447*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33447*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11150:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x420003ff; valaddr_reg:x3; val_offset:33450*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33450*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11151:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x420007ff; valaddr_reg:x3; val_offset:33453*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33453*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11152:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x42000fff; valaddr_reg:x3; val_offset:33456*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33456*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11153:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x42001fff; valaddr_reg:x3; val_offset:33459*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33459*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11154:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x42003fff; valaddr_reg:x3; val_offset:33462*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33462*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11155:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x42007fff; valaddr_reg:x3; val_offset:33465*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33465*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11156:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x4200ffff; valaddr_reg:x3; val_offset:33468*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33468*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11157:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x4201ffff; valaddr_reg:x3; val_offset:33471*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33471*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11158:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x4203ffff; valaddr_reg:x3; val_offset:33474*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33474*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11159:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x4207ffff; valaddr_reg:x3; val_offset:33477*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33477*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11160:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x420fffff; valaddr_reg:x3; val_offset:33480*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33480*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11161:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x421fffff; valaddr_reg:x3; val_offset:33483*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33483*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11162:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x423fffff; valaddr_reg:x3; val_offset:33486*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33486*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11163:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x42400000; valaddr_reg:x3; val_offset:33489*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33489*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11164:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x42600000; valaddr_reg:x3; val_offset:33492*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33492*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11165:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x42700000; valaddr_reg:x3; val_offset:33495*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33495*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11166:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x42780000; valaddr_reg:x3; val_offset:33498*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33498*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11167:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x427c0000; valaddr_reg:x3; val_offset:33501*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33501*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11168:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x427e0000; valaddr_reg:x3; val_offset:33504*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33504*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11169:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x427f0000; valaddr_reg:x3; val_offset:33507*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33507*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11170:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x427f8000; valaddr_reg:x3; val_offset:33510*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33510*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11171:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x427fc000; valaddr_reg:x3; val_offset:33513*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33513*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11172:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x427fe000; valaddr_reg:x3; val_offset:33516*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33516*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11173:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x427ff000; valaddr_reg:x3; val_offset:33519*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33519*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11174:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x427ff800; valaddr_reg:x3; val_offset:33522*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33522*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11175:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x427ffc00; valaddr_reg:x3; val_offset:33525*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33525*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11176:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x427ffe00; valaddr_reg:x3; val_offset:33528*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33528*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11177:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x427fff00; valaddr_reg:x3; val_offset:33531*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33531*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11178:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x427fff80; valaddr_reg:x3; val_offset:33534*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33534*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11179:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x427fffc0; valaddr_reg:x3; val_offset:33537*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33537*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11180:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x427fffe0; valaddr_reg:x3; val_offset:33540*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33540*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11181:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x427ffff0; valaddr_reg:x3; val_offset:33543*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33543*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11182:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x427ffff8; valaddr_reg:x3; val_offset:33546*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33546*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11183:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x427ffffc; valaddr_reg:x3; val_offset:33549*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33549*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11184:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x427ffffe; valaddr_reg:x3; val_offset:33552*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33552*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11185:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6e17c2 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x09a083 and fs3 == 0 and fe3 == 0x84 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6e17c2; op2val:0x89a083;
op3val:0x427fffff; valaddr_reg:x3; val_offset:33555*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33555*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11186:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:33558*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33558*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11187:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:33561*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33561*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11188:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:33564*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33564*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11189:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:33567*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33567*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11190:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:33570*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33570*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11191:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:33573*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33573*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11192:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:33576*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33576*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11193:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:33579*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33579*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11194:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:33582*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33582*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11195:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:33585*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33585*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11196:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:33588*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33588*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11197:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:33591*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33591*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11198:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:33594*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33594*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11199:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:33597*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33597*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11200:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:33600*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33600*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11201:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:33603*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33603*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11202:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x89000000; valaddr_reg:x3; val_offset:33606*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33606*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11203:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x89000001; valaddr_reg:x3; val_offset:33609*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33609*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11204:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x89000003; valaddr_reg:x3; val_offset:33612*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33612*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11205:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x89000007; valaddr_reg:x3; val_offset:33615*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33615*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11206:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x8900000f; valaddr_reg:x3; val_offset:33618*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33618*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11207:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x8900001f; valaddr_reg:x3; val_offset:33621*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33621*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11208:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x8900003f; valaddr_reg:x3; val_offset:33624*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33624*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11209:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x8900007f; valaddr_reg:x3; val_offset:33627*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33627*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11210:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x890000ff; valaddr_reg:x3; val_offset:33630*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33630*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11211:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x890001ff; valaddr_reg:x3; val_offset:33633*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33633*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11212:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x890003ff; valaddr_reg:x3; val_offset:33636*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33636*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11213:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x890007ff; valaddr_reg:x3; val_offset:33639*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33639*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11214:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x89000fff; valaddr_reg:x3; val_offset:33642*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33642*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11215:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x89001fff; valaddr_reg:x3; val_offset:33645*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33645*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11216:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x89003fff; valaddr_reg:x3; val_offset:33648*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33648*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11217:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x89007fff; valaddr_reg:x3; val_offset:33651*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33651*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11218:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x8900ffff; valaddr_reg:x3; val_offset:33654*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33654*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11219:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x8901ffff; valaddr_reg:x3; val_offset:33657*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33657*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11220:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x8903ffff; valaddr_reg:x3; val_offset:33660*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33660*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11221:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x8907ffff; valaddr_reg:x3; val_offset:33663*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33663*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11222:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x890fffff; valaddr_reg:x3; val_offset:33666*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33666*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11223:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x891fffff; valaddr_reg:x3; val_offset:33669*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33669*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11224:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x893fffff; valaddr_reg:x3; val_offset:33672*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33672*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11225:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x89400000; valaddr_reg:x3; val_offset:33675*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33675*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11226:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x89600000; valaddr_reg:x3; val_offset:33678*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33678*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11227:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x89700000; valaddr_reg:x3; val_offset:33681*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33681*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11228:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x89780000; valaddr_reg:x3; val_offset:33684*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33684*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11229:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x897c0000; valaddr_reg:x3; val_offset:33687*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33687*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11230:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x897e0000; valaddr_reg:x3; val_offset:33690*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33690*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11231:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x897f0000; valaddr_reg:x3; val_offset:33693*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33693*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11232:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x897f8000; valaddr_reg:x3; val_offset:33696*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33696*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11233:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x897fc000; valaddr_reg:x3; val_offset:33699*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33699*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11234:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x897fe000; valaddr_reg:x3; val_offset:33702*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33702*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11235:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x897ff000; valaddr_reg:x3; val_offset:33705*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33705*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11236:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x897ff800; valaddr_reg:x3; val_offset:33708*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33708*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11237:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x897ffc00; valaddr_reg:x3; val_offset:33711*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33711*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11238:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x897ffe00; valaddr_reg:x3; val_offset:33714*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33714*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11239:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x897fff00; valaddr_reg:x3; val_offset:33717*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33717*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11240:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x897fff80; valaddr_reg:x3; val_offset:33720*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33720*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11241:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x897fffc0; valaddr_reg:x3; val_offset:33723*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33723*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11242:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x897fffe0; valaddr_reg:x3; val_offset:33726*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33726*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11243:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x897ffff0; valaddr_reg:x3; val_offset:33729*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33729*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11244:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x897ffff8; valaddr_reg:x3; val_offset:33732*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33732*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11245:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x897ffffc; valaddr_reg:x3; val_offset:33735*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33735*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11246:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x897ffffe; valaddr_reg:x3; val_offset:33738*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33738*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11247:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ff4bc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ff4bc; op2val:0x80000000;
op3val:0x897fffff; valaddr_reg:x3; val_offset:33741*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33741*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11248:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3d800000; valaddr_reg:x3; val_offset:33744*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33744*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11249:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3d800001; valaddr_reg:x3; val_offset:33747*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33747*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11250:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3d800003; valaddr_reg:x3; val_offset:33750*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33750*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11251:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3d800007; valaddr_reg:x3; val_offset:33753*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33753*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11252:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3d80000f; valaddr_reg:x3; val_offset:33756*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33756*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11253:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3d80001f; valaddr_reg:x3; val_offset:33759*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33759*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11254:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3d80003f; valaddr_reg:x3; val_offset:33762*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33762*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11255:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3d80007f; valaddr_reg:x3; val_offset:33765*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33765*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11256:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3d8000ff; valaddr_reg:x3; val_offset:33768*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33768*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11257:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3d8001ff; valaddr_reg:x3; val_offset:33771*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33771*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11258:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3d8003ff; valaddr_reg:x3; val_offset:33774*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33774*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11259:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3d8007ff; valaddr_reg:x3; val_offset:33777*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33777*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11260:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3d800fff; valaddr_reg:x3; val_offset:33780*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33780*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11261:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3d801fff; valaddr_reg:x3; val_offset:33783*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33783*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11262:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3d803fff; valaddr_reg:x3; val_offset:33786*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33786*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11263:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3d807fff; valaddr_reg:x3; val_offset:33789*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33789*0 + 3*87*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1107296256,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1107296257,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1107296259,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1107296263,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1107296271,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1107296287,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1107296319,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1107296383,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1107296511,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1107296767,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1107297279,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1107298303,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1107300351,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1107304447,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1107312639,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1107329023,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1107361791,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1107427327,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1107558399,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1107820543,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1108344831,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1109393407,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1111490559,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1111490560,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1113587712,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1114636288,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1115160576,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1115422720,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1115553792,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1115619328,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1115652096,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1115668480,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1115676672,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1115680768,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1115682816,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1115683840,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1115684352,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1115684608,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1115684736,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1115684800,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1115684832,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1115684848,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1115684856,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1115684860,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1115684862,32,FLEN)
NAN_BOXED(2121144258,32,FLEN)
NAN_BOXED(9019523,32,FLEN)
NAN_BOXED(1115684863,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872257,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872259,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872263,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2157549977,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2158269001,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159227699,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159467373,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2159786939,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160346180,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2160905420,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2161864118,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2162583142,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2163062491,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260856,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260860,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2164260862,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478592,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478593,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478595,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478599,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478607,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478623,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478655,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478719,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298478847,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298479103,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298479615,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298480639,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298482687,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298486783,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298494975,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298511359,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298544127,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298609663,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2298740735,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2299002879,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2299527167,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2300575743,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2302672895,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2302672896,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2304770048,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2305818624,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306342912,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306605056,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306736128,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306801664,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306834432,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306850816,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306859008,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306863104,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306865152,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306866176,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306866688,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306866944,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867072,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867136,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867168,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867184,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867192,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867196,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867198,32,FLEN)
NAN_BOXED(2121266364,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2306867199,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1031798784,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1031798785,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1031798787,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1031798791,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1031798799,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1031798815,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1031798847,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1031798911,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1031799039,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1031799295,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1031799807,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1031800831,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1031802879,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1031806975,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1031815167,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1031831551,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
