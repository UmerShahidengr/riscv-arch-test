
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_11264:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3d80ffff; valaddr_reg:x3; val_offset:33792*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33792*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11265:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3d81ffff; valaddr_reg:x3; val_offset:33795*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33795*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11266:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3d83ffff; valaddr_reg:x3; val_offset:33798*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33798*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11267:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3d87ffff; valaddr_reg:x3; val_offset:33801*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33801*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11268:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3d8fffff; valaddr_reg:x3; val_offset:33804*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33804*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11269:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3d9fffff; valaddr_reg:x3; val_offset:33807*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33807*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11270:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3dbfffff; valaddr_reg:x3; val_offset:33810*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33810*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11271:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3dc00000; valaddr_reg:x3; val_offset:33813*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33813*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11272:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3de00000; valaddr_reg:x3; val_offset:33816*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33816*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11273:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3df00000; valaddr_reg:x3; val_offset:33819*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33819*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11274:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3df80000; valaddr_reg:x3; val_offset:33822*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33822*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11275:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3dfc0000; valaddr_reg:x3; val_offset:33825*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33825*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11276:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3dfe0000; valaddr_reg:x3; val_offset:33828*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33828*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11277:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3dff0000; valaddr_reg:x3; val_offset:33831*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33831*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11278:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3dff8000; valaddr_reg:x3; val_offset:33834*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33834*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11279:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3dffc000; valaddr_reg:x3; val_offset:33837*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33837*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11280:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3dffe000; valaddr_reg:x3; val_offset:33840*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33840*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11281:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3dfff000; valaddr_reg:x3; val_offset:33843*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33843*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11282:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3dfff800; valaddr_reg:x3; val_offset:33846*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33846*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11283:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3dfffc00; valaddr_reg:x3; val_offset:33849*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33849*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11284:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3dfffe00; valaddr_reg:x3; val_offset:33852*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33852*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11285:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3dffff00; valaddr_reg:x3; val_offset:33855*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33855*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11286:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3dffff80; valaddr_reg:x3; val_offset:33858*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33858*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11287:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3dffffc0; valaddr_reg:x3; val_offset:33861*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33861*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11288:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3dffffe0; valaddr_reg:x3; val_offset:33864*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33864*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11289:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3dfffff0; valaddr_reg:x3; val_offset:33867*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33867*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11290:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3dfffff8; valaddr_reg:x3; val_offset:33870*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33870*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11291:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3dfffffc; valaddr_reg:x3; val_offset:33873*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33873*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11292:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3dfffffe; valaddr_reg:x3; val_offset:33876*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33876*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11293:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3dffffff; valaddr_reg:x3; val_offset:33879*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33879*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11294:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3f800001; valaddr_reg:x3; val_offset:33882*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33882*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11295:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3f800003; valaddr_reg:x3; val_offset:33885*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33885*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11296:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3f800007; valaddr_reg:x3; val_offset:33888*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33888*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11297:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3f999999; valaddr_reg:x3; val_offset:33891*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33891*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11298:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:33894*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33894*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11299:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:33897*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33897*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11300:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:33900*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33900*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11301:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:33903*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33903*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11302:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:33906*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33906*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11303:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:33909*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33909*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11304:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:33912*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33912*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11305:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:33915*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33915*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11306:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:33918*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33918*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11307:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:33921*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33921*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11308:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:33924*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33924*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11309:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70218d and fs2 == 0 and fe2 == 0x01 and fm2 == 0x087574 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70218d; op2val:0x887574;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:33927*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33927*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11310:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:33930*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33930*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11311:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:33933*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33933*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11312:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:33936*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33936*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11313:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:33939*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33939*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11314:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:33942*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33942*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11315:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:33945*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33945*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11316:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:33948*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33948*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11317:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:33951*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33951*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11318:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:33954*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33954*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11319:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:33957*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33957*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11320:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:33960*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33960*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11321:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:33963*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33963*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11322:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:33966*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33966*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11323:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:33969*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33969*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11324:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:33972*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33972*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11325:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:33975*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33975*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11326:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f000000; valaddr_reg:x3; val_offset:33978*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33978*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11327:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f000001; valaddr_reg:x3; val_offset:33981*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33981*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11328:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f000003; valaddr_reg:x3; val_offset:33984*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33984*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11329:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f000007; valaddr_reg:x3; val_offset:33987*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33987*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11330:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f00000f; valaddr_reg:x3; val_offset:33990*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33990*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11331:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f00001f; valaddr_reg:x3; val_offset:33993*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33993*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11332:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f00003f; valaddr_reg:x3; val_offset:33996*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33996*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11333:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f00007f; valaddr_reg:x3; val_offset:33999*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33999*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11334:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f0000ff; valaddr_reg:x3; val_offset:34002*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34002*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11335:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f0001ff; valaddr_reg:x3; val_offset:34005*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34005*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11336:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f0003ff; valaddr_reg:x3; val_offset:34008*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34008*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11337:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f0007ff; valaddr_reg:x3; val_offset:34011*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34011*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11338:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f000fff; valaddr_reg:x3; val_offset:34014*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34014*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11339:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f001fff; valaddr_reg:x3; val_offset:34017*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34017*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11340:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f003fff; valaddr_reg:x3; val_offset:34020*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34020*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11341:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f007fff; valaddr_reg:x3; val_offset:34023*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34023*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11342:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f00ffff; valaddr_reg:x3; val_offset:34026*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34026*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11343:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f01ffff; valaddr_reg:x3; val_offset:34029*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34029*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11344:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f03ffff; valaddr_reg:x3; val_offset:34032*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34032*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11345:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f07ffff; valaddr_reg:x3; val_offset:34035*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34035*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11346:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f0fffff; valaddr_reg:x3; val_offset:34038*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34038*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11347:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f1fffff; valaddr_reg:x3; val_offset:34041*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34041*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11348:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f3fffff; valaddr_reg:x3; val_offset:34044*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34044*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11349:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f400000; valaddr_reg:x3; val_offset:34047*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34047*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11350:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f600000; valaddr_reg:x3; val_offset:34050*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34050*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11351:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f700000; valaddr_reg:x3; val_offset:34053*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34053*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11352:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f780000; valaddr_reg:x3; val_offset:34056*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34056*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11353:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f7c0000; valaddr_reg:x3; val_offset:34059*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34059*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11354:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f7e0000; valaddr_reg:x3; val_offset:34062*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34062*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11355:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f7f0000; valaddr_reg:x3; val_offset:34065*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34065*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11356:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f7f8000; valaddr_reg:x3; val_offset:34068*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34068*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11357:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f7fc000; valaddr_reg:x3; val_offset:34071*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34071*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11358:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f7fe000; valaddr_reg:x3; val_offset:34074*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34074*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11359:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f7ff000; valaddr_reg:x3; val_offset:34077*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34077*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11360:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f7ff800; valaddr_reg:x3; val_offset:34080*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34080*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11361:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f7ffc00; valaddr_reg:x3; val_offset:34083*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34083*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11362:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f7ffe00; valaddr_reg:x3; val_offset:34086*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34086*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11363:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f7fff00; valaddr_reg:x3; val_offset:34089*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34089*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11364:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f7fff80; valaddr_reg:x3; val_offset:34092*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34092*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11365:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f7fffc0; valaddr_reg:x3; val_offset:34095*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34095*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11366:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f7fffe0; valaddr_reg:x3; val_offset:34098*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34098*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11367:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f7ffff0; valaddr_reg:x3; val_offset:34101*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34101*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11368:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f7ffff8; valaddr_reg:x3; val_offset:34104*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34104*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11369:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f7ffffc; valaddr_reg:x3; val_offset:34107*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34107*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11370:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f7ffffe; valaddr_reg:x3; val_offset:34110*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34110*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11371:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x70b43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e70b43d; op2val:0x80000000;
op3val:0x8f7fffff; valaddr_reg:x3; val_offset:34113*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34113*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11372:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x710596 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x07f459 and fs3 == 0 and fe3 == 0x52 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e710596; op2val:0x87f459;
op3val:0x29000000; valaddr_reg:x3; val_offset:34116*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34116*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11373:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x710596 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x07f459 and fs3 == 0 and fe3 == 0x52 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e710596; op2val:0x87f459;
op3val:0x29000001; valaddr_reg:x3; val_offset:34119*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34119*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11374:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x710596 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x07f459 and fs3 == 0 and fe3 == 0x52 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e710596; op2val:0x87f459;
op3val:0x29000003; valaddr_reg:x3; val_offset:34122*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34122*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11375:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x710596 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x07f459 and fs3 == 0 and fe3 == 0x52 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e710596; op2val:0x87f459;
op3val:0x29000007; valaddr_reg:x3; val_offset:34125*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34125*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11376:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x710596 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x07f459 and fs3 == 0 and fe3 == 0x52 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e710596; op2val:0x87f459;
op3val:0x2900000f; valaddr_reg:x3; val_offset:34128*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34128*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11377:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x710596 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x07f459 and fs3 == 0 and fe3 == 0x52 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e710596; op2val:0x87f459;
op3val:0x2900001f; valaddr_reg:x3; val_offset:34131*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34131*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11378:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x710596 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x07f459 and fs3 == 0 and fe3 == 0x52 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e710596; op2val:0x87f459;
op3val:0x2900003f; valaddr_reg:x3; val_offset:34134*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34134*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11379:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x710596 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x07f459 and fs3 == 0 and fe3 == 0x52 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e710596; op2val:0x87f459;
op3val:0x2900007f; valaddr_reg:x3; val_offset:34137*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34137*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11380:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x710596 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x07f459 and fs3 == 0 and fe3 == 0x52 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e710596; op2val:0x87f459;
op3val:0x290000ff; valaddr_reg:x3; val_offset:34140*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34140*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11381:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x710596 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x07f459 and fs3 == 0 and fe3 == 0x52 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e710596; op2val:0x87f459;
op3val:0x290001ff; valaddr_reg:x3; val_offset:34143*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34143*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11382:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x710596 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x07f459 and fs3 == 0 and fe3 == 0x52 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e710596; op2val:0x87f459;
op3val:0x290003ff; valaddr_reg:x3; val_offset:34146*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34146*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11383:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x710596 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x07f459 and fs3 == 0 and fe3 == 0x52 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e710596; op2val:0x87f459;
op3val:0x290007ff; valaddr_reg:x3; val_offset:34149*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34149*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11384:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x710596 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x07f459 and fs3 == 0 and fe3 == 0x52 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e710596; op2val:0x87f459;
op3val:0x29000fff; valaddr_reg:x3; val_offset:34152*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34152*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11385:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x710596 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x07f459 and fs3 == 0 and fe3 == 0x52 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e710596; op2val:0x87f459;
op3val:0x29001fff; valaddr_reg:x3; val_offset:34155*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34155*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11386:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x710596 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x07f459 and fs3 == 0 and fe3 == 0x52 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e710596; op2val:0x87f459;
op3val:0x29003fff; valaddr_reg:x3; val_offset:34158*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34158*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11387:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x710596 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x07f459 and fs3 == 0 and fe3 == 0x52 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e710596; op2val:0x87f459;
op3val:0x29007fff; valaddr_reg:x3; val_offset:34161*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34161*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11388:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x710596 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x07f459 and fs3 == 0 and fe3 == 0x52 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e710596; op2val:0x87f459;
op3val:0x2900ffff; valaddr_reg:x3; val_offset:34164*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34164*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11389:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x710596 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x07f459 and fs3 == 0 and fe3 == 0x52 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e710596; op2val:0x87f459;
op3val:0x2901ffff; valaddr_reg:x3; val_offset:34167*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34167*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11390:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x710596 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x07f459 and fs3 == 0 and fe3 == 0x52 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e710596; op2val:0x87f459;
op3val:0x2903ffff; valaddr_reg:x3; val_offset:34170*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34170*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11391:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x710596 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x07f459 and fs3 == 0 and fe3 == 0x52 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e710596; op2val:0x87f459;
op3val:0x2907ffff; valaddr_reg:x3; val_offset:34173*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34173*0 + 3*88*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1031864319,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1031929855,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1032060927,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1032323071,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1032847359,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1033895935,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1035993087,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1035993088,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1038090240,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1039138816,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1039663104,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1039925248,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1040056320,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1040121856,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1040154624,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1040171008,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1040179200,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1040183296,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1040185344,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1040186368,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1040186880,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1040187136,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1040187264,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1040187328,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1040187360,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1040187376,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1040187384,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1040187388,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1040187390,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1040187391,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2121277837,32,FLEN)
NAN_BOXED(8942964,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141888,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141889,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141891,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141895,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141903,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141919,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399141951,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142015,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142143,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142399,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399142911,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399143935,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399145983,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399150079,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399158271,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399174655,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399207423,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399272959,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399404031,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2399666175,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2400190463,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2401239039,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2403336191,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2403336192,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2405433344,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2406481920,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407006208,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407268352,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407399424,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407464960,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407497728,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407514112,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407522304,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407526400,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407528448,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407529472,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407529984,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530240,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530368,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530432,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530464,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530480,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530488,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530492,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530494,32,FLEN)
NAN_BOXED(2121315389,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2407530495,32,FLEN)
NAN_BOXED(2121336214,32,FLEN)
NAN_BOXED(8909913,32,FLEN)
NAN_BOXED(687865856,32,FLEN)
NAN_BOXED(2121336214,32,FLEN)
NAN_BOXED(8909913,32,FLEN)
NAN_BOXED(687865857,32,FLEN)
NAN_BOXED(2121336214,32,FLEN)
NAN_BOXED(8909913,32,FLEN)
NAN_BOXED(687865859,32,FLEN)
NAN_BOXED(2121336214,32,FLEN)
NAN_BOXED(8909913,32,FLEN)
NAN_BOXED(687865863,32,FLEN)
NAN_BOXED(2121336214,32,FLEN)
NAN_BOXED(8909913,32,FLEN)
NAN_BOXED(687865871,32,FLEN)
NAN_BOXED(2121336214,32,FLEN)
NAN_BOXED(8909913,32,FLEN)
NAN_BOXED(687865887,32,FLEN)
NAN_BOXED(2121336214,32,FLEN)
NAN_BOXED(8909913,32,FLEN)
NAN_BOXED(687865919,32,FLEN)
NAN_BOXED(2121336214,32,FLEN)
NAN_BOXED(8909913,32,FLEN)
NAN_BOXED(687865983,32,FLEN)
NAN_BOXED(2121336214,32,FLEN)
NAN_BOXED(8909913,32,FLEN)
NAN_BOXED(687866111,32,FLEN)
NAN_BOXED(2121336214,32,FLEN)
NAN_BOXED(8909913,32,FLEN)
NAN_BOXED(687866367,32,FLEN)
NAN_BOXED(2121336214,32,FLEN)
NAN_BOXED(8909913,32,FLEN)
NAN_BOXED(687866879,32,FLEN)
NAN_BOXED(2121336214,32,FLEN)
NAN_BOXED(8909913,32,FLEN)
NAN_BOXED(687867903,32,FLEN)
NAN_BOXED(2121336214,32,FLEN)
NAN_BOXED(8909913,32,FLEN)
NAN_BOXED(687869951,32,FLEN)
NAN_BOXED(2121336214,32,FLEN)
NAN_BOXED(8909913,32,FLEN)
NAN_BOXED(687874047,32,FLEN)
NAN_BOXED(2121336214,32,FLEN)
NAN_BOXED(8909913,32,FLEN)
NAN_BOXED(687882239,32,FLEN)
NAN_BOXED(2121336214,32,FLEN)
NAN_BOXED(8909913,32,FLEN)
NAN_BOXED(687898623,32,FLEN)
NAN_BOXED(2121336214,32,FLEN)
NAN_BOXED(8909913,32,FLEN)
NAN_BOXED(687931391,32,FLEN)
NAN_BOXED(2121336214,32,FLEN)
NAN_BOXED(8909913,32,FLEN)
NAN_BOXED(687996927,32,FLEN)
NAN_BOXED(2121336214,32,FLEN)
NAN_BOXED(8909913,32,FLEN)
NAN_BOXED(688127999,32,FLEN)
NAN_BOXED(2121336214,32,FLEN)
NAN_BOXED(8909913,32,FLEN)
NAN_BOXED(688390143,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
