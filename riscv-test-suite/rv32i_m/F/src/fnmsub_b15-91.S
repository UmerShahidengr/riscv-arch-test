
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_11520:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:34560*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34560*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11521:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:34563*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34563*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11522:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:34566*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34566*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11523:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x3fffff; valaddr_reg:x3; val_offset:34569*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34569*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11524:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x400000; valaddr_reg:x3; val_offset:34572*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34572*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11525:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:34575*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34575*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11526:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:34578*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34578*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11527:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:34581*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34581*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11528:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x600000; valaddr_reg:x3; val_offset:34584*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34584*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11529:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:34587*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34587*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11530:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:34590*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34590*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11531:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x700000; valaddr_reg:x3; val_offset:34593*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34593*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11532:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x780000; valaddr_reg:x3; val_offset:34596*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34596*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11533:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x7c0000; valaddr_reg:x3; val_offset:34599*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34599*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11534:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x7e0000; valaddr_reg:x3; val_offset:34602*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34602*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11535:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x7f0000; valaddr_reg:x3; val_offset:34605*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34605*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11536:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x7f8000; valaddr_reg:x3; val_offset:34608*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34608*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11537:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x7fc000; valaddr_reg:x3; val_offset:34611*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34611*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11538:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x7fe000; valaddr_reg:x3; val_offset:34614*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34614*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11539:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x7ff000; valaddr_reg:x3; val_offset:34617*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34617*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11540:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x7ff800; valaddr_reg:x3; val_offset:34620*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34620*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11541:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x7ffc00; valaddr_reg:x3; val_offset:34623*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34623*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11542:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x7ffe00; valaddr_reg:x3; val_offset:34626*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34626*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11543:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x7fff00; valaddr_reg:x3; val_offset:34629*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34629*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11544:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x7fff80; valaddr_reg:x3; val_offset:34632*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34632*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11545:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x7fffc0; valaddr_reg:x3; val_offset:34635*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34635*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11546:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x7fffe0; valaddr_reg:x3; val_offset:34638*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34638*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11547:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x7ffff0; valaddr_reg:x3; val_offset:34641*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34641*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11548:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:34644*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34644*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11549:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:34647*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34647*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11550:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:34650*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34650*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11551:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x71e169 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e71e169; op2val:0x0;
op3val:0x7fffff; valaddr_reg:x3; val_offset:34653*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34653*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11552:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xbf800001; valaddr_reg:x3; val_offset:34656*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34656*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11553:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xbf800003; valaddr_reg:x3; val_offset:34659*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34659*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11554:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xbf800007; valaddr_reg:x3; val_offset:34662*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34662*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11555:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xbf999999; valaddr_reg:x3; val_offset:34665*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34665*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11556:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:34668*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34668*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11557:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:34671*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34671*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11558:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:34674*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34674*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11559:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:34677*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34677*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11560:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:34680*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34680*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11561:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:34683*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34683*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11562:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:34686*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34686*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11563:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:34689*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34689*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11564:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:34692*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34692*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11565:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:34695*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34695*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11566:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:34698*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34698*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11567:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:34701*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34701*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11568:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5800000; valaddr_reg:x3; val_offset:34704*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34704*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11569:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5800001; valaddr_reg:x3; val_offset:34707*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34707*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11570:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5800003; valaddr_reg:x3; val_offset:34710*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34710*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11571:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5800007; valaddr_reg:x3; val_offset:34713*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34713*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11572:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc580000f; valaddr_reg:x3; val_offset:34716*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34716*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11573:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc580001f; valaddr_reg:x3; val_offset:34719*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34719*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11574:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc580003f; valaddr_reg:x3; val_offset:34722*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34722*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11575:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc580007f; valaddr_reg:x3; val_offset:34725*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34725*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11576:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc58000ff; valaddr_reg:x3; val_offset:34728*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34728*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11577:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc58001ff; valaddr_reg:x3; val_offset:34731*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34731*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11578:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc58003ff; valaddr_reg:x3; val_offset:34734*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34734*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11579:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc58007ff; valaddr_reg:x3; val_offset:34737*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34737*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11580:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5800fff; valaddr_reg:x3; val_offset:34740*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34740*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11581:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5801fff; valaddr_reg:x3; val_offset:34743*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34743*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11582:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5803fff; valaddr_reg:x3; val_offset:34746*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34746*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11583:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5807fff; valaddr_reg:x3; val_offset:34749*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34749*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11584:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc580ffff; valaddr_reg:x3; val_offset:34752*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34752*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11585:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc581ffff; valaddr_reg:x3; val_offset:34755*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34755*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11586:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc583ffff; valaddr_reg:x3; val_offset:34758*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34758*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11587:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc587ffff; valaddr_reg:x3; val_offset:34761*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34761*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11588:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc58fffff; valaddr_reg:x3; val_offset:34764*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34764*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11589:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc59fffff; valaddr_reg:x3; val_offset:34767*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34767*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11590:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5bfffff; valaddr_reg:x3; val_offset:34770*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34770*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11591:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5c00000; valaddr_reg:x3; val_offset:34773*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34773*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11592:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5e00000; valaddr_reg:x3; val_offset:34776*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34776*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11593:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5f00000; valaddr_reg:x3; val_offset:34779*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34779*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11594:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5f80000; valaddr_reg:x3; val_offset:34782*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34782*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11595:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5fc0000; valaddr_reg:x3; val_offset:34785*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34785*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11596:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5fe0000; valaddr_reg:x3; val_offset:34788*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34788*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11597:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5ff0000; valaddr_reg:x3; val_offset:34791*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34791*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11598:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5ff8000; valaddr_reg:x3; val_offset:34794*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34794*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11599:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5ffc000; valaddr_reg:x3; val_offset:34797*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34797*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11600:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5ffe000; valaddr_reg:x3; val_offset:34800*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34800*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11601:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5fff000; valaddr_reg:x3; val_offset:34803*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34803*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11602:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5fff800; valaddr_reg:x3; val_offset:34806*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34806*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11603:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5fffc00; valaddr_reg:x3; val_offset:34809*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34809*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11604:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5fffe00; valaddr_reg:x3; val_offset:34812*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34812*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11605:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5ffff00; valaddr_reg:x3; val_offset:34815*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34815*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11606:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5ffff80; valaddr_reg:x3; val_offset:34818*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34818*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11607:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5ffffc0; valaddr_reg:x3; val_offset:34821*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34821*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11608:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5ffffe0; valaddr_reg:x3; val_offset:34824*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34824*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11609:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5fffff0; valaddr_reg:x3; val_offset:34827*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34827*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11610:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5fffff8; valaddr_reg:x3; val_offset:34830*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34830*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11611:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5fffffc; valaddr_reg:x3; val_offset:34833*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34833*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11612:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5fffffe; valaddr_reg:x3; val_offset:34836*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34836*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11613:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729bb9 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0710c1 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729bb9; op2val:0x808710c1;
op3val:0xc5ffffff; valaddr_reg:x3; val_offset:34839*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34839*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11614:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d000000; valaddr_reg:x3; val_offset:34842*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34842*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11615:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d000001; valaddr_reg:x3; val_offset:34845*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34845*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11616:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d000003; valaddr_reg:x3; val_offset:34848*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34848*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11617:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d000007; valaddr_reg:x3; val_offset:34851*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34851*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11618:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d00000f; valaddr_reg:x3; val_offset:34854*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34854*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11619:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d00001f; valaddr_reg:x3; val_offset:34857*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34857*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11620:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d00003f; valaddr_reg:x3; val_offset:34860*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34860*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11621:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d00007f; valaddr_reg:x3; val_offset:34863*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34863*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11622:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d0000ff; valaddr_reg:x3; val_offset:34866*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34866*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11623:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d0001ff; valaddr_reg:x3; val_offset:34869*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34869*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11624:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d0003ff; valaddr_reg:x3; val_offset:34872*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34872*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11625:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d0007ff; valaddr_reg:x3; val_offset:34875*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34875*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11626:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d000fff; valaddr_reg:x3; val_offset:34878*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34878*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11627:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d001fff; valaddr_reg:x3; val_offset:34881*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34881*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11628:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d003fff; valaddr_reg:x3; val_offset:34884*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34884*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11629:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d007fff; valaddr_reg:x3; val_offset:34887*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34887*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11630:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d00ffff; valaddr_reg:x3; val_offset:34890*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34890*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11631:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d01ffff; valaddr_reg:x3; val_offset:34893*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34893*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11632:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d03ffff; valaddr_reg:x3; val_offset:34896*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34896*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11633:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d07ffff; valaddr_reg:x3; val_offset:34899*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34899*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11634:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d0fffff; valaddr_reg:x3; val_offset:34902*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34902*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11635:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d1fffff; valaddr_reg:x3; val_offset:34905*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34905*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11636:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d3fffff; valaddr_reg:x3; val_offset:34908*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34908*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11637:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d400000; valaddr_reg:x3; val_offset:34911*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34911*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11638:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d600000; valaddr_reg:x3; val_offset:34914*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34914*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11639:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d700000; valaddr_reg:x3; val_offset:34917*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34917*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11640:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d780000; valaddr_reg:x3; val_offset:34920*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34920*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11641:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d7c0000; valaddr_reg:x3; val_offset:34923*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34923*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11642:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d7e0000; valaddr_reg:x3; val_offset:34926*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34926*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11643:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d7f0000; valaddr_reg:x3; val_offset:34929*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34929*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11644:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d7f8000; valaddr_reg:x3; val_offset:34932*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34932*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11645:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d7fc000; valaddr_reg:x3; val_offset:34935*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34935*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11646:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d7fe000; valaddr_reg:x3; val_offset:34938*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34938*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11647:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72a5cd and fs2 == 0 and fe2 == 0x81 and fm2 == 0x070b24 and fs3 == 0 and fe3 == 0xda and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72a5cd; op2val:0x40870b24;
op3val:0x6d7ff000; valaddr_reg:x3; val_offset:34941*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34941*0 + 3*90*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4194303,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4194304,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6291456,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7340032,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7864320,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8126464,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8257536,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8323072,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8355840,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8372224,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8380416,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8384512,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8386560,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8387584,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388096,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388352,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388480,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388544,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388576,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388592,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2121392489,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388607,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3212836865,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3212836867,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3212836871,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3214514585,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3215233609,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3216192307,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3216431981,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3216751547,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3217310788,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3217870028,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3218828726,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3219547750,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3220027099,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3221225464,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3221225468,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3221225470,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3313500160,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3313500161,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3313500163,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3313500167,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3313500175,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3313500191,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3313500223,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3313500287,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3313500415,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3313500671,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3313501183,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3313502207,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3313504255,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3313508351,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3313516543,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3313532927,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3313565695,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3313631231,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3313762303,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3314024447,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3314548735,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3315597311,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3317694463,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3317694464,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3319791616,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3320840192,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3321364480,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3321626624,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3321757696,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3321823232,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3321856000,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3321872384,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3321880576,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3321884672,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3321886720,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3321887744,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3321888256,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3321888512,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3321888640,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3321888704,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3321888736,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3321888752,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3321888760,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3321888764,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3321888766,32,FLEN)
NAN_BOXED(2121440185,32,FLEN)
NAN_BOXED(2156335297,32,FLEN)
NAN_BOXED(3321888767,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1828716544,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1828716545,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1828716547,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1828716551,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1828716559,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1828716575,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1828716607,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1828716671,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1828716799,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1828717055,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1828717567,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1828718591,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1828720639,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1828724735,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1828732927,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1828749311,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1828782079,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1828847615,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1828978687,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1829240831,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1829765119,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1830813695,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1832910847,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1832910848,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1835008000,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1836056576,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1836580864,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1836843008,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1836974080,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1837039616,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1837072384,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1837088768,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1837096960,32,FLEN)
NAN_BOXED(2121442765,32,FLEN)
NAN_BOXED(1082592036,32,FLEN)
NAN_BOXED(1837101056,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
