
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_11904:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774515 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0484e8 and fs3 == 0 and fe3 == 0x8c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e774515; op2val:0x8484e8;
op3val:0x46780000; valaddr_reg:x3; val_offset:35712*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35712*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11905:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774515 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0484e8 and fs3 == 0 and fe3 == 0x8c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e774515; op2val:0x8484e8;
op3val:0x467c0000; valaddr_reg:x3; val_offset:35715*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35715*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11906:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774515 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0484e8 and fs3 == 0 and fe3 == 0x8c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e774515; op2val:0x8484e8;
op3val:0x467e0000; valaddr_reg:x3; val_offset:35718*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35718*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11907:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774515 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0484e8 and fs3 == 0 and fe3 == 0x8c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e774515; op2val:0x8484e8;
op3val:0x467f0000; valaddr_reg:x3; val_offset:35721*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35721*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11908:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774515 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0484e8 and fs3 == 0 and fe3 == 0x8c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e774515; op2val:0x8484e8;
op3val:0x467f8000; valaddr_reg:x3; val_offset:35724*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35724*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11909:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774515 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0484e8 and fs3 == 0 and fe3 == 0x8c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e774515; op2val:0x8484e8;
op3val:0x467fc000; valaddr_reg:x3; val_offset:35727*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35727*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11910:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774515 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0484e8 and fs3 == 0 and fe3 == 0x8c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e774515; op2val:0x8484e8;
op3val:0x467fe000; valaddr_reg:x3; val_offset:35730*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35730*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11911:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774515 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0484e8 and fs3 == 0 and fe3 == 0x8c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e774515; op2val:0x8484e8;
op3val:0x467ff000; valaddr_reg:x3; val_offset:35733*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35733*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11912:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774515 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0484e8 and fs3 == 0 and fe3 == 0x8c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e774515; op2val:0x8484e8;
op3val:0x467ff800; valaddr_reg:x3; val_offset:35736*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35736*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11913:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774515 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0484e8 and fs3 == 0 and fe3 == 0x8c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e774515; op2val:0x8484e8;
op3val:0x467ffc00; valaddr_reg:x3; val_offset:35739*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35739*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11914:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774515 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0484e8 and fs3 == 0 and fe3 == 0x8c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e774515; op2val:0x8484e8;
op3val:0x467ffe00; valaddr_reg:x3; val_offset:35742*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35742*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11915:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774515 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0484e8 and fs3 == 0 and fe3 == 0x8c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e774515; op2val:0x8484e8;
op3val:0x467fff00; valaddr_reg:x3; val_offset:35745*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35745*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11916:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774515 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0484e8 and fs3 == 0 and fe3 == 0x8c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e774515; op2val:0x8484e8;
op3val:0x467fff80; valaddr_reg:x3; val_offset:35748*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35748*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11917:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774515 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0484e8 and fs3 == 0 and fe3 == 0x8c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e774515; op2val:0x8484e8;
op3val:0x467fffc0; valaddr_reg:x3; val_offset:35751*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35751*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11918:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774515 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0484e8 and fs3 == 0 and fe3 == 0x8c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e774515; op2val:0x8484e8;
op3val:0x467fffe0; valaddr_reg:x3; val_offset:35754*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35754*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11919:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774515 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0484e8 and fs3 == 0 and fe3 == 0x8c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e774515; op2val:0x8484e8;
op3val:0x467ffff0; valaddr_reg:x3; val_offset:35757*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35757*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11920:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774515 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0484e8 and fs3 == 0 and fe3 == 0x8c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e774515; op2val:0x8484e8;
op3val:0x467ffff8; valaddr_reg:x3; val_offset:35760*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35760*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11921:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774515 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0484e8 and fs3 == 0 and fe3 == 0x8c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e774515; op2val:0x8484e8;
op3val:0x467ffffc; valaddr_reg:x3; val_offset:35763*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35763*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11922:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774515 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0484e8 and fs3 == 0 and fe3 == 0x8c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e774515; op2val:0x8484e8;
op3val:0x467ffffe; valaddr_reg:x3; val_offset:35766*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35766*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11923:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x774515 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x0484e8 and fs3 == 0 and fe3 == 0x8c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e774515; op2val:0x8484e8;
op3val:0x467fffff; valaddr_reg:x3; val_offset:35769*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35769*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11924:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:35772*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35772*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11925:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:35775*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35775*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11926:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:35778*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35778*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11927:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:35781*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35781*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11928:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:35784*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35784*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11929:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:35787*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35787*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11930:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:35790*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35790*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11931:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:35793*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35793*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11932:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:35796*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35796*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11933:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:35799*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35799*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11934:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:35802*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35802*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11935:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:35805*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35805*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11936:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:35808*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35808*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11937:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:35811*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35811*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11938:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:35814*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35814*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11939:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:35817*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35817*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11940:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x88000000; valaddr_reg:x3; val_offset:35820*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35820*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11941:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x88000001; valaddr_reg:x3; val_offset:35823*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35823*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11942:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x88000003; valaddr_reg:x3; val_offset:35826*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35826*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11943:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x88000007; valaddr_reg:x3; val_offset:35829*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35829*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11944:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x8800000f; valaddr_reg:x3; val_offset:35832*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35832*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11945:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x8800001f; valaddr_reg:x3; val_offset:35835*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35835*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11946:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x8800003f; valaddr_reg:x3; val_offset:35838*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35838*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11947:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x8800007f; valaddr_reg:x3; val_offset:35841*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35841*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11948:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x880000ff; valaddr_reg:x3; val_offset:35844*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35844*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11949:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x880001ff; valaddr_reg:x3; val_offset:35847*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35847*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11950:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x880003ff; valaddr_reg:x3; val_offset:35850*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35850*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11951:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x880007ff; valaddr_reg:x3; val_offset:35853*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35853*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11952:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x88000fff; valaddr_reg:x3; val_offset:35856*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35856*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11953:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x88001fff; valaddr_reg:x3; val_offset:35859*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35859*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11954:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x88003fff; valaddr_reg:x3; val_offset:35862*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35862*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11955:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x88007fff; valaddr_reg:x3; val_offset:35865*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35865*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11956:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x8800ffff; valaddr_reg:x3; val_offset:35868*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35868*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11957:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x8801ffff; valaddr_reg:x3; val_offset:35871*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35871*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11958:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x8803ffff; valaddr_reg:x3; val_offset:35874*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35874*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11959:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x8807ffff; valaddr_reg:x3; val_offset:35877*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35877*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11960:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x880fffff; valaddr_reg:x3; val_offset:35880*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35880*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11961:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x881fffff; valaddr_reg:x3; val_offset:35883*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35883*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11962:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x883fffff; valaddr_reg:x3; val_offset:35886*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35886*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11963:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x88400000; valaddr_reg:x3; val_offset:35889*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35889*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11964:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x88600000; valaddr_reg:x3; val_offset:35892*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35892*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11965:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x88700000; valaddr_reg:x3; val_offset:35895*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35895*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11966:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x88780000; valaddr_reg:x3; val_offset:35898*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35898*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11967:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x887c0000; valaddr_reg:x3; val_offset:35901*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35901*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11968:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x887e0000; valaddr_reg:x3; val_offset:35904*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35904*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11969:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x887f0000; valaddr_reg:x3; val_offset:35907*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35907*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11970:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x887f8000; valaddr_reg:x3; val_offset:35910*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35910*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11971:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x887fc000; valaddr_reg:x3; val_offset:35913*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35913*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11972:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x887fe000; valaddr_reg:x3; val_offset:35916*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35916*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11973:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x887ff000; valaddr_reg:x3; val_offset:35919*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35919*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11974:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x887ff800; valaddr_reg:x3; val_offset:35922*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35922*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11975:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x887ffc00; valaddr_reg:x3; val_offset:35925*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35925*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11976:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x887ffe00; valaddr_reg:x3; val_offset:35928*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35928*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11977:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x887fff00; valaddr_reg:x3; val_offset:35931*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35931*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11978:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x887fff80; valaddr_reg:x3; val_offset:35934*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35934*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11979:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x887fffc0; valaddr_reg:x3; val_offset:35937*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35937*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11980:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x887fffe0; valaddr_reg:x3; val_offset:35940*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35940*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11981:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x887ffff0; valaddr_reg:x3; val_offset:35943*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35943*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11982:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x887ffff8; valaddr_reg:x3; val_offset:35946*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35946*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11983:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x887ffffc; valaddr_reg:x3; val_offset:35949*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35949*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11984:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x887ffffe; valaddr_reg:x3; val_offset:35952*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35952*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11985:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x790586 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e790586; op2val:0x80000000;
op3val:0x887fffff; valaddr_reg:x3; val_offset:35955*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35955*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11986:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:35958*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35958*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11987:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:35961*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35961*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11988:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:35964*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35964*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11989:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:35967*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35967*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11990:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:35970*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35970*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11991:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:35973*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35973*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11992:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:35976*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35976*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11993:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:35979*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35979*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11994:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:35982*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35982*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11995:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:35985*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35985*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11996:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:35988*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35988*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11997:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:35991*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35991*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11998:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:35994*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35994*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11999:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:35997*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35997*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12000:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:36000*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36000*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12001:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:36003*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36003*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12002:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x5800000; valaddr_reg:x3; val_offset:36006*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36006*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12003:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x5800001; valaddr_reg:x3; val_offset:36009*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36009*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12004:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x5800003; valaddr_reg:x3; val_offset:36012*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36012*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12005:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x5800007; valaddr_reg:x3; val_offset:36015*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36015*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12006:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x580000f; valaddr_reg:x3; val_offset:36018*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36018*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12007:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x580001f; valaddr_reg:x3; val_offset:36021*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36021*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12008:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x580003f; valaddr_reg:x3; val_offset:36024*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36024*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12009:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x580007f; valaddr_reg:x3; val_offset:36027*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36027*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12010:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x58000ff; valaddr_reg:x3; val_offset:36030*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36030*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12011:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x58001ff; valaddr_reg:x3; val_offset:36033*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36033*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12012:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x58003ff; valaddr_reg:x3; val_offset:36036*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36036*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12013:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x58007ff; valaddr_reg:x3; val_offset:36039*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36039*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12014:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x5800fff; valaddr_reg:x3; val_offset:36042*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36042*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12015:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x5801fff; valaddr_reg:x3; val_offset:36045*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36045*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12016:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x5803fff; valaddr_reg:x3; val_offset:36048*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36048*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12017:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x5807fff; valaddr_reg:x3; val_offset:36051*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36051*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12018:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x580ffff; valaddr_reg:x3; val_offset:36054*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36054*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12019:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x581ffff; valaddr_reg:x3; val_offset:36057*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36057*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12020:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x583ffff; valaddr_reg:x3; val_offset:36060*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36060*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12021:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x587ffff; valaddr_reg:x3; val_offset:36063*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36063*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12022:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x58fffff; valaddr_reg:x3; val_offset:36066*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36066*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12023:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x59fffff; valaddr_reg:x3; val_offset:36069*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36069*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12024:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x5bfffff; valaddr_reg:x3; val_offset:36072*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36072*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12025:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x5c00000; valaddr_reg:x3; val_offset:36075*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36075*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12026:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x5e00000; valaddr_reg:x3; val_offset:36078*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36078*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12027:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x5f00000; valaddr_reg:x3; val_offset:36081*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36081*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12028:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x5f80000; valaddr_reg:x3; val_offset:36084*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36084*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12029:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x5fc0000; valaddr_reg:x3; val_offset:36087*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36087*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12030:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x5fe0000; valaddr_reg:x3; val_offset:36090*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36090*0 + 3*93*FLEN/8, x4, x1, x2)

inst_12031:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7a08a9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7a08a9; op2val:0x0;
op3val:0x5ff0000; valaddr_reg:x3; val_offset:36093*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36093*0 + 3*93*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2121745685,32,FLEN)
NAN_BOXED(8684776,32,FLEN)
NAN_BOXED(1182269440,32,FLEN)
NAN_BOXED(2121745685,32,FLEN)
NAN_BOXED(8684776,32,FLEN)
NAN_BOXED(1182531584,32,FLEN)
NAN_BOXED(2121745685,32,FLEN)
NAN_BOXED(8684776,32,FLEN)
NAN_BOXED(1182662656,32,FLEN)
NAN_BOXED(2121745685,32,FLEN)
NAN_BOXED(8684776,32,FLEN)
NAN_BOXED(1182728192,32,FLEN)
NAN_BOXED(2121745685,32,FLEN)
NAN_BOXED(8684776,32,FLEN)
NAN_BOXED(1182760960,32,FLEN)
NAN_BOXED(2121745685,32,FLEN)
NAN_BOXED(8684776,32,FLEN)
NAN_BOXED(1182777344,32,FLEN)
NAN_BOXED(2121745685,32,FLEN)
NAN_BOXED(8684776,32,FLEN)
NAN_BOXED(1182785536,32,FLEN)
NAN_BOXED(2121745685,32,FLEN)
NAN_BOXED(8684776,32,FLEN)
NAN_BOXED(1182789632,32,FLEN)
NAN_BOXED(2121745685,32,FLEN)
NAN_BOXED(8684776,32,FLEN)
NAN_BOXED(1182791680,32,FLEN)
NAN_BOXED(2121745685,32,FLEN)
NAN_BOXED(8684776,32,FLEN)
NAN_BOXED(1182792704,32,FLEN)
NAN_BOXED(2121745685,32,FLEN)
NAN_BOXED(8684776,32,FLEN)
NAN_BOXED(1182793216,32,FLEN)
NAN_BOXED(2121745685,32,FLEN)
NAN_BOXED(8684776,32,FLEN)
NAN_BOXED(1182793472,32,FLEN)
NAN_BOXED(2121745685,32,FLEN)
NAN_BOXED(8684776,32,FLEN)
NAN_BOXED(1182793600,32,FLEN)
NAN_BOXED(2121745685,32,FLEN)
NAN_BOXED(8684776,32,FLEN)
NAN_BOXED(1182793664,32,FLEN)
NAN_BOXED(2121745685,32,FLEN)
NAN_BOXED(8684776,32,FLEN)
NAN_BOXED(1182793696,32,FLEN)
NAN_BOXED(2121745685,32,FLEN)
NAN_BOXED(8684776,32,FLEN)
NAN_BOXED(1182793712,32,FLEN)
NAN_BOXED(2121745685,32,FLEN)
NAN_BOXED(8684776,32,FLEN)
NAN_BOXED(1182793720,32,FLEN)
NAN_BOXED(2121745685,32,FLEN)
NAN_BOXED(8684776,32,FLEN)
NAN_BOXED(1182793724,32,FLEN)
NAN_BOXED(2121745685,32,FLEN)
NAN_BOXED(8684776,32,FLEN)
NAN_BOXED(1182793726,32,FLEN)
NAN_BOXED(2121745685,32,FLEN)
NAN_BOXED(8684776,32,FLEN)
NAN_BOXED(1182793727,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483649,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483651,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2147483655,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149161369,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2149880393,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2150839091,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151078765,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151398331,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2151957572,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2152516812,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2153475510,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154194534,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2154673883,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872248,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872252,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2155872254,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701376,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701377,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701379,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701383,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701391,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701407,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701439,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701503,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701631,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281701887,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281702399,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281703423,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281705471,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281709567,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281717759,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281734143,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281766911,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281832447,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2281963519,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2282225663,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2282749951,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2283798527,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2285895679,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2285895680,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2287992832,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289041408,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289565696,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289827840,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2289958912,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290024448,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290057216,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290073600,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290081792,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290085888,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290087936,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290088960,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089472,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089728,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089856,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089920,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089952,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089968,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089976,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089980,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089982,32,FLEN)
NAN_BOXED(2121860486,32,FLEN)
NAN_BOXED(2147483648,32,FLEN)
NAN_BOXED(2290089983,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(1677721,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(2396745,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3355443,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3595117,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(3914683,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(4473924,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5033164,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(5991862,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(6710886,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(7190235,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388600,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388604,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388606,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274688,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274689,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274691,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274695,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274703,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274719,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274751,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274815,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92274943,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92275199,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92275711,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92276735,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92278783,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92282879,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92291071,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92307455,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92340223,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92405759,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92536831,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(92798975,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(93323263,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(94371839,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(96468991,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(96468992,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(98566144,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(99614720,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100139008,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100401152,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100532224,32,FLEN)
NAN_BOXED(2121926825,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(100597760,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
