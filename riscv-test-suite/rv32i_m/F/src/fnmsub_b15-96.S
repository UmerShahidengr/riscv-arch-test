
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:08 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmsub.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmsub.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmsub_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmsub_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_12160:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7c800c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x01c62f and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7c800c; op2val:0x8081c62f;
op3val:0xc97ff800; valaddr_reg:x3; val_offset:36480*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36480*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12161:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7c800c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x01c62f and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7c800c; op2val:0x8081c62f;
op3val:0xc97ffc00; valaddr_reg:x3; val_offset:36483*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36483*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12162:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7c800c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x01c62f and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7c800c; op2val:0x8081c62f;
op3val:0xc97ffe00; valaddr_reg:x3; val_offset:36486*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36486*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12163:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7c800c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x01c62f and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7c800c; op2val:0x8081c62f;
op3val:0xc97fff00; valaddr_reg:x3; val_offset:36489*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36489*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12164:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7c800c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x01c62f and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7c800c; op2val:0x8081c62f;
op3val:0xc97fff80; valaddr_reg:x3; val_offset:36492*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36492*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12165:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7c800c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x01c62f and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7c800c; op2val:0x8081c62f;
op3val:0xc97fffc0; valaddr_reg:x3; val_offset:36495*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36495*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12166:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7c800c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x01c62f and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7c800c; op2val:0x8081c62f;
op3val:0xc97fffe0; valaddr_reg:x3; val_offset:36498*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36498*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12167:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7c800c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x01c62f and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7c800c; op2val:0x8081c62f;
op3val:0xc97ffff0; valaddr_reg:x3; val_offset:36501*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36501*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12168:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7c800c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x01c62f and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7c800c; op2val:0x8081c62f;
op3val:0xc97ffff8; valaddr_reg:x3; val_offset:36504*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36504*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12169:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7c800c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x01c62f and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7c800c; op2val:0x8081c62f;
op3val:0xc97ffffc; valaddr_reg:x3; val_offset:36507*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36507*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12170:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7c800c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x01c62f and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7c800c; op2val:0x8081c62f;
op3val:0xc97ffffe; valaddr_reg:x3; val_offset:36510*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36510*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12171:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7c800c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x01c62f and fs3 == 1 and fe3 == 0x92 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7c800c; op2val:0x8081c62f;
op3val:0xc97fffff; valaddr_reg:x3; val_offset:36513*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36513*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12172:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21800000; valaddr_reg:x3; val_offset:36516*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36516*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12173:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21800001; valaddr_reg:x3; val_offset:36519*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36519*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12174:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21800003; valaddr_reg:x3; val_offset:36522*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36522*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12175:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21800007; valaddr_reg:x3; val_offset:36525*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36525*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12176:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x2180000f; valaddr_reg:x3; val_offset:36528*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36528*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12177:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x2180001f; valaddr_reg:x3; val_offset:36531*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36531*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12178:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x2180003f; valaddr_reg:x3; val_offset:36534*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36534*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12179:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x2180007f; valaddr_reg:x3; val_offset:36537*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36537*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12180:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x218000ff; valaddr_reg:x3; val_offset:36540*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36540*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12181:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x218001ff; valaddr_reg:x3; val_offset:36543*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36543*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12182:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x218003ff; valaddr_reg:x3; val_offset:36546*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36546*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12183:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x218007ff; valaddr_reg:x3; val_offset:36549*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36549*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12184:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21800fff; valaddr_reg:x3; val_offset:36552*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36552*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12185:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21801fff; valaddr_reg:x3; val_offset:36555*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36555*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12186:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21803fff; valaddr_reg:x3; val_offset:36558*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36558*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12187:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21807fff; valaddr_reg:x3; val_offset:36561*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36561*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12188:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x2180ffff; valaddr_reg:x3; val_offset:36564*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36564*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12189:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x2181ffff; valaddr_reg:x3; val_offset:36567*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36567*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12190:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x2183ffff; valaddr_reg:x3; val_offset:36570*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36570*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12191:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x2187ffff; valaddr_reg:x3; val_offset:36573*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36573*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12192:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x218fffff; valaddr_reg:x3; val_offset:36576*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36576*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12193:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x219fffff; valaddr_reg:x3; val_offset:36579*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36579*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12194:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21bfffff; valaddr_reg:x3; val_offset:36582*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36582*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12195:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21c00000; valaddr_reg:x3; val_offset:36585*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36585*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12196:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21e00000; valaddr_reg:x3; val_offset:36588*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36588*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12197:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21f00000; valaddr_reg:x3; val_offset:36591*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36591*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12198:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21f80000; valaddr_reg:x3; val_offset:36594*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36594*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12199:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21fc0000; valaddr_reg:x3; val_offset:36597*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36597*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12200:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21fe0000; valaddr_reg:x3; val_offset:36600*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36600*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12201:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21ff0000; valaddr_reg:x3; val_offset:36603*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36603*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12202:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21ff8000; valaddr_reg:x3; val_offset:36606*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36606*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12203:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21ffc000; valaddr_reg:x3; val_offset:36609*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36609*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12204:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21ffe000; valaddr_reg:x3; val_offset:36612*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36612*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12205:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21fff000; valaddr_reg:x3; val_offset:36615*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36615*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12206:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21fff800; valaddr_reg:x3; val_offset:36618*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36618*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12207:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21fffc00; valaddr_reg:x3; val_offset:36621*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36621*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12208:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21fffe00; valaddr_reg:x3; val_offset:36624*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36624*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12209:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21ffff00; valaddr_reg:x3; val_offset:36627*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36627*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12210:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21ffff80; valaddr_reg:x3; val_offset:36630*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36630*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12211:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21ffffc0; valaddr_reg:x3; val_offset:36633*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36633*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12212:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21ffffe0; valaddr_reg:x3; val_offset:36636*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36636*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12213:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21fffff0; valaddr_reg:x3; val_offset:36639*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36639*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12214:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21fffff8; valaddr_reg:x3; val_offset:36642*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36642*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12215:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21fffffc; valaddr_reg:x3; val_offset:36645*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36645*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12216:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21fffffe; valaddr_reg:x3; val_offset:36648*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36648*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12217:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x43 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x21ffffff; valaddr_reg:x3; val_offset:36651*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36651*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12218:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x3f800001; valaddr_reg:x3; val_offset:36654*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36654*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12219:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x3f800003; valaddr_reg:x3; val_offset:36657*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36657*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12220:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x3f800007; valaddr_reg:x3; val_offset:36660*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36660*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12221:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x3f999999; valaddr_reg:x3; val_offset:36663*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36663*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12222:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:36666*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36666*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12223:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:36669*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36669*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12224:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:36672*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36672*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12225:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:36675*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36675*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12226:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:36678*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36678*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12227:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:36681*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36681*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12228:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:36684*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36684*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12229:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:36687*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36687*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12230:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:36690*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36690*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12231:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:36693*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36693*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12232:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:36696*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36696*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12233:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e2c3a and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00eb90 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e2c3a; op2val:0x80eb90;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:36699*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36699*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12234:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:36702*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36702*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12235:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:36705*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36705*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12236:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:36708*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36708*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12237:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:36711*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36711*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12238:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:36714*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36714*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12239:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:36717*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36717*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12240:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:36720*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36720*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12241:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:36723*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36723*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12242:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:36726*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36726*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12243:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:36729*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36729*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12244:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:36732*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36732*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12245:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:36735*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36735*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12246:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:36738*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36738*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12247:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:36741*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36741*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12248:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:36744*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36744*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12249:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:36747*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36747*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12250:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x3000000; valaddr_reg:x3; val_offset:36750*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36750*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12251:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x3000001; valaddr_reg:x3; val_offset:36753*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36753*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12252:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x3000003; valaddr_reg:x3; val_offset:36756*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36756*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12253:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x3000007; valaddr_reg:x3; val_offset:36759*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36759*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12254:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x300000f; valaddr_reg:x3; val_offset:36762*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36762*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12255:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x300001f; valaddr_reg:x3; val_offset:36765*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36765*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12256:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x300003f; valaddr_reg:x3; val_offset:36768*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36768*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12257:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x300007f; valaddr_reg:x3; val_offset:36771*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36771*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12258:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x30000ff; valaddr_reg:x3; val_offset:36774*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36774*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12259:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x30001ff; valaddr_reg:x3; val_offset:36777*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36777*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12260:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x30003ff; valaddr_reg:x3; val_offset:36780*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36780*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12261:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x30007ff; valaddr_reg:x3; val_offset:36783*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36783*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12262:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x3000fff; valaddr_reg:x3; val_offset:36786*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36786*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12263:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x3001fff; valaddr_reg:x3; val_offset:36789*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36789*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12264:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x3003fff; valaddr_reg:x3; val_offset:36792*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36792*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12265:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x3007fff; valaddr_reg:x3; val_offset:36795*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36795*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12266:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x300ffff; valaddr_reg:x3; val_offset:36798*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36798*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12267:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x301ffff; valaddr_reg:x3; val_offset:36801*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36801*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12268:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x303ffff; valaddr_reg:x3; val_offset:36804*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36804*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12269:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x307ffff; valaddr_reg:x3; val_offset:36807*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36807*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12270:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x30fffff; valaddr_reg:x3; val_offset:36810*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36810*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12271:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x31fffff; valaddr_reg:x3; val_offset:36813*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36813*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12272:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x33fffff; valaddr_reg:x3; val_offset:36816*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36816*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12273:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x3400000; valaddr_reg:x3; val_offset:36819*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36819*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12274:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x3600000; valaddr_reg:x3; val_offset:36822*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36822*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12275:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x3700000; valaddr_reg:x3; val_offset:36825*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36825*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12276:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x3780000; valaddr_reg:x3; val_offset:36828*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36828*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12277:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x37c0000; valaddr_reg:x3; val_offset:36831*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36831*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12278:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x37e0000; valaddr_reg:x3; val_offset:36834*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36834*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12279:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x37f0000; valaddr_reg:x3; val_offset:36837*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36837*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12280:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x37f8000; valaddr_reg:x3; val_offset:36840*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36840*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12281:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x37fc000; valaddr_reg:x3; val_offset:36843*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36843*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12282:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x37fe000; valaddr_reg:x3; val_offset:36846*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36846*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12283:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x37ff000; valaddr_reg:x3; val_offset:36849*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36849*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12284:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x37ff800; valaddr_reg:x3; val_offset:36852*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36852*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12285:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x37ffc00; valaddr_reg:x3; val_offset:36855*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36855*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12286:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x37ffe00; valaddr_reg:x3; val_offset:36858*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36858*0 + 3*95*FLEN/8, x4, x1, x2)

inst_12287:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e9193 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x06 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmsub.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e9193; op2val:0x0;
op3val:0x37fff00; valaddr_reg:x3; val_offset:36861*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmsub.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36861*0 + 3*95*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(2122088460,32,FLEN)
NAN_BOXED(2155988527,32,FLEN)
NAN_BOXED(3380606976,32,FLEN)
NAN_BOXED(2122088460,32,FLEN)
NAN_BOXED(2155988527,32,FLEN)
NAN_BOXED(3380608000,32,FLEN)
NAN_BOXED(2122088460,32,FLEN)
NAN_BOXED(2155988527,32,FLEN)
NAN_BOXED(3380608512,32,FLEN)
NAN_BOXED(2122088460,32,FLEN)
NAN_BOXED(2155988527,32,FLEN)
NAN_BOXED(3380608768,32,FLEN)
NAN_BOXED(2122088460,32,FLEN)
NAN_BOXED(2155988527,32,FLEN)
NAN_BOXED(3380608896,32,FLEN)
NAN_BOXED(2122088460,32,FLEN)
NAN_BOXED(2155988527,32,FLEN)
NAN_BOXED(3380608960,32,FLEN)
NAN_BOXED(2122088460,32,FLEN)
NAN_BOXED(2155988527,32,FLEN)
NAN_BOXED(3380608992,32,FLEN)
NAN_BOXED(2122088460,32,FLEN)
NAN_BOXED(2155988527,32,FLEN)
NAN_BOXED(3380609008,32,FLEN)
NAN_BOXED(2122088460,32,FLEN)
NAN_BOXED(2155988527,32,FLEN)
NAN_BOXED(3380609016,32,FLEN)
NAN_BOXED(2122088460,32,FLEN)
NAN_BOXED(2155988527,32,FLEN)
NAN_BOXED(3380609020,32,FLEN)
NAN_BOXED(2122088460,32,FLEN)
NAN_BOXED(2155988527,32,FLEN)
NAN_BOXED(3380609022,32,FLEN)
NAN_BOXED(2122088460,32,FLEN)
NAN_BOXED(2155988527,32,FLEN)
NAN_BOXED(3380609023,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(562036736,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(562036737,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(562036739,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(562036743,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(562036751,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(562036767,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(562036799,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(562036863,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(562036991,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(562037247,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(562037759,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(562038783,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(562040831,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(562044927,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(562053119,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(562069503,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(562102271,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(562167807,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(562298879,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(562561023,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(563085311,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(564133887,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(566231039,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(566231040,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(568328192,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(569376768,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(569901056,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(570163200,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(570294272,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(570359808,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(570392576,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(570408960,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(570417152,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(570421248,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(570423296,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(570424320,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(570424832,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(570425088,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(570425216,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(570425280,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(570425312,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(570425328,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(570425336,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(570425340,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(570425342,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(570425343,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(1065353217,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(1065353219,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(1065353223,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(1067030937,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(1067749961,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(1068708659,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(1068948333,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(1069267899,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(1069827140,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(1070386380,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(1071345078,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(1072064102,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(1072543451,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(1073741816,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(1073741820,32,FLEN)
NAN_BOXED(2122198074,32,FLEN)
NAN_BOXED(8448912,32,FLEN)
NAN_BOXED(1073741822,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388609,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388611,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(8388615,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10066329,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(10785353,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11744051,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(11983725,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12303291,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(12862532,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(13421772,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(14380470,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15099494,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(15578843,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777208,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777212,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(16777214,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331648,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331649,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331651,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331655,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331663,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331679,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331711,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331775,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50331903,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50332159,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50332671,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50333695,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50335743,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50339839,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50348031,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50364415,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50397183,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50462719,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50593791,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(50855935,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(51380223,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(52428799,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(54525951,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(54525952,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(56623104,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(57671680,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58195968,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58458112,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58589184,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58654720,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58687488,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58703872,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58712064,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58716160,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58718208,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58719232,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58719744,32,FLEN)
NAN_BOXED(2122224019,32,FLEN)
NAN_BOXED(0,32,FLEN)
NAN_BOXED(58720000,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
